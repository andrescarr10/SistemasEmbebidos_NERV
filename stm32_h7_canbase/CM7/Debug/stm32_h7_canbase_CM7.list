
stm32_h7_canbase_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd8  08006fd8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe0  08006fe0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  24000074  0800705c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400024c  0800705c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151d9  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ec  00000000  00000000  0003527b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00037668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00038588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ad04  00000000  00000000  000393c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125dc  00000000  00000000  000740c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00183a7a  00000000  00000000  000866a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020a11a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d4  00000000  00000000  0020a16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006e40 	.word	0x08006e40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08006e40 	.word	0x08006e40

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af06      	add	r7, sp, #24
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b46      	ldr	r3, [pc, #280]	; (80008d8 <main+0x128>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fa8f 	bl	8000cfc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fc97 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f88b 	bl	80008fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <main+0x128>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a3a      	ldr	r2, [pc, #232]	; (80008d8 <main+0x128>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <main+0x128>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f001 fe27 	bl	8002458 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f001 fe3d 	bl	800248c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <main+0x128>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fa61 	bl	8000cfc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f9dd 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 f98f 	bl	8000b60 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000842:	f000 f8d7 	bl	80009f4 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     printf("Hello World\r\n");
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <main+0x12c>)
 8000848:	f005 fb7c 	bl	8005f44 <puts>
     while (1){
     	while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
 800084c:	bf00      	nop
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <main+0x130>)
 8000850:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <main+0x134>)
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	4824      	ldr	r0, [pc, #144]	; (80008e8 <main+0x138>)
 8000856:	f001 f8ad 	bl	80019b4 <HAL_FDCAN_GetRxMessage>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f6      	bne.n	800084e <main+0x9e>

     	HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f000 fce7 	bl	8001234 <HAL_Delay>
     	printf("\n\rCAN ID: %lx", RxHeader.Identifier);
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <main+0x134>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	481f      	ldr	r0, [pc, #124]	; (80008ec <main+0x13c>)
 800086e:	f005 fae3 	bl	8005e38 <iprintf>

     	printf(" [%X] ", ((unsigned int)RxHeader.DataLength & 0x000F0000) >> 16 );
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <main+0x134>)
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	0c1b      	lsrs	r3, r3, #16
 8000878:	f003 030f 	and.w	r3, r3, #15
 800087c:	4619      	mov	r1, r3
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <main+0x140>)
 8000880:	f005 fada 	bl	8005e38 <iprintf>
     	printf(" %02X %02X %02X %02X %02X %02X %02X %02X",RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <main+0x130>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461d      	mov	r5, r3
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <main+0x130>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	461e      	mov	r6, r3
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <main+0x130>)
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	469c      	mov	ip, r3
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <main+0x130>)
 8000898:	78db      	ldrb	r3, [r3, #3]
 800089a:	461a      	mov	r2, r3
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <main+0x130>)
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <main+0x130>)
 80008a4:	795b      	ldrb	r3, [r3, #5]
 80008a6:	4618      	mov	r0, r3
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <main+0x130>)
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	461c      	mov	r4, r3
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <main+0x130>)
 80008b0:	79db      	ldrb	r3, [r3, #7]
 80008b2:	9304      	str	r3, [sp, #16]
 80008b4:	9403      	str	r4, [sp, #12]
 80008b6:	9002      	str	r0, [sp, #8]
 80008b8:	9101      	str	r1, [sp, #4]
 80008ba:	9200      	str	r2, [sp, #0]
 80008bc:	4663      	mov	r3, ip
 80008be:	4632      	mov	r2, r6
 80008c0:	4629      	mov	r1, r5
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <main+0x144>)
 80008c4:	f005 fab8 	bl	8005e38 <iprintf>
     	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 80008c8:	2101      	movs	r1, #1
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <main+0x148>)
 80008cc:	f001 fda9 	bl	8002422 <HAL_GPIO_TogglePin>
     	HAL_Delay(100); /*AAO-*/
 80008d0:	2064      	movs	r0, #100	; 0x64
 80008d2:	f000 fcaf 	bl	8001234 <HAL_Delay>
     	while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
 80008d6:	e7b9      	b.n	800084c <main+0x9c>
 80008d8:	58024400 	.word	0x58024400
 80008dc:	08006e58 	.word	0x08006e58
 80008e0:	2400022c 	.word	0x2400022c
 80008e4:	24000204 	.word	0x24000204
 80008e8:	24000090 	.word	0x24000090
 80008ec:	08006e68 	.word	0x08006e68
 80008f0:	08006e78 	.word	0x08006e78
 80008f4:	08006e80 	.word	0x08006e80
 80008f8:	58020400 	.word	0x58020400

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09c      	sub	sp, #112	; 0x70
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	224c      	movs	r2, #76	; 0x4c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f005 fa8c 	bl	8005e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f005 fa86 	bl	8005e28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800091c:	2004      	movs	r0, #4
 800091e:	f001 fdc9 	bl	80024b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b31      	ldr	r3, [pc, #196]	; (80009ec <SystemClock_Config+0xf0>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a30      	ldr	r2, [pc, #192]	; (80009ec <SystemClock_Config+0xf0>)
 800092c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <SystemClock_Config+0xf0>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <SystemClock_Config+0xf4>)
 800093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <SystemClock_Config+0xf4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <SystemClock_Config+0xf4>)
 800094a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000954:	bf00      	nop
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <SystemClock_Config+0xf0>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000962:	d1f8      	bne.n	8000956 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000968:	2301      	movs	r3, #1
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2340      	movs	r3, #64	; 0x40
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800097c:	233c      	movs	r3, #60	; 0x3c
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8000984:	2318      	movs	r3, #24
 8000986:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098c:	230c      	movs	r3, #12
 800098e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000990:	2300      	movs	r3, #0
 8000992:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fde3 	bl	8002568 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009a8:	f000 f9a8 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	233f      	movs	r3, #63	; 0x3f
 80009ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2303      	movs	r3, #3
 80009b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b8:	2308      	movs	r3, #8
 80009ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009bc:	2340      	movs	r3, #64	; 0x40
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f9f6 	bl	8002dc4 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80009de:	f000 f98d 	bl	8000cfc <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3770      	adds	r7, #112	; 0x70
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58024800 	.word	0x58024800
 80009f0:	58000400 	.word	0x58000400

080009f4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 80009fc:	4a55      	ldr	r2, [pc, #340]	; (8000b54 <MX_FDCAN1_Init+0x160>)
 80009fe:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a00:	4b53      	ldr	r3, [pc, #332]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a06:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a0c:	4b50      	ldr	r3, [pc, #320]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a12:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000a18:	4b4d      	ldr	r3, [pc, #308]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000a1e:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000a24:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000a2a:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a2c:	221f      	movs	r2, #31
 8000a2e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000a30:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a32:	2208      	movs	r2, #8
 8000a34:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a36:	4b46      	ldr	r3, [pc, #280]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a3c:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000a54:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000a60:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a6c:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a74:	2204      	movs	r2, #4
 8000a76:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a78:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a7e:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a84:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000a90:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000aa2:	482b      	ldr	r0, [pc, #172]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000aa4:	f000 fcda 	bl	800145c <HAL_FDCAN_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000aae:	f000 f925 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /*AAO+*/
   /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ab2:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <MX_FDCAN1_Init+0x164>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <MX_FDCAN1_Init+0x164>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_FDCAN1_Init+0x164>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <MX_FDCAN1_Init+0x164>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	60da      	str	r2, [r3, #12]
    //sFilterConfig.FilterID1 = 0x321;
    //sFilterConfig.FilterID2 = 0xFFF;
    sFilterConfig.FilterID1 = 0x610; //Testing
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_FDCAN1_Init+0x164>)
 8000acc:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8000ad0:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterID2 = 0xFFF;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_FDCAN1_Init+0x164>)
 8000ad4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ad8:	615a      	str	r2, [r3, #20]

    /* Configure global filter to reject all non-matching frames */
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000ada:	2301      	movs	r3, #1
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	481a      	ldr	r0, [pc, #104]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000ae6:	f000 ff0d 	bl	8001904 <HAL_FDCAN_ConfigGlobalFilter>

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000aea:	491b      	ldr	r1, [pc, #108]	; (8000b58 <MX_FDCAN1_Init+0x164>)
 8000aec:	4818      	ldr	r0, [pc, #96]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000aee:	f000 fe93 	bl	8001818 <HAL_FDCAN_ConfigFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_FDCAN1_Init+0x108>
      {
         /* Filter configuration Error */
         Error_Handler();
 8000af8:	f000 f900 	bl	8000cfc <Error_Handler>
      }
     /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000afe:	f000 ff2e 	bl	800195e <HAL_FDCAN_Start>
      }
         /* Start Error */
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000b02:	2200      	movs	r2, #0
 8000b04:	2101      	movs	r1, #1
 8000b06:	4812      	ldr	r0, [pc, #72]	; (8000b50 <MX_FDCAN1_Init+0x15c>)
 8000b08:	f001 f8c2 	bl	8001c90 <HAL_FDCAN_ActivateNotification>
      }
         /* Notification Error */

     /* Configure Tx buffer message */
    TxHeader.Identifier = 0x111;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b0e:	f240 1211 	movw	r2, #273	; 0x111
 8000b12:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b22:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000b26:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b34:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b3c:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0x00;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <MX_FDCAN1_Init+0x168>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
   /*AAO-*/
  /* USER CODE END FDCAN1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	24000090 	.word	0x24000090
 8000b54:	4000a000 	.word	0x4000a000
 8000b58:	240001c0 	.word	0x240001c0
 8000b5c:	240001e0 	.word	0x240001e0

08000b60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <MX_USART3_UART_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000baa:	f003 ffff 	bl	8004bac <HAL_UART_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bb4:	f000 f8a2 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000bbc:	f005 f832 	bl	8005c24 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc6:	f000 f899 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000bce:	f005 f867 	bl	8005ca0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd8:	f000 f890 	bl	8000cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_USART3_UART_Init+0x90>)
 8000bde:	f004 ffe8 	bl	8005bb2 <HAL_UARTEx_DisableFifoMode>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f000 f888 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	24000130 	.word	0x24000130
 8000bf4:	40004800 	.word	0x40004800

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	4a36      	ldr	r2, [pc, #216]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1e:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2c:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a2f      	ldr	r2, [pc, #188]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	4a27      	ldr	r2, [pc, #156]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_GPIO_Init+0xf8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000caa:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000cac:	f001 fba0 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_GPIO_Init+0x100>)
 8000cc6:	f001 f9e3 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8000cca:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_GPIO_Init+0xfc>)
 8000ce4:	f001 f9d4 	bl	8002090 <HAL_GPIO_Init>

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020400 	.word	0x58020400
 8000cf8:	58020800 	.word	0x58020800

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d10:	1d39      	adds	r1, r7, #4
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	2201      	movs	r2, #1
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <__io_putchar+0x20>)
 8000d1a:	f003 ff97 	bl	8004c4c <HAL_UART_Transmit>
  return ch;
 8000d1e:	687b      	ldr	r3, [r7, #4]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	24000130 	.word	0x24000130

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_MspInit+0x30>)
 8000d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x30>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x30>)
 8000d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	58024400 	.word	0x58024400

08000d60 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0b8      	sub	sp, #224	; 0xe0
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	22bc      	movs	r2, #188	; 0xbc
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f005 f851 	bl	8005e28 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <HAL_FDCAN_MspInit+0xe8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d157      	bne.n	8000e40 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 fb9b 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000dac:	f7ff ffa6 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000db2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000db6:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000dc2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd4:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_FDCAN_MspInit+0xec>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e04:	2309      	movs	r3, #9
 8000e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_RX_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480f      	ldr	r0, [pc, #60]	; (8000e50 <HAL_FDCAN_MspInit+0xf0>)
 8000e12:	f001 f93d 	bl	8002090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FDCAN1_TX_Pin;
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e2e:	2309      	movs	r3, #9
 8000e30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_TX_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_FDCAN_MspInit+0xf0>)
 8000e3c:	f001 f928 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	37e0      	adds	r7, #224	; 0xe0
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	4000a000 	.word	0x4000a000
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020c00 	.word	0x58020c00

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0b8      	sub	sp, #224	; 0xe0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	22bc      	movs	r2, #188	; 0xbc
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f004 ffd7 	bl	8005e28 <memset>
  if(huart->Instance==USART3)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <HAL_UART_MspInit+0xc0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d142      	bne.n	8000f0a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e84:	2302      	movs	r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fb22 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e9e:	f7ff ff2d 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_UART_MspInit+0xc4>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_UART_MspInit+0xc8>)
 8000f06:	f001 f8c3 	bl	8002090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	37e0      	adds	r7, #224	; 0xe0
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40004800 	.word	0x40004800
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58020c00 	.word	0x58020c00

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f942 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
	}

return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fe9d 	bl	8000d08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
	}
	return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	605a      	str	r2, [r3, #4]
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f004 fe9a 	bl	8005db8 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	24080000 	.word	0x24080000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	24000234 	.word	0x24000234
 80010b8:	24000250 	.word	0x24000250

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff fae0 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f004 fe6b 	bl	8005dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fb5f 	bl	80007b0 <main>
  bx  lr
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010fc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001100:	08006fe8 	.word	0x08006fe8
  ldr r2, =_sbss
 8001104:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001108:	2400024c 	.word	0x2400024c

0800110c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC3_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001116:	2003      	movs	r0, #3
 8001118:	f000 f96e 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800111c:	f002 f808 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8001120:	4602      	mov	r2, r0
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_Init+0x68>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	4913      	ldr	r1, [pc, #76]	; (800117c <HAL_Init+0x6c>)
 800112e:	5ccb      	ldrb	r3, [r1, r3]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
 8001138:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_Init+0x68>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_Init+0x6c>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_Init+0x70>)
 8001152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <HAL_Init+0x74>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115a:	200f      	movs	r0, #15
 800115c:	f000 f814 	bl	8001188 <HAL_InitTick>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e002      	b.n	8001170 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800116a:	f7ff fddf 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	58024400 	.word	0x58024400
 800117c:	08006ef8 	.word	0x08006ef8
 8001180:	24000004 	.word	0x24000004
 8001184:	24000000 	.word	0x24000000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_InitTick+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e021      	b.n	80011e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_InitTick+0x64>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_InitTick+0x60>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f945 	bl	8001442 <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f91d 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x68>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2400000c 	.word	0x2400000c
 80011ec:	24000000 	.word	0x24000000
 80011f0:	24000008 	.word	0x24000008

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2400000c 	.word	0x2400000c
 8001218:	24000238 	.word	0x24000238

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24000238 	.word	0x24000238

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_Delay+0x44>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2400000c 	.word	0x2400000c

0800127c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetREVID+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0c1b      	lsrs	r3, r3, #16
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	5c001000 	.word	0x5c001000

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <__NVIC_SetPriorityGrouping+0x40>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x40>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	05fa0000 	.word	0x05fa0000

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff47 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800141c:	f7ff ff5e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001420:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff ff90 	bl	800134c <NVIC_EncodePriority>
 800142c:	4602      	mov	r2, r0
 800142e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff5f 	bl	80012f8 <__NVIC_SetPriority>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffb2 	bl	80013b4 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b098      	sub	sp, #96	; 0x60
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001464:	4a84      	ldr	r2, [pc, #528]	; (8001678 <HAL_FDCAN_Init+0x21c>)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4611      	mov	r1, r2
 800146c:	224c      	movs	r2, #76	; 0x4c
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fccc 	bl	8005e0c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e1c6      	b.n	800180c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7e      	ldr	r2, [pc, #504]	; (800167c <HAL_FDCAN_Init+0x220>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d106      	bne.n	8001496 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001490:	461a      	mov	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fc58 	bl	8000d60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0210 	bic.w	r2, r2, #16
 80014be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c0:	f7ff feac 	bl	800121c <HAL_GetTick>
 80014c4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014c6:	e014      	b.n	80014f2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014c8:	f7ff fea8 	bl	800121c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b0a      	cmp	r3, #10
 80014d4:	d90d      	bls.n	80014f2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e18c      	b.n	800180c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d0e3      	beq.n	80014c8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff fe84 	bl	800121c <HAL_GetTick>
 8001514:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001516:	e014      	b.n	8001542 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001518:	f7ff fe80 	bl	800121c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b0a      	cmp	r3, #10
 8001524:	d90d      	bls.n	8001542 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e164      	b.n	800180c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0e3      	beq.n	8001518 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0202 	orr.w	r2, r2, #2
 800155e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7c1b      	ldrb	r3, [r3, #16]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d108      	bne.n	800157a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001576:	619a      	str	r2, [r3, #24]
 8001578:	e007      	b.n	800158a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699a      	ldr	r2, [r3, #24]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001588:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7c5b      	ldrb	r3, [r3, #17]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015a0:	619a      	str	r2, [r3, #24]
 80015a2:	e007      	b.n	80015b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699a      	ldr	r2, [r3, #24]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7c9b      	ldrb	r3, [r3, #18]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d108      	bne.n	80015ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015ca:	619a      	str	r2, [r3, #24]
 80015cc:	e007      	b.n	80015de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001602:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0210 	bic.w	r2, r2, #16
 8001612:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d108      	bne.n	800162e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0204 	orr.w	r2, r2, #4
 800162a:	619a      	str	r2, [r3, #24]
 800162c:	e030      	b.n	8001690 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d02c      	beq.n	8001690 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d020      	beq.n	8001680 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699a      	ldr	r2, [r3, #24]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800164c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0210 	orr.w	r2, r2, #16
 800165c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d114      	bne.n	8001690 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0220 	orr.w	r2, r2, #32
 8001674:	619a      	str	r2, [r3, #24]
 8001676:	e00b      	b.n	8001690 <HAL_FDCAN_Init+0x234>
 8001678:	08006eac 	.word	0x08006eac
 800167c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0220 	orr.w	r2, r2, #32
 800168e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	3b01      	subs	r3, #1
 8001696:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	3b01      	subs	r3, #1
 800169e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80016a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80016b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80016ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016c4:	d115      	bne.n	80016f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	3b01      	subs	r3, #1
 80016d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	3b01      	subs	r3, #1
 80016dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80016de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	3b01      	subs	r3, #1
 80016e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80016ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001718:	4413      	add	r3, r2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d011      	beq.n	8001742 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001726:	f023 0107 	bic.w	r1, r3, #7
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	3360      	adds	r3, #96	; 0x60
 8001732:	443b      	add	r3, r7
 8001734:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d011      	beq.n	800176e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001752:	f023 0107 	bic.w	r1, r3, #7
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	3360      	adds	r3, #96	; 0x60
 800175e:	443b      	add	r3, r7
 8001760:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001772:	2b00      	cmp	r3, #0
 8001774:	d012      	beq.n	800179c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800177e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	3360      	adds	r3, #96	; 0x60
 800178a:	443b      	add	r3, r7
 800178c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001790:	011a      	lsls	r2, r3, #4
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d012      	beq.n	80017ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80017ac:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	3360      	adds	r3, #96	; 0x60
 80017b8:	443b      	add	r3, r7
 80017ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80017be:	021a      	lsls	r2, r3, #8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_FDCAN_Init+0x3b8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d107      	bne.n	80017e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f022 0203 	bic.w	r2, r2, #3
 80017e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fac1 	bl	8001d84 <FDCAN_CalcultateRamBlockAddresses>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001808:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800180c:	4618      	mov	r0, r3
 800180e:	3760      	adds	r7, #96	; 0x60
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	4000a000 	.word	0x4000a000

08001818 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001828:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d002      	beq.n	8001836 <HAL_FDCAN_ConfigFilter+0x1e>
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d157      	bne.n	80018e6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d12b      	bne.n	8001896 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b07      	cmp	r3, #7
 8001844:	d10d      	bne.n	8001862 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001852:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001858:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800185a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e00e      	b.n	8001880 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800186e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001876:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e025      	b.n	80018e2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	075a      	lsls	r2, r3, #29
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b07      	cmp	r3, #7
 80018aa:	d103      	bne.n	80018b4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	e006      	b.n	80018c2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	079a      	lsls	r2, r3, #30
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3304      	adds	r3, #4
 80018da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e008      	b.n	80018f8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018ec:	f043 0202 	orr.w	r2, r3, #2
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
  }
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d110      	bne.n	8001940 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001926:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800192c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	e008      	b.n	8001952 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001946:	f043 0204 	orr.w	r2, r3, #4
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
  }
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d111      	bne.n	8001996 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2202      	movs	r2, #2
 8001976:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0201 	bic.w	r2, r2, #1
 8001988:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e008      	b.n	80019a8 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80019cc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80019ce:	7efb      	ldrb	r3, [r7, #27]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	f040 814b 	bne.w	8001c6c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b40      	cmp	r3, #64	; 0x40
 80019da:	d14d      	bne.n	8001a78 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80019e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019f2:	f043 0220 	orr.w	r2, r3, #32
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e13e      	b.n	8001c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e12c      	b.n	8001c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a2c:	0e1b      	lsrs	r3, r3, #24
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d10b      	bne.n	8001a4e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001a3e:	0fdb      	lsrs	r3, r3, #31
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a48:	d101      	bne.n	8001a4e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	69f9      	ldr	r1, [r7, #28]
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	e069      	b.n	8001b4c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b41      	cmp	r3, #65	; 0x41
 8001a7c:	d14d      	bne.n	8001b1a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001a86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a94:	f043 0220 	orr.w	r2, r3, #32
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0ed      	b.n	8001c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ab8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0db      	b.n	8001c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ace:	0e1b      	lsrs	r3, r3, #24
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d10b      	bne.n	8001af0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ae0:	0fdb      	lsrs	r3, r3, #31
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aea:	d101      	bne.n	8001af0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	69f9      	ldr	r1, [r7, #28]
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
 8001b18:	e018      	b.n	8001b4c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d309      	bcc.n	8001b38 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b2a:	f043 0220 	orr.w	r2, r3, #32
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0a2      	b.n	8001c7e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d107      	bne.n	8001b70 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0c9b      	lsrs	r3, r3, #18
 8001b66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e005      	b.n	8001b7c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3304      	adds	r3, #4
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e1b      	lsrs	r3, r3, #24
 8001bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0fda      	lsrs	r2, r3, #31
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	3304      	adds	r3, #4
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	e00a      	b.n	8001c06 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	441a      	add	r2, r3
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	440b      	add	r3, r1
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	3301      	adds	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	461a      	mov	r2, r3
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d3eb      	bcc.n	8001bf0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b40      	cmp	r3, #64	; 0x40
 8001c1c:	d105      	bne.n	8001c2a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001c28:	e01e      	b.n	8001c68 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b41      	cmp	r3, #65	; 0x41
 8001c2e:	d105      	bne.n	8001c3c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001c3a:	e015      	b.n	8001c68 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b1f      	cmp	r3, #31
 8001c40:	d808      	bhi.n	8001c54 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2101      	movs	r1, #1
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001c52:	e009      	b.n	8001c68 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e008      	b.n	8001c7e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c72:	f043 0208 	orr.w	r2, r3, #8
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	372c      	adds	r7, #44	; 0x2c
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	08006f08 	.word	0x08006f08

08001c90 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ca2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d002      	beq.n	8001cb0 <HAL_FDCAN_ActivateNotification+0x20>
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d155      	bne.n	8001d5c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d108      	bne.n	8001cd0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cce:	e014      	b.n	8001cfa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d108      	bne.n	8001cf2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0202 	orr.w	r2, r2, #2
 8001cee:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cf0:	e003      	b.n	8001cfa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_FDCAN_ActivateNotification+0xec>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	430b      	orrs	r3, r1
 8001d48:	6553      	str	r3, [r2, #84]	; 0x54
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	0f9b      	lsrs	r3, r3, #30
 8001d52:	490b      	ldr	r1, [pc, #44]	; (8001d80 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e008      	b.n	8001d6e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	3fcfffff 	.word	0x3fcfffff
 8001d80:	4000a800 	.word	0x4000a800

08001d84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d90:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d9a:	4ba7      	ldr	r3, [pc, #668]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	0091      	lsls	r1, r2, #2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	430b      	orrs	r3, r1
 8001da8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	041a      	lsls	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001dda:	4b97      	ldr	r3, [pc, #604]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	0091      	lsls	r1, r2, #2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	430b      	orrs	r3, r1
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001e1c:	4b86      	ldr	r3, [pc, #536]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	0091      	lsls	r1, r2, #2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e36:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	4413      	add	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e64:	4b74      	ldr	r3, [pc, #464]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	0091      	lsls	r1, r2, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e7e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e86:	041a      	lsls	r2, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001eac:	4b62      	ldr	r3, [pc, #392]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	0091      	lsls	r1, r2, #2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ed8:	4b57      	ldr	r3, [pc, #348]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	0091      	lsls	r1, r2, #2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ef2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	0091      	lsls	r1, r2, #2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	430b      	orrs	r3, r1
 8001f28:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f34:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f50:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f58:	061a      	lsls	r2, r3, #24
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009a      	lsls	r2, r3, #2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	441a      	add	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	441a      	add	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	441a      	add	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	441a      	add	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	441a      	add	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	4a04      	ldr	r2, [pc, #16]	; (8002040 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d915      	bls.n	8002060 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002034:	e006      	b.n	8002044 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002036:	bf00      	nop
 8002038:	ffff0003 	.word	0xffff0003
 800203c:	10002b00 	.word	0x10002b00
 8002040:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800204a:	f043 0220 	orr.w	r2, r3, #32
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2203      	movs	r2, #3
 8002058:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e010      	b.n	8002082 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e005      	b.n	8002074 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3304      	adds	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3f3      	bcc.n	8002068 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800209e:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <HAL_GPIO_Init+0x234>)
 80020a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020a2:	e194      	b.n	80023ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8186 	beq.w	80023c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d005      	beq.n	80020d4 <HAL_GPIO_Init+0x44>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d130      	bne.n	8002136 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800210a:	2201      	movs	r2, #1
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 0201 	and.w	r2, r3, #1
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b03      	cmp	r3, #3
 8002140:	d017      	beq.n	8002172 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d123      	bne.n	80021c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	69b9      	ldr	r1, [r7, #24]
 80021c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0203 	and.w	r2, r3, #3
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80e0 	beq.w	80023c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <HAL_GPIO_Init+0x238>)
 800220a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800220e:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <HAL_GPIO_Init+0x238>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_GPIO_Init+0x238>)
 800221a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002226:	4a29      	ldr	r2, [pc, #164]	; (80022cc <HAL_GPIO_Init+0x23c>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_GPIO_Init+0x240>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d052      	beq.n	80022f8 <HAL_GPIO_Init+0x268>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <HAL_GPIO_Init+0x244>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_GPIO_Init+0x22e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <HAL_GPIO_Init+0x248>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02b      	beq.n	80022ba <HAL_GPIO_Init+0x22a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_GPIO_Init+0x24c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d025      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <HAL_GPIO_Init+0x250>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <HAL_GPIO_Init+0x254>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d019      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <HAL_GPIO_Init+0x258>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x21a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <HAL_GPIO_Init+0x25c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x216>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <HAL_GPIO_Init+0x260>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x212>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <HAL_GPIO_Init+0x264>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x20e>
 800229a:	2309      	movs	r3, #9
 800229c:	e02d      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 800229e:	230a      	movs	r3, #10
 80022a0:	e02b      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022a2:	2308      	movs	r3, #8
 80022a4:	e029      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e027      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e025      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e023      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e021      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e01f      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e01d      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022be:	2301      	movs	r3, #1
 80022c0:	e01b      	b.n	80022fa <HAL_GPIO_Init+0x26a>
 80022c2:	bf00      	nop
 80022c4:	58000080 	.word	0x58000080
 80022c8:	58024400 	.word	0x58024400
 80022cc:	58000400 	.word	0x58000400
 80022d0:	58020000 	.word	0x58020000
 80022d4:	58020400 	.word	0x58020400
 80022d8:	58020800 	.word	0x58020800
 80022dc:	58020c00 	.word	0x58020c00
 80022e0:	58021000 	.word	0x58021000
 80022e4:	58021400 	.word	0x58021400
 80022e8:	58021800 	.word	0x58021800
 80022ec:	58021c00 	.word	0x58021c00
 80022f0:	58022000 	.word	0x58022000
 80022f4:	58022400 	.word	0x58022400
 80022f8:	2300      	movs	r3, #0
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	f002 0203 	and.w	r2, r2, #3
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	4093      	lsls	r3, r2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230a:	4938      	ldr	r1, [pc, #224]	; (80023ec <HAL_GPIO_Init+0x35c>)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800233e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800236c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f ae63 	bne.w	80020a4 <HAL_GPIO_Init+0x14>
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3724      	adds	r7, #36	; 0x24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	58000400 	.word	0x58000400

080023f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800240c:	e003      	b.n	8002416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800240e:	887b      	ldrh	r3, [r7, #2]
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002422:	b480      	push	{r7}
 8002424:	b085      	sub	sp, #20
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002434:	887a      	ldrh	r2, [r7, #2]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	041a      	lsls	r2, r3, #16
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43d9      	mvns	r1, r3
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	400b      	ands	r3, r1
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002460:	4a08      	ldr	r2, [pc, #32]	; (8002484 <HAL_HSEM_FastTake+0x2c>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3320      	adds	r3, #32
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_HSEM_FastTake+0x30>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	58026400 	.word	0x58026400
 8002488:	80000300 	.word	0x80000300

0800248c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002496:	4906      	ldr	r1, [pc, #24]	; (80024b0 <HAL_HSEM_Release+0x24>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	58026400 	.word	0x58026400

080024b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_PWREx_ConfigSupply+0xb0>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d00a      	beq.n	80024de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_PWREx_ConfigSupply+0xb0>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e040      	b.n	800255c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e03e      	b.n	800255c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_PWREx_ConfigSupply+0xb0>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80024e6:	491f      	ldr	r1, [pc, #124]	; (8002564 <HAL_PWREx_ConfigSupply+0xb0>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024ee:	f7fe fe95 	bl	800121c <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024f4:	e009      	b.n	800250a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024f6:	f7fe fe91 	bl	800121c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002504:	d901      	bls.n	800250a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e028      	b.n	800255c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_PWREx_ConfigSupply+0xb0>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002516:	d1ee      	bne.n	80024f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b1e      	cmp	r3, #30
 800251c:	d008      	beq.n	8002530 <HAL_PWREx_ConfigSupply+0x7c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b2e      	cmp	r3, #46	; 0x2e
 8002522:	d005      	beq.n	8002530 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b1d      	cmp	r3, #29
 8002528:	d002      	beq.n	8002530 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b2d      	cmp	r3, #45	; 0x2d
 800252e:	d114      	bne.n	800255a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002530:	f7fe fe74 	bl	800121c <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002536:	e009      	b.n	800254c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002538:	f7fe fe70 	bl	800121c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002546:	d901      	bls.n	800254c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e007      	b.n	800255c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_PWREx_ConfigSupply+0xb0>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d1ee      	bne.n	8002538 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	58024800 	.word	0x58024800

08002568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	f000 bc1d 	b.w	8002db6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8087 	beq.w	8002698 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258a:	4b99      	ldr	r3, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002594:	4b96      	ldr	r3, [pc, #600]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	2b10      	cmp	r3, #16
 800259e:	d007      	beq.n	80025b0 <HAL_RCC_OscConfig+0x48>
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	2b18      	cmp	r3, #24
 80025a4:	d110      	bne.n	80025c8 <HAL_RCC_OscConfig+0x60>
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d10b      	bne.n	80025c8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	4b8f      	ldr	r3, [pc, #572]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d06c      	beq.n	8002696 <HAL_RCC_OscConfig+0x12e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d168      	bne.n	8002696 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e3f6      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d0:	d106      	bne.n	80025e0 <HAL_RCC_OscConfig+0x78>
 80025d2:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a86      	ldr	r2, [pc, #536]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e02e      	b.n	800263e <HAL_RCC_OscConfig+0xd6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x9a>
 80025e8:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a80      	ldr	r2, [pc, #512]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b7e      	ldr	r3, [pc, #504]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a7d      	ldr	r2, [pc, #500]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	e01d      	b.n	800263e <HAL_RCC_OscConfig+0xd6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0xbe>
 800260c:	4b78      	ldr	r3, [pc, #480]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a77      	ldr	r2, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a74      	ldr	r2, [pc, #464]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	e00b      	b.n	800263e <HAL_RCC_OscConfig+0xd6>
 8002626:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a71      	ldr	r2, [pc, #452]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d013      	beq.n	800266e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe fde9 	bl	800121c <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264e:	f7fe fde5 	bl	800121c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e3aa      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002660:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0xe6>
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fdd5 	bl	800121c <HAL_GetTick>
 8002672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002676:	f7fe fdd1 	bl	800121c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b64      	cmp	r3, #100	; 0x64
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e396      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x10e>
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80cb 	beq.w	800283c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	4b52      	ldr	r3, [pc, #328]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_RCC_OscConfig+0x164>
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	2b18      	cmp	r3, #24
 80026c0:	d156      	bne.n	8002770 <HAL_RCC_OscConfig+0x208>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d151      	bne.n	8002770 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026cc:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x17c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e368      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e4:	4b42      	ldr	r3, [pc, #264]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 0219 	bic.w	r2, r3, #25
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	493f      	ldr	r1, [pc, #252]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026f6:	f7fe fd91 	bl	800121c <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fd8d 	bl	800121c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e352      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	f7fe fdae 	bl	800127c <HAL_GetREVID>
 8002720:	4603      	mov	r3, r0
 8002722:	f241 0203 	movw	r2, #4099	; 0x1003
 8002726:	4293      	cmp	r3, r2
 8002728:	d817      	bhi.n	800275a <HAL_RCC_OscConfig+0x1f2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d108      	bne.n	8002744 <HAL_RCC_OscConfig+0x1dc>
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800273a:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002742:	e07b      	b.n	800283c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	031b      	lsls	r3, r3, #12
 8002752:	4927      	ldr	r1, [pc, #156]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002758:	e070      	b.n	800283c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	4921      	ldr	r1, [pc, #132]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800276e:	e065      	b.n	800283c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d048      	beq.n	800280a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 0219 	bic.w	r2, r3, #25
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	491a      	ldr	r1, [pc, #104]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe fd47 	bl	800121c <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002792:	f7fe fd43 	bl	800121c <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e308      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	f7fe fd64 	bl	800127c <HAL_GetREVID>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d81a      	bhi.n	80027f4 <HAL_RCC_OscConfig+0x28c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_OscConfig+0x270>
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	6053      	str	r3, [r2, #4]
 80027d6:	e031      	b.n	800283c <HAL_RCC_OscConfig+0x2d4>
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	031b      	lsls	r3, r3, #12
 80027e6:	4902      	ldr	r1, [pc, #8]	; (80027f0 <HAL_RCC_OscConfig+0x288>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
 80027ec:	e026      	b.n	800283c <HAL_RCC_OscConfig+0x2d4>
 80027ee:	bf00      	nop
 80027f0:	58024400 	.word	0x58024400
 80027f4:	4b9a      	ldr	r3, [pc, #616]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	4997      	ldr	r1, [pc, #604]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b95      	ldr	r3, [pc, #596]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a94      	ldr	r2, [pc, #592]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fd01 	bl	800121c <HAL_GetTick>
 800281a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fcfd 	bl	800121c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e2c2      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002830:	4b8b      	ldr	r3, [pc, #556]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a9 	beq.w	800299c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284a:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002852:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002854:	4b82      	ldr	r3, [pc, #520]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d007      	beq.n	8002870 <HAL_RCC_OscConfig+0x308>
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b18      	cmp	r3, #24
 8002864:	d13a      	bne.n	80028dc <HAL_RCC_OscConfig+0x374>
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d135      	bne.n	80028dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002870:	4b7b      	ldr	r3, [pc, #492]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_OscConfig+0x320>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e296      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002888:	f7fe fcf8 	bl	800127c <HAL_GetREVID>
 800288c:	4603      	mov	r3, r0
 800288e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002892:	4293      	cmp	r3, r2
 8002894:	d817      	bhi.n	80028c6 <HAL_RCC_OscConfig+0x35e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	2b20      	cmp	r3, #32
 800289c:	d108      	bne.n	80028b0 <HAL_RCC_OscConfig+0x348>
 800289e:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028a6:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ae:	e075      	b.n	800299c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028b0:	4b6b      	ldr	r3, [pc, #428]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	069b      	lsls	r3, r3, #26
 80028be:	4968      	ldr	r1, [pc, #416]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028c4:	e06a      	b.n	800299c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c6:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	4962      	ldr	r1, [pc, #392]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028da:	e05f      	b.n	800299c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d042      	beq.n	800296a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028e4:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fc94 	bl	800121c <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028f8:	f7fe fc90 	bl	800121c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e255      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800290a:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002916:	f7fe fcb1 	bl	800127c <HAL_GetREVID>
 800291a:	4603      	mov	r3, r0
 800291c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002920:	4293      	cmp	r3, r2
 8002922:	d817      	bhi.n	8002954 <HAL_RCC_OscConfig+0x3ec>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	2b20      	cmp	r3, #32
 800292a:	d108      	bne.n	800293e <HAL_RCC_OscConfig+0x3d6>
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002934:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800293a:	6053      	str	r3, [r2, #4]
 800293c:	e02e      	b.n	800299c <HAL_RCC_OscConfig+0x434>
 800293e:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	069b      	lsls	r3, r3, #26
 800294c:	4944      	ldr	r1, [pc, #272]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
 8002952:	e023      	b.n	800299c <HAL_RCC_OscConfig+0x434>
 8002954:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	493f      	ldr	r1, [pc, #252]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002964:	4313      	orrs	r3, r2
 8002966:	60cb      	str	r3, [r1, #12]
 8002968:	e018      	b.n	800299c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3c      	ldr	r2, [pc, #240]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fc51 	bl	800121c <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800297e:	f7fe fc4d 	bl	800121c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e212      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002990:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d036      	beq.n	8002a16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d019      	beq.n	80029e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b0:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b4:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fc2e 	bl	800121c <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c4:	f7fe fc2a 	bl	800121c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1ef      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029d6:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x45c>
 80029e2:	e018      	b.n	8002a16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fc14 	bl	800121c <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe fc10 	bl	800121c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1d5      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d039      	beq.n	8002a96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fbf1 	bl	800121c <HAL_GetTick>
 8002a3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a3e:	f7fe fbed 	bl	800121c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1b2      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCC_OscConfig+0x4f8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4d6>
 8002a5c:	e01b      	b.n	8002a96 <HAL_RCC_OscConfig+0x52e>
 8002a5e:	bf00      	nop
 8002a60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a64:	4b9b      	ldr	r3, [pc, #620]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a9a      	ldr	r2, [pc, #616]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a70:	f7fe fbd4 	bl	800121c <HAL_GetTick>
 8002a74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a78:	f7fe fbd0 	bl	800121c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e195      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a8a:	4b92      	ldr	r3, [pc, #584]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8081 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	; (8002cd8 <HAL_RCC_OscConfig+0x770>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a8b      	ldr	r2, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x770>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fbb4 	bl	800121c <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ab8:	f7fe fbb0 	bl	800121c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e175      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aca:	4b83      	ldr	r3, [pc, #524]	; (8002cd8 <HAL_RCC_OscConfig+0x770>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d106      	bne.n	8002aec <HAL_RCC_OscConfig+0x584>
 8002ade:	4b7d      	ldr	r3, [pc, #500]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a7c      	ldr	r2, [pc, #496]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aea:	e02d      	b.n	8002b48 <HAL_RCC_OscConfig+0x5e0>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x5a6>
 8002af4:	4b77      	ldr	r3, [pc, #476]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a76      	ldr	r2, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	4b74      	ldr	r3, [pc, #464]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a73      	ldr	r2, [pc, #460]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0c:	e01c      	b.n	8002b48 <HAL_RCC_OscConfig+0x5e0>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c8>
 8002b16:	4b6f      	ldr	r3, [pc, #444]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a6e      	ldr	r2, [pc, #440]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	4a6b      	ldr	r2, [pc, #428]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0x5e0>
 8002b30:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a67      	ldr	r2, [pc, #412]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3c:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	4a64      	ldr	r2, [pc, #400]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fb64 	bl	800121c <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe fb60 	bl	800121c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e123      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b6e:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ee      	beq.n	8002b58 <HAL_RCC_OscConfig+0x5f0>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fb4e 	bl	800121c <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fb4a 	bl	800121c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e10d      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b9a:	4b4e      	ldr	r3, [pc, #312]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8102 	beq.w	8002db4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bb0:	4b48      	ldr	r3, [pc, #288]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bb8:	2b18      	cmp	r3, #24
 8002bba:	f000 80bd 	beq.w	8002d38 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	f040 809e 	bne.w	8002d04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b42      	ldr	r3, [pc, #264]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a41      	ldr	r2, [pc, #260]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fb22 	bl	800121c <HAL_GetTick>
 8002bd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fe fb1e 	bl	800121c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0e3      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bee:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfe:	4b37      	ldr	r3, [pc, #220]	; (8002cdc <HAL_RCC_OscConfig+0x774>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	4931      	ldr	r1, [pc, #196]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	628b      	str	r3, [r1, #40]	; 0x28
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	3b01      	subs	r3, #1
 8002c24:	025b      	lsls	r3, r3, #9
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c44:	4923      	ldr	r1, [pc, #140]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x778>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c62:	00d2      	lsls	r2, r2, #3
 8002c64:	491b      	ldr	r1, [pc, #108]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f023 020c 	bic.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4917      	ldr	r1, [pc, #92]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c7c:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f023 0202 	bic.w	r2, r3, #2
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	4912      	ldr	r1, [pc, #72]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	4a10      	ldr	r2, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe faa7 	bl	800121c <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cd0:	e011      	b.n	8002cf6 <HAL_RCC_OscConfig+0x78e>
 8002cd2:	bf00      	nop
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	58024800 	.word	0x58024800
 8002cdc:	fffffc0c 	.word	0xfffffc0c
 8002ce0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe fa9a 	bl	800121c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e05f      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf6:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <HAL_RCC_OscConfig+0x858>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x77c>
 8002d02:	e057      	b.n	8002db4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_RCC_OscConfig+0x858>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2d      	ldr	r2, [pc, #180]	; (8002dc0 <HAL_RCC_OscConfig+0x858>)
 8002d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fa84 	bl	800121c <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fa80 	bl	800121c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e045      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_RCC_OscConfig+0x858>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x7b0>
 8002d36:	e03d      	b.n	8002db4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_RCC_OscConfig+0x858>)
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCC_OscConfig+0x858>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d031      	beq.n	8002db0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d12a      	bne.n	8002db0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d122      	bne.n	8002db0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d11a      	bne.n	8002db0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	0a5b      	lsrs	r3, r3, #9
 8002d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d111      	bne.n	8002db0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d108      	bne.n	8002db0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	0e1b      	lsrs	r3, r3, #24
 8002da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3730      	adds	r7, #48	; 0x30
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	58024400 	.word	0x58024400

08002dc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e19c      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b8a      	ldr	r3, [pc, #552]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b87      	ldr	r3, [pc, #540]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	4985      	ldr	r1, [pc, #532]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b83      	ldr	r3, [pc, #524]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e184      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	4b7b      	ldr	r3, [pc, #492]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d908      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e24:	4b78      	ldr	r3, [pc, #480]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4975      	ldr	r1, [pc, #468]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	4b70      	ldr	r3, [pc, #448]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e52:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	496a      	ldr	r1, [pc, #424]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	4b64      	ldr	r3, [pc, #400]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d908      	bls.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e80:	4b61      	ldr	r3, [pc, #388]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	495e      	ldr	r1, [pc, #376]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	4b59      	ldr	r3, [pc, #356]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d908      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002eae:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4953      	ldr	r1, [pc, #332]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d908      	bls.n	8002eee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f023 020f 	bic.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4947      	ldr	r1, [pc, #284]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d055      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002efa:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4940      	ldr	r1, [pc, #256]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f14:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d121      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0f6      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0ea      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0de      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f54:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0d6      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f64:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f023 0207 	bic.w	r2, r3, #7
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4925      	ldr	r1, [pc, #148]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f76:	f7fe f951 	bl	800121c <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7e:	f7fe f94d 	bl	800121c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0be      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d1eb      	bne.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d208      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f023 020f 	bic.w	r2, r3, #15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	490e      	ldr	r1, [pc, #56]	; (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d214      	bcs.n	800300c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 020f 	bic.w	r2, r3, #15
 8002fea:	4906      	ldr	r1, [pc, #24]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b04      	ldr	r3, [pc, #16]	; (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e086      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
 8003004:	52002000 	.word	0x52002000
 8003008:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003024:	429a      	cmp	r2, r3
 8003026:	d208      	bcs.n	800303a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003028:	4b3c      	ldr	r3, [pc, #240]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	4939      	ldr	r1, [pc, #228]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003036:	4313      	orrs	r3, r2
 8003038:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003052:	429a      	cmp	r2, r3
 8003054:	d208      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003056:	4b31      	ldr	r3, [pc, #196]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	492e      	ldr	r1, [pc, #184]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003064:	4313      	orrs	r3, r2
 8003066:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003080:	429a      	cmp	r2, r3
 8003082:	d208      	bcs.n	8003096 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	4922      	ldr	r1, [pc, #136]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 8003092:	4313      	orrs	r3, r2
 8003094:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d208      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4917      	ldr	r1, [pc, #92]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030c4:	f000 f834 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	4912      	ldr	r1, [pc, #72]	; (8003120 <HAL_RCC_ClockConfig+0x35c>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_RCC_ClockConfig+0x358>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_RCC_ClockConfig+0x35c>)
 80030ec:	5cd3      	ldrb	r3, [r2, r3]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x360>)
 80030fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_RCC_ClockConfig+0x364>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x368>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe f83e 	bl	8001188 <HAL_InitTick>
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	58024400 	.word	0x58024400
 8003120:	08006ef8 	.word	0x08006ef8
 8003124:	24000004 	.word	0x24000004
 8003128:	24000000 	.word	0x24000000
 800312c:	24000008 	.word	0x24000008

08003130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003136:	4bb3      	ldr	r3, [pc, #716]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313e:	2b18      	cmp	r3, #24
 8003140:	f200 8155 	bhi.w	80033ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003144:	a201      	add	r2, pc, #4	; (adr r2, 800314c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	080031b1 	.word	0x080031b1
 8003150:	080033ef 	.word	0x080033ef
 8003154:	080033ef 	.word	0x080033ef
 8003158:	080033ef 	.word	0x080033ef
 800315c:	080033ef 	.word	0x080033ef
 8003160:	080033ef 	.word	0x080033ef
 8003164:	080033ef 	.word	0x080033ef
 8003168:	080033ef 	.word	0x080033ef
 800316c:	080031d7 	.word	0x080031d7
 8003170:	080033ef 	.word	0x080033ef
 8003174:	080033ef 	.word	0x080033ef
 8003178:	080033ef 	.word	0x080033ef
 800317c:	080033ef 	.word	0x080033ef
 8003180:	080033ef 	.word	0x080033ef
 8003184:	080033ef 	.word	0x080033ef
 8003188:	080033ef 	.word	0x080033ef
 800318c:	080031dd 	.word	0x080031dd
 8003190:	080033ef 	.word	0x080033ef
 8003194:	080033ef 	.word	0x080033ef
 8003198:	080033ef 	.word	0x080033ef
 800319c:	080033ef 	.word	0x080033ef
 80031a0:	080033ef 	.word	0x080033ef
 80031a4:	080033ef 	.word	0x080033ef
 80031a8:	080033ef 	.word	0x080033ef
 80031ac:	080031e3 	.word	0x080031e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b0:	4b94      	ldr	r3, [pc, #592]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031bc:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	4a90      	ldr	r2, [pc, #576]	; (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031ce:	e111      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031d0:	4b8d      	ldr	r3, [pc, #564]	; (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d2:	61bb      	str	r3, [r7, #24]
    break;
 80031d4:	e10e      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031d6:	4b8d      	ldr	r3, [pc, #564]	; (800340c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031d8:	61bb      	str	r3, [r7, #24]
    break;
 80031da:	e10b      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031dc:	4b8c      	ldr	r3, [pc, #560]	; (8003410 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031de:	61bb      	str	r3, [r7, #24]
    break;
 80031e0:	e108      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031ec:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031f8:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003202:	4b80      	ldr	r3, [pc, #512]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80e1 	beq.w	80033e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b02      	cmp	r3, #2
 800322a:	f000 8083 	beq.w	8003334 <HAL_RCC_GetSysClockFreq+0x204>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b02      	cmp	r3, #2
 8003232:	f200 80a1 	bhi.w	8003378 <HAL_RCC_GetSysClockFreq+0x248>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x114>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d056      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003242:	e099      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02d      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003250:	4b6c      	ldr	r3, [pc, #432]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	4a6b      	ldr	r2, [pc, #428]	; (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327a:	4b62      	ldr	r3, [pc, #392]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328a:	ed97 6a02 	vldr	s12, [r7, #8]
 800328e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800329e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80032aa:	e087      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003418 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032be:	4b51      	ldr	r3, [pc, #324]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032ee:	e065      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800341c <HAL_RCC_GetSysClockFreq+0x2ec>
 80032fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003312:	ed97 6a02 	vldr	s12, [r7, #8]
 8003316:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800331a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800331e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003332:	e043      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003420 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003346:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003356:	ed97 6a02 	vldr	s12, [r7, #8]
 800335a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800335e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800336e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003376:	e021      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003382:	eddf 6a26 	vldr	s13, [pc, #152]	; 800341c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339a:	ed97 6a02 	vldr	s12, [r7, #8]
 800339e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	0a5b      	lsrs	r3, r3, #9
 80033c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c6:	3301      	adds	r3, #1
 80033c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e0:	ee17 3a90 	vmov	r3, s15
 80033e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
    break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f0:	61bb      	str	r3, [r7, #24]
    break;
 80033f2:	bf00      	nop
  }

  return sysclockfreq;
 80033f4:	69bb      	ldr	r3, [r7, #24]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	58024400 	.word	0x58024400
 8003408:	03d09000 	.word	0x03d09000
 800340c:	003d0900 	.word	0x003d0900
 8003410:	007a1200 	.word	0x007a1200
 8003414:	46000000 	.word	0x46000000
 8003418:	4c742400 	.word	0x4c742400
 800341c:	4a742400 	.word	0x4a742400
 8003420:	4af42400 	.word	0x4af42400

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800342a:	f7ff fe81 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 800342e:	4602      	mov	r2, r0
 8003430:	4b10      	ldr	r3, [pc, #64]	; (8003474 <HAL_RCC_GetHCLKFreq+0x50>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	490f      	ldr	r1, [pc, #60]	; (8003478 <HAL_RCC_GetHCLKFreq+0x54>)
 800343c:	5ccb      	ldrb	r3, [r1, r3]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_RCC_GetHCLKFreq+0x50>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	4a09      	ldr	r2, [pc, #36]	; (8003478 <HAL_RCC_GetHCLKFreq+0x54>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_RCC_GetHCLKFreq+0x58>)
 8003460:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_RCC_GetHCLKFreq+0x58>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58024400 	.word	0x58024400
 8003478:	08006ef8 	.word	0x08006ef8
 800347c:	24000004 	.word	0x24000004
 8003480:	24000000 	.word	0x24000000

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003488:	f7ff ffcc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4904      	ldr	r1, [pc, #16]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400
 80034ac:	08006ef8 	.word	0x08006ef8

080034b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034b4:	f7ff ffb6 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4904      	ldr	r1, [pc, #16]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	58024400 	.word	0x58024400
 80034d8:	08006ef8 	.word	0x08006ef8

080034dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e8:	2300      	movs	r3, #0
 80034ea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03f      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003500:	d02a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003502:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003506:	d824      	bhi.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800350c:	d018      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800350e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003512:	d81e      	bhi.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d007      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800351e:	e018      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003520:	4ba3      	ldr	r3, [pc, #652]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4aa2      	ldr	r2, [pc, #648]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800352c:	e015      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	2102      	movs	r1, #2
 8003534:	4618      	mov	r0, r3
 8003536:	f001 f9d5 	bl	80048e4 <RCCEx_PLL2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800353e:	e00c      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3324      	adds	r3, #36	; 0x24
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fa7e 	bl	8004a48 <RCCEx_PLL3_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003550:	e003      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
      break;
 8003556:	e000      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003560:	4b93      	ldr	r3, [pc, #588]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800356c:	4990      	ldr	r1, [pc, #576]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	650b      	str	r3, [r1, #80]	; 0x50
 8003572:	e001      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d03d      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	2b04      	cmp	r3, #4
 800358a:	d826      	bhi.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800358c:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003592:	bf00      	nop
 8003594:	080035a9 	.word	0x080035a9
 8003598:	080035b7 	.word	0x080035b7
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	080035e1 	.word	0x080035e1
 80035a4:	080035e1 	.word	0x080035e1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a8:	4b81      	ldr	r3, [pc, #516]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	4a80      	ldr	r2, [pc, #512]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035b4:	e015      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 f991 	bl	80048e4 <RCCEx_PLL2_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035c6:	e00c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3324      	adds	r3, #36	; 0x24
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fa3a 	bl	8004a48 <RCCEx_PLL3_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
      break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e8:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	f023 0207 	bic.w	r2, r3, #7
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	496e      	ldr	r1, [pc, #440]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	650b      	str	r3, [r1, #80]	; 0x50
 80035fa:	e001      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003608:	2b00      	cmp	r3, #0
 800360a:	d042      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003614:	d02b      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361a:	d825      	bhi.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800361c:	2bc0      	cmp	r3, #192	; 0xc0
 800361e:	d028      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003620:	2bc0      	cmp	r3, #192	; 0xc0
 8003622:	d821      	bhi.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d016      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d81d      	bhi.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d007      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003634:	e018      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003636:	4b5e      	ldr	r3, [pc, #376]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	4a5d      	ldr	r2, [pc, #372]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800363c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003640:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003642:	e017      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f001 f94a 	bl	80048e4 <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003654:	e00e      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3324      	adds	r3, #36	; 0x24
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f001 f9f3 	bl	8004a48 <RCCEx_PLL3_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003666:	e005      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	75fb      	strb	r3, [r7, #23]
      break;
 800366c:	e002      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800367a:	4b4d      	ldr	r3, [pc, #308]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800367c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	494a      	ldr	r1, [pc, #296]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003688:	4313      	orrs	r3, r2
 800368a:	650b      	str	r3, [r1, #80]	; 0x50
 800368c:	e001      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	2b00      	cmp	r3, #0
 800369c:	d049      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a8:	d030      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ae:	d82a      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036b4:	d02c      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036ba:	d824      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c0:	d018      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c6:	d81e      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036d0:	d007      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036d2:	e018      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d4:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	4a35      	ldr	r2, [pc, #212]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e0:	e017      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 f8fb 	bl	80048e4 <RCCEx_PLL2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036f2:	e00e      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3324      	adds	r3, #36	; 0x24
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 f9a4 	bl	8004a48 <RCCEx_PLL3_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003704:	e005      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
      break;
 800370a:	e002      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800370c:	bf00      	nop
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003726:	4922      	ldr	r1, [pc, #136]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	658b      	str	r3, [r1, #88]	; 0x58
 800372c:	e001      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04b      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003748:	d030      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800374a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374e:	d82a      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003750:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003754:	d02e      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003756:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800375a:	d824      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800375c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003760:	d018      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003766:	d81e      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800376c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003770:	d007      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003772:	e018      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003780:	e019      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f8ab 	bl	80048e4 <RCCEx_PLL2_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003792:	e010      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3324      	adds	r3, #36	; 0x24
 8003798:	2100      	movs	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f001 f954 	bl	8004a48 <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a4:	e007      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
      break;
 80037aa:	e004      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80037ac:	bf00      	nop
 80037ae:	e002      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037b0:	58024400 	.word	0x58024400
      break;
 80037b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037bc:	4b99      	ldr	r3, [pc, #612]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037ca:	4996      	ldr	r1, [pc, #600]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	658b      	str	r3, [r1, #88]	; 0x58
 80037d0:	e001      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d032      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	2b30      	cmp	r3, #48	; 0x30
 80037e8:	d01c      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80037ea:	2b30      	cmp	r3, #48	; 0x30
 80037ec:	d817      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d00c      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x330>
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d813      	bhi.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d10f      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fe:	4b89      	ldr	r3, [pc, #548]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	4a88      	ldr	r2, [pc, #544]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800380a:	e00e      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	2102      	movs	r1, #2
 8003812:	4618      	mov	r0, r3
 8003814:	f001 f866 	bl	80048e4 <RCCEx_PLL2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800381c:	e005      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
      break;
 8003822:	e002      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003830:	4b7c      	ldr	r3, [pc, #496]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383c:	4979      	ldr	r1, [pc, #484]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800383e:	4313      	orrs	r3, r2
 8003840:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003842:	e001      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d047      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003858:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800385c:	d030      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800385e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003862:	d82a      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003864:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003868:	d02c      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800386a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800386e:	d824      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003874:	d018      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387a:	d81e      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003884:	d007      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003886:	e018      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003888:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	4a65      	ldr	r2, [pc, #404]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800388e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003894:	e017      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f001 f821 	bl	80048e4 <RCCEx_PLL2_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038a6:	e00e      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3324      	adds	r3, #36	; 0x24
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f8ca 	bl	8004a48 <RCCEx_PLL3_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038b8:	e005      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038cc:	4b55      	ldr	r3, [pc, #340]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	4952      	ldr	r1, [pc, #328]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	650b      	str	r3, [r1, #80]	; 0x50
 80038de:	e001      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d049      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f8:	d02e      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038fe:	d828      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003900:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003904:	d02a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800390a:	d822      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800390c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003910:	d026      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003916:	d81c      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800391c:	d010      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800391e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003922:	d816      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01d      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d111      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	2101      	movs	r1, #1
 8003934:	4618      	mov	r0, r3
 8003936:	f000 ffd5 	bl	80048e4 <RCCEx_PLL2_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800393e:	e012      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3324      	adds	r3, #36	; 0x24
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f001 f87e 	bl	8004a48 <RCCEx_PLL3_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003950:	e009      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
      break;
 8003956:	e006      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003958:	bf00      	nop
 800395a:	e004      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800395c:	bf00      	nop
 800395e:	e002      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003978:	492a      	ldr	r1, [pc, #168]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800397a:	4313      	orrs	r3, r2
 800397c:	650b      	str	r3, [r1, #80]	; 0x50
 800397e:	e001      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d04d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399a:	d02e      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800399c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a0:	d828      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d02a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x522>
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d822      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039b2:	d026      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80039b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039b8:	d81c      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039be:	d010      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c4:	d816      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01d      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ce:	d111      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 ff84 	bl	80048e4 <RCCEx_PLL2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039e0:	e012      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3324      	adds	r3, #36	; 0x24
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 f82d 	bl	8004a48 <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039f2:	e009      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e006      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039fa:	bf00      	nop
 80039fc:	e004      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a1c:	4901      	ldr	r1, [pc, #4]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	658b      	str	r3, [r1, #88]	; 0x58
 8003a22:	e003      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02f      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a40:	d00e      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a46:	d814      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a50:	d10f      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a52:	4baf      	ldr	r3, [pc, #700]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4aae      	ldr	r2, [pc, #696]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	2101      	movs	r1, #1
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 ff3c 	bl	80048e4 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a80:	4ba3      	ldr	r3, [pc, #652]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8c:	49a0      	ldr	r1, [pc, #640]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	650b      	str	r3, [r1, #80]	; 0x50
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d032      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d81b      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003aeb 	.word	0x08003aeb
 8003ab8:	08003ac5 	.word	0x08003ac5
 8003abc:	08003ad3 	.word	0x08003ad3
 8003ac0:	08003aeb 	.word	0x08003aeb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac4:	4b92      	ldr	r3, [pc, #584]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	4a91      	ldr	r2, [pc, #580]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ace:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ad0:	e00c      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 ff03 	bl	80048e4 <RCCEx_PLL2_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae8:	e000      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003af2:	4b87      	ldr	r3, [pc, #540]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	4984      	ldr	r1, [pc, #528]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b04:	e001      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8086 	beq.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b18:	4b7e      	ldr	r3, [pc, #504]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a7d      	ldr	r2, [pc, #500]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b24:	f7fd fb7a 	bl	800121c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b2a:	e009      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2c:	f7fd fb76 	bl	800121c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d902      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	75fb      	strb	r3, [r7, #23]
        break;
 8003b3e:	e005      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b40:	4b74      	ldr	r3, [pc, #464]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ef      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d166      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b52:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b5c:	4053      	eors	r3, r2
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d013      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b66:	4b6a      	ldr	r3, [pc, #424]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b70:	4b67      	ldr	r3, [pc, #412]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b74:	4a66      	ldr	r2, [pc, #408]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7c:	4b64      	ldr	r3, [pc, #400]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b86:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b88:	4a61      	ldr	r2, [pc, #388]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b98:	d115      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9a:	f7fd fb3f 	bl	800121c <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ba0:	e00b      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fd fb3b 	bl	800121c <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d902      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	75fb      	strb	r3, [r7, #23]
            break;
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bba:	4b55      	ldr	r3, [pc, #340]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ed      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d126      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bdc:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bea:	0919      	lsrs	r1, r3, #4
 8003bec:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003bee:	400b      	ands	r3, r1
 8003bf0:	4947      	ldr	r1, [pc, #284]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	610b      	str	r3, [r1, #16]
 8003bf6:	e005      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003bf8:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	4a44      	ldr	r2, [pc, #272]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bfe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c02:	6113      	str	r3, [r2, #16]
 8003c04:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c12:	493f      	ldr	r1, [pc, #252]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	670b      	str	r3, [r1, #112]	; 0x70
 8003c18:	e004      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	75bb      	strb	r3, [r7, #22]
 8003c1e:	e001      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8085 	beq.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c36:	2b28      	cmp	r3, #40	; 0x28
 8003c38:	d866      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003d1d 	.word	0x08003d1d
 8003c44:	08003d09 	.word	0x08003d09
 8003c48:	08003d09 	.word	0x08003d09
 8003c4c:	08003d09 	.word	0x08003d09
 8003c50:	08003d09 	.word	0x08003d09
 8003c54:	08003d09 	.word	0x08003d09
 8003c58:	08003d09 	.word	0x08003d09
 8003c5c:	08003d09 	.word	0x08003d09
 8003c60:	08003ce5 	.word	0x08003ce5
 8003c64:	08003d09 	.word	0x08003d09
 8003c68:	08003d09 	.word	0x08003d09
 8003c6c:	08003d09 	.word	0x08003d09
 8003c70:	08003d09 	.word	0x08003d09
 8003c74:	08003d09 	.word	0x08003d09
 8003c78:	08003d09 	.word	0x08003d09
 8003c7c:	08003d09 	.word	0x08003d09
 8003c80:	08003cf7 	.word	0x08003cf7
 8003c84:	08003d09 	.word	0x08003d09
 8003c88:	08003d09 	.word	0x08003d09
 8003c8c:	08003d09 	.word	0x08003d09
 8003c90:	08003d09 	.word	0x08003d09
 8003c94:	08003d09 	.word	0x08003d09
 8003c98:	08003d09 	.word	0x08003d09
 8003c9c:	08003d09 	.word	0x08003d09
 8003ca0:	08003d1d 	.word	0x08003d1d
 8003ca4:	08003d09 	.word	0x08003d09
 8003ca8:	08003d09 	.word	0x08003d09
 8003cac:	08003d09 	.word	0x08003d09
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d09 	.word	0x08003d09
 8003cb8:	08003d09 	.word	0x08003d09
 8003cbc:	08003d09 	.word	0x08003d09
 8003cc0:	08003d1d 	.word	0x08003d1d
 8003cc4:	08003d09 	.word	0x08003d09
 8003cc8:	08003d09 	.word	0x08003d09
 8003ccc:	08003d09 	.word	0x08003d09
 8003cd0:	08003d09 	.word	0x08003d09
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d09 	.word	0x08003d09
 8003cdc:	08003d09 	.word	0x08003d09
 8003ce0:	08003d1d 	.word	0x08003d1d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fdfa 	bl	80048e4 <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cf4:	e013      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3324      	adds	r3, #36	; 0x24
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fea3 	bl	8004a48 <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d06:	e00a      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e007      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
 8003d14:	58024800 	.word	0x58024800
 8003d18:	00ffffcf 	.word	0x00ffffcf
      break;
 8003d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d24:	4b96      	ldr	r3, [pc, #600]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d30:	4993      	ldr	r1, [pc, #588]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	654b      	str	r3, [r1, #84]	; 0x54
 8003d36:	e001      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d038      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d821      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d9b 	.word	0x08003d9b
 8003d5c:	08003d71 	.word	0x08003d71
 8003d60:	08003d83 	.word	0x08003d83
 8003d64:	08003d9b 	.word	0x08003d9b
 8003d68:	08003d9b 	.word	0x08003d9b
 8003d6c:	08003d9b 	.word	0x08003d9b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fdb4 	bl	80048e4 <RCCEx_PLL2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d80:	e00c      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3324      	adds	r3, #36	; 0x24
 8003d86:	2101      	movs	r1, #1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fe5d 	bl	8004a48 <RCCEx_PLL3_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
      break;
 8003d98:	e000      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003da2:	4b77      	ldr	r3, [pc, #476]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	4974      	ldr	r1, [pc, #464]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	654b      	str	r3, [r1, #84]	; 0x54
 8003db4:	e001      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d821      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003dd0:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003e1b 	.word	0x08003e1b
 8003ddc:	08003df1 	.word	0x08003df1
 8003de0:	08003e03 	.word	0x08003e03
 8003de4:	08003e1b 	.word	0x08003e1b
 8003de8:	08003e1b 	.word	0x08003e1b
 8003dec:	08003e1b 	.word	0x08003e1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fd74 	bl	80048e4 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e00:	e00c      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3324      	adds	r3, #36	; 0x24
 8003e06:	2101      	movs	r1, #1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fe1d 	bl	8004a48 <RCCEx_PLL3_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e12:	e003      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	75fb      	strb	r3, [r7, #23]
      break;
 8003e18:	e000      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	f023 0207 	bic.w	r2, r3, #7
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	4953      	ldr	r1, [pc, #332]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	658b      	str	r3, [r1, #88]	; 0x58
 8003e36:	e001      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d04b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e52:	d02e      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e58:	d828      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d02a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d822      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e6a:	d026      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e70:	d81c      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e76:	d010      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7c:	d816      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01d      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e86:	d111      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fd28 	bl	80048e4 <RCCEx_PLL2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e98:	e012      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3324      	adds	r3, #36	; 0x24
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fdd1 	bl	8004a48 <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eaa:	e009      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e004      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed4:	492a      	ldr	r1, [pc, #168]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	654b      	str	r3, [r1, #84]	; 0x54
 8003eda:	e001      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d04d      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ef2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ef6:	d02e      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ef8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003efc:	d828      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	d02a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d822      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f0e:	d026      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f14:	d81c      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1a:	d010      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f20:	d816      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01d      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2a:	d111      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fcd6 	bl	80048e4 <RCCEx_PLL2_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f3c:	e012      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3324      	adds	r3, #36	; 0x24
 8003f42:	2102      	movs	r1, #2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fd7f 	bl	8004a48 <RCCEx_PLL3_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f4e:	e009      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
      break;
 8003f54:	e006      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f56:	bf00      	nop
 8003f58:	e004      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e002      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e000      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f78:	4901      	ldr	r1, [pc, #4]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f7e:	e003      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d04b      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f9e:	d02e      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003fa0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fa4:	d828      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003faa:	d02a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	d822      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fb6:	d026      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fbc:	d81c      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc2:	d010      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc8:	d816      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01d      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd2:	d111      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fc82 	bl	80048e4 <RCCEx_PLL2_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fe4:	e012      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3324      	adds	r3, #36	; 0x24
 8003fea:	2102      	movs	r1, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fd2b 	bl	8004a48 <RCCEx_PLL3_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ff6:	e009      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8003ffc:	e006      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ffe:	bf00      	nop
 8004000:	e004      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004002:	bf00      	nop
 8004004:	e002      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004006:	bf00      	nop
 8004008:	e000      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800400a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004012:	4b9d      	ldr	r3, [pc, #628]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004020:	4999      	ldr	r1, [pc, #612]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004022:	4313      	orrs	r3, r2
 8004024:	658b      	str	r3, [r1, #88]	; 0x58
 8004026:	e001      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004042:	d10a      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3324      	adds	r3, #36	; 0x24
 8004048:	2102      	movs	r1, #2
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fcfc 	bl	8004a48 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800405a:	4b8b      	ldr	r3, [pc, #556]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004068:	4987      	ldr	r1, [pc, #540]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800406a:	4313      	orrs	r3, r2
 800406c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004084:	d10a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3324      	adds	r3, #36	; 0x24
 800408a:	2102      	movs	r1, #2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fcdb 	bl	8004a48 <RCCEx_PLL3_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800409c:	4b7a      	ldr	r3, [pc, #488]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	4977      	ldr	r1, [pc, #476]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d034      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c6:	d01d      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040cc:	d817      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d6:	d009      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80040d8:	e011      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3304      	adds	r3, #4
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fbff 	bl	80048e4 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040ea:	e00c      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3324      	adds	r3, #36	; 0x24
 80040f0:	2102      	movs	r1, #2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fca8 	bl	8004a48 <RCCEx_PLL3_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040fc:	e003      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
      break;
 8004102:	e000      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004106:	7dfb      	ldrb	r3, [r7, #23]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800410c:	4b5e      	ldr	r3, [pc, #376]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800411a:	495b      	ldr	r1, [pc, #364]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800411c:	4313      	orrs	r3, r2
 800411e:	658b      	str	r3, [r1, #88]	; 0x58
 8004120:	e001      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d033      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004138:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800413c:	d01c      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800413e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004142:	d816      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004148:	d003      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800414a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800414e:	d007      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004150:	e00f      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004152:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	4a4c      	ldr	r2, [pc, #304]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800415e:	e00c      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3324      	adds	r3, #36	; 0x24
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fc6e 	bl	8004a48 <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
      break;
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417a:	7dfb      	ldrb	r3, [r7, #23]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004180:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418e:	493e      	ldr	r1, [pc, #248]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004190:	4313      	orrs	r3, r2
 8004192:	654b      	str	r3, [r1, #84]	; 0x54
 8004194:	e001      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d029      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80041ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b2:	d007      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80041b4:	e00f      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b6:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4a33      	ldr	r2, [pc, #204]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041c2:	e00b      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2102      	movs	r1, #2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fb8a 	bl	80048e4 <RCCEx_PLL2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
      break;
 80041da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041e2:	4b29      	ldr	r3, [pc, #164]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	4926      	ldr	r1, [pc, #152]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041f4:	e001      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3324      	adds	r3, #36	; 0x24
 800420a:	2102      	movs	r1, #2
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fc1b 	bl	8004a48 <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d033      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004230:	d017      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004236:	d811      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d013      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800423e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004242:	d80b      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424c:	d106      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	4a0d      	ldr	r2, [pc, #52]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004258:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800425a:	e007      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
      break;
 8004260:	e004      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800426a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10c      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427e:	4902      	ldr	r1, [pc, #8]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004280:	4313      	orrs	r3, r2
 8004282:	654b      	str	r3, [r1, #84]	; 0x54
 8004284:	e004      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004286:	bf00      	nop
 8004288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800429c:	4b31      	ldr	r3, [pc, #196]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	492e      	ldr	r1, [pc, #184]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042c8:	4926      	ldr	r1, [pc, #152]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e6:	491f      	ldr	r1, [pc, #124]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042f8:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004302:	6113      	str	r3, [r2, #16]
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800430e:	4915      	ldr	r1, [pc, #84]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004310:	4313      	orrs	r3, r2
 8004312:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da08      	bge.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	490e      	ldr	r1, [pc, #56]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800432a:	4313      	orrs	r3, r2
 800432c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	4906      	ldr	r1, [pc, #24]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800434a:	4313      	orrs	r3, r2
 800434c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800434e:	7dbb      	ldrb	r3, [r7, #22]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	e000      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400

08004368 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800436c:	f7ff f85a 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	58024400 	.word	0x58024400
 8004390:	08006ef8 	.word	0x08006ef8

08004394 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800439c:	4ba1      	ldr	r3, [pc, #644]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80043a6:	4b9f      	ldr	r3, [pc, #636]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	0b1b      	lsrs	r3, r3, #12
 80043ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043b2:	4b9c      	ldr	r3, [pc, #624]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043be:	4b99      	ldr	r3, [pc, #612]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	08db      	lsrs	r3, r3, #3
 80043c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8111 	beq.w	8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	f000 8083 	beq.w	80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	f200 80a1 	bhi.w	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d056      	beq.n	80044ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043fe:	e099      	b.n	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004400:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02d      	beq.n	8004468 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800440c:	4b85      	ldr	r3, [pc, #532]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	4a84      	ldr	r2, [pc, #528]	; (8004628 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004436:	4b7b      	ldr	r3, [pc, #492]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004446:	ed97 6a03 	vldr	s12, [r7, #12]
 800444a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800444e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800445a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004462:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004466:	e087      	b.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447a:	4b6a      	ldr	r3, [pc, #424]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448a:	ed97 6a03 	vldr	s12, [r7, #12]
 800448e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044aa:	e065      	b.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044be:	4b59      	ldr	r3, [pc, #356]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80044d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044ee:	e043      	b.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004502:	4b48      	ldr	r3, [pc, #288]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004512:	ed97 6a03 	vldr	s12, [r7, #12]
 8004516:	eddf 5a45 	vldr	s11, [pc, #276]	; 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800451a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004532:	e021      	b.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004634 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b37      	ldr	r3, [pc, #220]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a03 	vldr	s12, [r7, #12]
 800455a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800462c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004576:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004578:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	0a5b      	lsrs	r3, r3, #9
 800457e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800458e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004592:	edd7 6a07 	vldr	s13, [r7, #28]
 8004596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459e:	ee17 2a90 	vmov	r2, s15
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80045a6:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	0c1b      	lsrs	r3, r3, #16
 80045ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045cc:	ee17 2a90 	vmov	r2, s15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045d4:	4b13      	ldr	r3, [pc, #76]	; (8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	0e1b      	lsrs	r3, r3, #24
 80045da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fa:	ee17 2a90 	vmov	r2, s15
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004602:	e008      	b.n	8004616 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
}
 8004616:	bf00      	nop
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	58024400 	.word	0x58024400
 8004628:	03d09000 	.word	0x03d09000
 800462c:	46000000 	.word	0x46000000
 8004630:	4c742400 	.word	0x4c742400
 8004634:	4a742400 	.word	0x4a742400
 8004638:	4af42400 	.word	0x4af42400

0800463c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004644:	4ba1      	ldr	r3, [pc, #644]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800464e:	4b9f      	ldr	r3, [pc, #636]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	0d1b      	lsrs	r3, r3, #20
 8004654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004658:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800465a:	4b9c      	ldr	r3, [pc, #624]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004666:	4b99      	ldr	r3, [pc, #612]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	08db      	lsrs	r3, r3, #3
 800466c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8111 	beq.w	80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b02      	cmp	r3, #2
 800468e:	f000 8083 	beq.w	8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b02      	cmp	r3, #2
 8004696:	f200 80a1 	bhi.w	80047dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d056      	beq.n	8004754 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046a6:	e099      	b.n	80047dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a8:	4b88      	ldr	r3, [pc, #544]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02d      	beq.n	8004710 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046b4:	4b85      	ldr	r3, [pc, #532]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	08db      	lsrs	r3, r3, #3
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	4a84      	ldr	r2, [pc, #528]	; (80048d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
 80046c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	ee07 3a90 	vmov	s15, r3
 80046cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046de:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80046f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800470e:	e087      	b.n	8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800471e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004722:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004732:	ed97 6a03 	vldr	s12, [r7, #12]
 8004736:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800473a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004752:	e065      	b.n	8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004766:	4b59      	ldr	r3, [pc, #356]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004776:	ed97 6a03 	vldr	s12, [r7, #12]
 800477a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800477e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800478a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004796:	e043      	b.n	8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047aa:	4b48      	ldr	r3, [pc, #288]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80047be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047da:	e021      	b.n	8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ee:	4b37      	ldr	r3, [pc, #220]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004802:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800481e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004820:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	0a5b      	lsrs	r3, r3, #9
 8004826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483a:	edd7 6a07 	vldr	s13, [r7, #28]
 800483e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004846:	ee17 2a90 	vmov	r2, s15
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800484e:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004860:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004868:	edd7 6a07 	vldr	s13, [r7, #28]
 800486c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004874:	ee17 2a90 	vmov	r2, s15
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	0e1b      	lsrs	r3, r3, #24
 8004882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004896:	edd7 6a07 	vldr	s13, [r7, #28]
 800489a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800489e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a2:	ee17 2a90 	vmov	r2, s15
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048aa:	e008      	b.n	80048be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	609a      	str	r2, [r3, #8]
}
 80048be:	bf00      	nop
 80048c0:	3724      	adds	r7, #36	; 0x24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	58024400 	.word	0x58024400
 80048d0:	03d09000 	.word	0x03d09000
 80048d4:	46000000 	.word	0x46000000
 80048d8:	4c742400 	.word	0x4c742400
 80048dc:	4a742400 	.word	0x4a742400
 80048e0:	4af42400 	.word	0x4af42400

080048e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048f2:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d101      	bne.n	8004902 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e099      	b.n	8004a36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004902:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a4e      	ldr	r2, [pc, #312]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004908:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800490c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490e:	f7fc fc85 	bl	800121c <HAL_GetTick>
 8004912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004914:	e008      	b.n	8004928 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004916:	f7fc fc81 	bl	800121c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e086      	b.n	8004a36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004934:	4b42      	ldr	r3, [pc, #264]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	031b      	lsls	r3, r3, #12
 8004942:	493f      	ldr	r1, [pc, #252]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004944:	4313      	orrs	r3, r2
 8004946:	628b      	str	r3, [r1, #40]	; 0x28
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	3b01      	subs	r3, #1
 800494e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	3b01      	subs	r3, #1
 8004958:	025b      	lsls	r3, r3, #9
 800495a:	b29b      	uxth	r3, r3
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	3b01      	subs	r3, #1
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	3b01      	subs	r3, #1
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004978:	4931      	ldr	r1, [pc, #196]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800497e:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	492d      	ldr	r1, [pc, #180]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 800498c:	4313      	orrs	r3, r2
 800498e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004990:	4b2b      	ldr	r3, [pc, #172]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f023 0220 	bic.w	r2, r3, #32
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	4928      	ldr	r1, [pc, #160]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049a2:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b2:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <RCCEx_PLL2_Config+0x160>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	69d2      	ldr	r2, [r2, #28]
 80049ba:	00d2      	lsls	r2, r2, #3
 80049bc:	4920      	ldr	r1, [pc, #128]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	f043 0310 	orr.w	r3, r3, #16
 80049cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049d4:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049e0:	e00f      	b.n	8004a02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d106      	bne.n	80049f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049e8:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049f4:	e005      	b.n	8004a02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 80049fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a02:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a0e      	ldr	r2, [pc, #56]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004a08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0e:	f7fc fc05 	bl	800121c <HAL_GetTick>
 8004a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a14:	e008      	b.n	8004a28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a16:	f7fc fc01 	bl	800121c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e006      	b.n	8004a36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <RCCEx_PLL2_Config+0x15c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400
 8004a44:	ffff0007 	.word	0xffff0007

08004a48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a56:	4b53      	ldr	r3, [pc, #332]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d101      	bne.n	8004a66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e099      	b.n	8004b9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a66:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a72:	f7fc fbd3 	bl	800121c <HAL_GetTick>
 8004a76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a78:	e008      	b.n	8004a8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a7a:	f7fc fbcf 	bl	800121c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e086      	b.n	8004b9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a8c:	4b45      	ldr	r3, [pc, #276]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	051b      	lsls	r3, r3, #20
 8004aa6:	493f      	ldr	r1, [pc, #252]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	628b      	str	r3, [r1, #40]	; 0x28
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	025b      	lsls	r3, r3, #9
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004adc:	4931      	ldr	r1, [pc, #196]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ae2:	4b30      	ldr	r3, [pc, #192]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	492d      	ldr	r1, [pc, #180]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004af4:	4b2b      	ldr	r3, [pc, #172]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	4928      	ldr	r1, [pc, #160]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b06:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	4a26      	ldr	r2, [pc, #152]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b12:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b16:	4b24      	ldr	r3, [pc, #144]	; (8004ba8 <RCCEx_PLL3_Config+0x160>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	69d2      	ldr	r2, [r2, #28]
 8004b1e:	00d2      	lsls	r2, r2, #3
 8004b20:	4920      	ldr	r1, [pc, #128]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b26:	4b1f      	ldr	r3, [pc, #124]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b38:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b44:	e00f      	b.n	8004b66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d106      	bne.n	8004b5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b4c:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b58:	e005      	b.n	8004b66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	4a11      	ldr	r2, [pc, #68]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b66:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b72:	f7fc fb53 	bl	800121c <HAL_GetTick>
 8004b76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b7a:	f7fc fb4f 	bl	800121c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e006      	b.n	8004b9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <RCCEx_PLL3_Config+0x15c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
 8004ba8:	ffff0007 	.word	0xffff0007

08004bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e042      	b.n	8004c44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7fc f93f 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2224      	movs	r2, #36	; 0x24
 8004bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8c2 	bl	8004d78 <UART_SetConfig>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e022      	b.n	8004c44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fe1e 	bl	8005848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fea5 	bl	800598c <UART_CheckIdleState>
 8004c42:	4603      	mov	r3, r0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	603b      	str	r3, [r7, #0]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	f040 8083 	bne.w	8004d6e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Transmit+0x28>
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e07b      	b.n	8004d70 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Transmit+0x3a>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e074      	b.n	8004d70 <HAL_UART_Transmit+0x124>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2221      	movs	r2, #33	; 0x21
 8004c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fabd 	bl	800121c <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbc:	d108      	bne.n	8004cd0 <HAL_UART_Transmit+0x84>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	e003      	b.n	8004cd8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004ce0:	e02c      	b.n	8004d3c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fe98 	bl	8005a22 <UART_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e039      	b.n	8004d70 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	3302      	adds	r3, #2
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	e007      	b.n	8004d2a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	3301      	adds	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1cc      	bne.n	8004ce2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2140      	movs	r1, #64	; 0x40
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fe65 	bl	8005a22 <UART_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e006      	b.n	8004d70 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e000      	b.n	8004d70 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d7c:	b092      	sub	sp, #72	; 0x48
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4bbe      	ldr	r3, [pc, #760]	; (80050a0 <UART_SetConfig+0x328>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4ab3      	ldr	r2, [pc, #716]	; (80050a4 <UART_SetConfig+0x32c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de0:	4313      	orrs	r3, r2
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	4baf      	ldr	r3, [pc, #700]	; (80050a8 <UART_SetConfig+0x330>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f023 010f 	bic.w	r1, r3, #15
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4aa6      	ldr	r2, [pc, #664]	; (80050ac <UART_SetConfig+0x334>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d177      	bne.n	8004f08 <UART_SetConfig+0x190>
 8004e18:	4ba5      	ldr	r3, [pc, #660]	; (80050b0 <UART_SetConfig+0x338>)
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e20:	2b28      	cmp	r3, #40	; 0x28
 8004e22:	d86d      	bhi.n	8004f00 <UART_SetConfig+0x188>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <UART_SetConfig+0xb4>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004ed1 	.word	0x08004ed1
 8004e30:	08004f01 	.word	0x08004f01
 8004e34:	08004f01 	.word	0x08004f01
 8004e38:	08004f01 	.word	0x08004f01
 8004e3c:	08004f01 	.word	0x08004f01
 8004e40:	08004f01 	.word	0x08004f01
 8004e44:	08004f01 	.word	0x08004f01
 8004e48:	08004f01 	.word	0x08004f01
 8004e4c:	08004ed9 	.word	0x08004ed9
 8004e50:	08004f01 	.word	0x08004f01
 8004e54:	08004f01 	.word	0x08004f01
 8004e58:	08004f01 	.word	0x08004f01
 8004e5c:	08004f01 	.word	0x08004f01
 8004e60:	08004f01 	.word	0x08004f01
 8004e64:	08004f01 	.word	0x08004f01
 8004e68:	08004f01 	.word	0x08004f01
 8004e6c:	08004ee1 	.word	0x08004ee1
 8004e70:	08004f01 	.word	0x08004f01
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f01 	.word	0x08004f01
 8004e7c:	08004f01 	.word	0x08004f01
 8004e80:	08004f01 	.word	0x08004f01
 8004e84:	08004f01 	.word	0x08004f01
 8004e88:	08004f01 	.word	0x08004f01
 8004e8c:	08004ee9 	.word	0x08004ee9
 8004e90:	08004f01 	.word	0x08004f01
 8004e94:	08004f01 	.word	0x08004f01
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004f01 	.word	0x08004f01
 8004ea0:	08004f01 	.word	0x08004f01
 8004ea4:	08004f01 	.word	0x08004f01
 8004ea8:	08004f01 	.word	0x08004f01
 8004eac:	08004ef1 	.word	0x08004ef1
 8004eb0:	08004f01 	.word	0x08004f01
 8004eb4:	08004f01 	.word	0x08004f01
 8004eb8:	08004f01 	.word	0x08004f01
 8004ebc:	08004f01 	.word	0x08004f01
 8004ec0:	08004f01 	.word	0x08004f01
 8004ec4:	08004f01 	.word	0x08004f01
 8004ec8:	08004f01 	.word	0x08004f01
 8004ecc:	08004ef9 	.word	0x08004ef9
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed6:	e222      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e21e      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e21a      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eee:	e216      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef6:	e212      	b.n	800531e <UART_SetConfig+0x5a6>
 8004ef8:	2340      	movs	r3, #64	; 0x40
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efe:	e20e      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f06:	e20a      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a69      	ldr	r2, [pc, #420]	; (80050b4 <UART_SetConfig+0x33c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d130      	bne.n	8004f74 <UART_SetConfig+0x1fc>
 8004f12:	4b67      	ldr	r3, [pc, #412]	; (80050b0 <UART_SetConfig+0x338>)
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d826      	bhi.n	8004f6c <UART_SetConfig+0x1f4>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0x1ac>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f3d 	.word	0x08004f3d
 8004f28:	08004f45 	.word	0x08004f45
 8004f2c:	08004f4d 	.word	0x08004f4d
 8004f30:	08004f55 	.word	0x08004f55
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f65 	.word	0x08004f65
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f42:	e1ec      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4a:	e1e8      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f52:	e1e4      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e1e0      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f5c:	2320      	movs	r3, #32
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e1dc      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f64:	2340      	movs	r3, #64	; 0x40
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e1d8      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e1d4      	b.n	800531e <UART_SetConfig+0x5a6>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a4f      	ldr	r2, [pc, #316]	; (80050b8 <UART_SetConfig+0x340>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d130      	bne.n	8004fe0 <UART_SetConfig+0x268>
 8004f7e:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <UART_SetConfig+0x338>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d826      	bhi.n	8004fd8 <UART_SetConfig+0x260>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x218>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fa9 	.word	0x08004fa9
 8004f94:	08004fb1 	.word	0x08004fb1
 8004f98:	08004fb9 	.word	0x08004fb9
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e1b6      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb6:	e1b2      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fbe:	e1ae      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e1aa      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fc8:	2320      	movs	r3, #32
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e1a6      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fd0:	2340      	movs	r3, #64	; 0x40
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd6:	e1a2      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e19e      	b.n	800531e <UART_SetConfig+0x5a6>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a35      	ldr	r2, [pc, #212]	; (80050bc <UART_SetConfig+0x344>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d130      	bne.n	800504c <UART_SetConfig+0x2d4>
 8004fea:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <UART_SetConfig+0x338>)
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d826      	bhi.n	8005044 <UART_SetConfig+0x2cc>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0x284>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005015 	.word	0x08005015
 8005000:	0800501d 	.word	0x0800501d
 8005004:	08005025 	.word	0x08005025
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005035 	.word	0x08005035
 8005010:	0800503d 	.word	0x0800503d
 8005014:	2300      	movs	r3, #0
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e180      	b.n	800531e <UART_SetConfig+0x5a6>
 800501c:	2304      	movs	r3, #4
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e17c      	b.n	800531e <UART_SetConfig+0x5a6>
 8005024:	2308      	movs	r3, #8
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e178      	b.n	800531e <UART_SetConfig+0x5a6>
 800502c:	2310      	movs	r3, #16
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e174      	b.n	800531e <UART_SetConfig+0x5a6>
 8005034:	2320      	movs	r3, #32
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e170      	b.n	800531e <UART_SetConfig+0x5a6>
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005042:	e16c      	b.n	800531e <UART_SetConfig+0x5a6>
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e168      	b.n	800531e <UART_SetConfig+0x5a6>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <UART_SetConfig+0x348>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d142      	bne.n	80050dc <UART_SetConfig+0x364>
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <UART_SetConfig+0x338>)
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	2b05      	cmp	r3, #5
 8005060:	d838      	bhi.n	80050d4 <UART_SetConfig+0x35c>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <UART_SetConfig+0x2f0>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	08005081 	.word	0x08005081
 800506c:	08005089 	.word	0x08005089
 8005070:	08005091 	.word	0x08005091
 8005074:	08005099 	.word	0x08005099
 8005078:	080050c5 	.word	0x080050c5
 800507c:	080050cd 	.word	0x080050cd
 8005080:	2300      	movs	r3, #0
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e14a      	b.n	800531e <UART_SetConfig+0x5a6>
 8005088:	2304      	movs	r3, #4
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e146      	b.n	800531e <UART_SetConfig+0x5a6>
 8005090:	2308      	movs	r3, #8
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e142      	b.n	800531e <UART_SetConfig+0x5a6>
 8005098:	2310      	movs	r3, #16
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e13e      	b.n	800531e <UART_SetConfig+0x5a6>
 80050a0:	cfff69f3 	.word	0xcfff69f3
 80050a4:	58000c00 	.word	0x58000c00
 80050a8:	11fff4ff 	.word	0x11fff4ff
 80050ac:	40011000 	.word	0x40011000
 80050b0:	58024400 	.word	0x58024400
 80050b4:	40004400 	.word	0x40004400
 80050b8:	40004800 	.word	0x40004800
 80050bc:	40004c00 	.word	0x40004c00
 80050c0:	40005000 	.word	0x40005000
 80050c4:	2320      	movs	r3, #32
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ca:	e128      	b.n	800531e <UART_SetConfig+0x5a6>
 80050cc:	2340      	movs	r3, #64	; 0x40
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d2:	e124      	b.n	800531e <UART_SetConfig+0x5a6>
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e120      	b.n	800531e <UART_SetConfig+0x5a6>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4acb      	ldr	r2, [pc, #812]	; (8005410 <UART_SetConfig+0x698>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d176      	bne.n	80051d4 <UART_SetConfig+0x45c>
 80050e6:	4bcb      	ldr	r3, [pc, #812]	; (8005414 <UART_SetConfig+0x69c>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ee:	2b28      	cmp	r3, #40	; 0x28
 80050f0:	d86c      	bhi.n	80051cc <UART_SetConfig+0x454>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x380>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	0800519d 	.word	0x0800519d
 80050fc:	080051cd 	.word	0x080051cd
 8005100:	080051cd 	.word	0x080051cd
 8005104:	080051cd 	.word	0x080051cd
 8005108:	080051cd 	.word	0x080051cd
 800510c:	080051cd 	.word	0x080051cd
 8005110:	080051cd 	.word	0x080051cd
 8005114:	080051cd 	.word	0x080051cd
 8005118:	080051a5 	.word	0x080051a5
 800511c:	080051cd 	.word	0x080051cd
 8005120:	080051cd 	.word	0x080051cd
 8005124:	080051cd 	.word	0x080051cd
 8005128:	080051cd 	.word	0x080051cd
 800512c:	080051cd 	.word	0x080051cd
 8005130:	080051cd 	.word	0x080051cd
 8005134:	080051cd 	.word	0x080051cd
 8005138:	080051ad 	.word	0x080051ad
 800513c:	080051cd 	.word	0x080051cd
 8005140:	080051cd 	.word	0x080051cd
 8005144:	080051cd 	.word	0x080051cd
 8005148:	080051cd 	.word	0x080051cd
 800514c:	080051cd 	.word	0x080051cd
 8005150:	080051cd 	.word	0x080051cd
 8005154:	080051cd 	.word	0x080051cd
 8005158:	080051b5 	.word	0x080051b5
 800515c:	080051cd 	.word	0x080051cd
 8005160:	080051cd 	.word	0x080051cd
 8005164:	080051cd 	.word	0x080051cd
 8005168:	080051cd 	.word	0x080051cd
 800516c:	080051cd 	.word	0x080051cd
 8005170:	080051cd 	.word	0x080051cd
 8005174:	080051cd 	.word	0x080051cd
 8005178:	080051bd 	.word	0x080051bd
 800517c:	080051cd 	.word	0x080051cd
 8005180:	080051cd 	.word	0x080051cd
 8005184:	080051cd 	.word	0x080051cd
 8005188:	080051cd 	.word	0x080051cd
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051cd 	.word	0x080051cd
 8005194:	080051cd 	.word	0x080051cd
 8005198:	080051c5 	.word	0x080051c5
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a2:	e0bc      	b.n	800531e <UART_SetConfig+0x5a6>
 80051a4:	2304      	movs	r3, #4
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051aa:	e0b8      	b.n	800531e <UART_SetConfig+0x5a6>
 80051ac:	2308      	movs	r3, #8
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b2:	e0b4      	b.n	800531e <UART_SetConfig+0x5a6>
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ba:	e0b0      	b.n	800531e <UART_SetConfig+0x5a6>
 80051bc:	2320      	movs	r3, #32
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e0ac      	b.n	800531e <UART_SetConfig+0x5a6>
 80051c4:	2340      	movs	r3, #64	; 0x40
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e0a8      	b.n	800531e <UART_SetConfig+0x5a6>
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e0a4      	b.n	800531e <UART_SetConfig+0x5a6>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a8f      	ldr	r2, [pc, #572]	; (8005418 <UART_SetConfig+0x6a0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d130      	bne.n	8005240 <UART_SetConfig+0x4c8>
 80051de:	4b8d      	ldr	r3, [pc, #564]	; (8005414 <UART_SetConfig+0x69c>)
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d826      	bhi.n	8005238 <UART_SetConfig+0x4c0>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x478>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005209 	.word	0x08005209
 80051f4:	08005211 	.word	0x08005211
 80051f8:	08005219 	.word	0x08005219
 80051fc:	08005221 	.word	0x08005221
 8005200:	08005229 	.word	0x08005229
 8005204:	08005231 	.word	0x08005231
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520e:	e086      	b.n	800531e <UART_SetConfig+0x5a6>
 8005210:	2304      	movs	r3, #4
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005216:	e082      	b.n	800531e <UART_SetConfig+0x5a6>
 8005218:	2308      	movs	r3, #8
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521e:	e07e      	b.n	800531e <UART_SetConfig+0x5a6>
 8005220:	2310      	movs	r3, #16
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005226:	e07a      	b.n	800531e <UART_SetConfig+0x5a6>
 8005228:	2320      	movs	r3, #32
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e076      	b.n	800531e <UART_SetConfig+0x5a6>
 8005230:	2340      	movs	r3, #64	; 0x40
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e072      	b.n	800531e <UART_SetConfig+0x5a6>
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e06e      	b.n	800531e <UART_SetConfig+0x5a6>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a75      	ldr	r2, [pc, #468]	; (800541c <UART_SetConfig+0x6a4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d130      	bne.n	80052ac <UART_SetConfig+0x534>
 800524a:	4b72      	ldr	r3, [pc, #456]	; (8005414 <UART_SetConfig+0x69c>)
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	2b05      	cmp	r3, #5
 8005254:	d826      	bhi.n	80052a4 <UART_SetConfig+0x52c>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x4e4>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005275 	.word	0x08005275
 8005260:	0800527d 	.word	0x0800527d
 8005264:	08005285 	.word	0x08005285
 8005268:	0800528d 	.word	0x0800528d
 800526c:	08005295 	.word	0x08005295
 8005270:	0800529d 	.word	0x0800529d
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527a:	e050      	b.n	800531e <UART_SetConfig+0x5a6>
 800527c:	2304      	movs	r3, #4
 800527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005282:	e04c      	b.n	800531e <UART_SetConfig+0x5a6>
 8005284:	2308      	movs	r3, #8
 8005286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528a:	e048      	b.n	800531e <UART_SetConfig+0x5a6>
 800528c:	2310      	movs	r3, #16
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e044      	b.n	800531e <UART_SetConfig+0x5a6>
 8005294:	2320      	movs	r3, #32
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e040      	b.n	800531e <UART_SetConfig+0x5a6>
 800529c:	2340      	movs	r3, #64	; 0x40
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e03c      	b.n	800531e <UART_SetConfig+0x5a6>
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e038      	b.n	800531e <UART_SetConfig+0x5a6>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a5b      	ldr	r2, [pc, #364]	; (8005420 <UART_SetConfig+0x6a8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d130      	bne.n	8005318 <UART_SetConfig+0x5a0>
 80052b6:	4b57      	ldr	r3, [pc, #348]	; (8005414 <UART_SetConfig+0x69c>)
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d826      	bhi.n	8005310 <UART_SetConfig+0x598>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <UART_SetConfig+0x550>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052e1 	.word	0x080052e1
 80052cc:	080052e9 	.word	0x080052e9
 80052d0:	080052f1 	.word	0x080052f1
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005309 	.word	0x08005309
 80052e0:	2302      	movs	r3, #2
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e01a      	b.n	800531e <UART_SetConfig+0x5a6>
 80052e8:	2304      	movs	r3, #4
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e016      	b.n	800531e <UART_SetConfig+0x5a6>
 80052f0:	2308      	movs	r3, #8
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e012      	b.n	800531e <UART_SetConfig+0x5a6>
 80052f8:	2310      	movs	r3, #16
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e00e      	b.n	800531e <UART_SetConfig+0x5a6>
 8005300:	2320      	movs	r3, #32
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e00a      	b.n	800531e <UART_SetConfig+0x5a6>
 8005308:	2340      	movs	r3, #64	; 0x40
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e006      	b.n	800531e <UART_SetConfig+0x5a6>
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e002      	b.n	800531e <UART_SetConfig+0x5a6>
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3f      	ldr	r2, [pc, #252]	; (8005420 <UART_SetConfig+0x6a8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	f040 80f8 	bne.w	800551a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800532a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800532e:	2b20      	cmp	r3, #32
 8005330:	dc46      	bgt.n	80053c0 <UART_SetConfig+0x648>
 8005332:	2b02      	cmp	r3, #2
 8005334:	f2c0 8082 	blt.w	800543c <UART_SetConfig+0x6c4>
 8005338:	3b02      	subs	r3, #2
 800533a:	2b1e      	cmp	r3, #30
 800533c:	d87e      	bhi.n	800543c <UART_SetConfig+0x6c4>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x5cc>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	080053c7 	.word	0x080053c7
 8005348:	0800543d 	.word	0x0800543d
 800534c:	080053cf 	.word	0x080053cf
 8005350:	0800543d 	.word	0x0800543d
 8005354:	0800543d 	.word	0x0800543d
 8005358:	0800543d 	.word	0x0800543d
 800535c:	080053df 	.word	0x080053df
 8005360:	0800543d 	.word	0x0800543d
 8005364:	0800543d 	.word	0x0800543d
 8005368:	0800543d 	.word	0x0800543d
 800536c:	0800543d 	.word	0x0800543d
 8005370:	0800543d 	.word	0x0800543d
 8005374:	0800543d 	.word	0x0800543d
 8005378:	0800543d 	.word	0x0800543d
 800537c:	080053ef 	.word	0x080053ef
 8005380:	0800543d 	.word	0x0800543d
 8005384:	0800543d 	.word	0x0800543d
 8005388:	0800543d 	.word	0x0800543d
 800538c:	0800543d 	.word	0x0800543d
 8005390:	0800543d 	.word	0x0800543d
 8005394:	0800543d 	.word	0x0800543d
 8005398:	0800543d 	.word	0x0800543d
 800539c:	0800543d 	.word	0x0800543d
 80053a0:	0800543d 	.word	0x0800543d
 80053a4:	0800543d 	.word	0x0800543d
 80053a8:	0800543d 	.word	0x0800543d
 80053ac:	0800543d 	.word	0x0800543d
 80053b0:	0800543d 	.word	0x0800543d
 80053b4:	0800543d 	.word	0x0800543d
 80053b8:	0800543d 	.word	0x0800543d
 80053bc:	0800542f 	.word	0x0800542f
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d037      	beq.n	8005434 <UART_SetConfig+0x6bc>
 80053c4:	e03a      	b.n	800543c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053c6:	f7fe ffcf 	bl	8004368 <HAL_RCCEx_GetD3PCLK1Freq>
 80053ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053cc:	e03c      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe ffde 	bl	8004394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053dc:	e034      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053de:	f107 0318 	add.w	r3, r7, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff f92a 	bl	800463c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053ec:	e02c      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <UART_SetConfig+0x69c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d016      	beq.n	8005428 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <UART_SetConfig+0x69c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	08db      	lsrs	r3, r3, #3
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	4a07      	ldr	r2, [pc, #28]	; (8005424 <UART_SetConfig+0x6ac>)
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800540c:	e01c      	b.n	8005448 <UART_SetConfig+0x6d0>
 800540e:	bf00      	nop
 8005410:	40011400 	.word	0x40011400
 8005414:	58024400 	.word	0x58024400
 8005418:	40007800 	.word	0x40007800
 800541c:	40007c00 	.word	0x40007c00
 8005420:	58000c00 	.word	0x58000c00
 8005424:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005428:	4b9d      	ldr	r3, [pc, #628]	; (80056a0 <UART_SetConfig+0x928>)
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800542c:	e00c      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800542e:	4b9d      	ldr	r3, [pc, #628]	; (80056a4 <UART_SetConfig+0x92c>)
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005432:	e009      	b.n	8005448 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800543a:	e005      	b.n	8005448 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005446:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 81de 	beq.w	800580c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	4a94      	ldr	r2, [pc, #592]	; (80056a8 <UART_SetConfig+0x930>)
 8005456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800545a:	461a      	mov	r2, r3
 800545c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005462:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	4413      	add	r3, r2
 800546e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005470:	429a      	cmp	r2, r3
 8005472:	d305      	bcc.n	8005480 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800547a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547c:	429a      	cmp	r2, r3
 800547e:	d903      	bls.n	8005488 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005486:	e1c1      	b.n	800580c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548a:	2200      	movs	r2, #0
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	60fa      	str	r2, [r7, #12]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	4a84      	ldr	r2, [pc, #528]	; (80056a8 <UART_SetConfig+0x930>)
 8005496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800549a:	b29b      	uxth	r3, r3
 800549c:	2200      	movs	r2, #0
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054aa:	f7fa ff69 	bl	8000380 <__aeabi_uldivmod>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4610      	mov	r0, r2
 80054b4:	4619      	mov	r1, r3
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	020b      	lsls	r3, r1, #8
 80054c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054c4:	0202      	lsls	r2, r0, #8
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	6849      	ldr	r1, [r1, #4]
 80054ca:	0849      	lsrs	r1, r1, #1
 80054cc:	2000      	movs	r0, #0
 80054ce:	460c      	mov	r4, r1
 80054d0:	4605      	mov	r5, r0
 80054d2:	eb12 0804 	adds.w	r8, r2, r4
 80054d6:	eb43 0905 	adc.w	r9, r3, r5
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	469a      	mov	sl, r3
 80054e2:	4693      	mov	fp, r2
 80054e4:	4652      	mov	r2, sl
 80054e6:	465b      	mov	r3, fp
 80054e8:	4640      	mov	r0, r8
 80054ea:	4649      	mov	r1, r9
 80054ec:	f7fa ff48 	bl	8000380 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4613      	mov	r3, r2
 80054f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fe:	d308      	bcc.n	8005512 <UART_SetConfig+0x79a>
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005506:	d204      	bcs.n	8005512 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800550e:	60da      	str	r2, [r3, #12]
 8005510:	e17c      	b.n	800580c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005518:	e178      	b.n	800580c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005522:	f040 80c5 	bne.w	80056b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005526:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800552a:	2b20      	cmp	r3, #32
 800552c:	dc48      	bgt.n	80055c0 <UART_SetConfig+0x848>
 800552e:	2b00      	cmp	r3, #0
 8005530:	db7b      	blt.n	800562a <UART_SetConfig+0x8b2>
 8005532:	2b20      	cmp	r3, #32
 8005534:	d879      	bhi.n	800562a <UART_SetConfig+0x8b2>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <UART_SetConfig+0x7c4>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	080055c7 	.word	0x080055c7
 8005540:	080055cf 	.word	0x080055cf
 8005544:	0800562b 	.word	0x0800562b
 8005548:	0800562b 	.word	0x0800562b
 800554c:	080055d7 	.word	0x080055d7
 8005550:	0800562b 	.word	0x0800562b
 8005554:	0800562b 	.word	0x0800562b
 8005558:	0800562b 	.word	0x0800562b
 800555c:	080055e7 	.word	0x080055e7
 8005560:	0800562b 	.word	0x0800562b
 8005564:	0800562b 	.word	0x0800562b
 8005568:	0800562b 	.word	0x0800562b
 800556c:	0800562b 	.word	0x0800562b
 8005570:	0800562b 	.word	0x0800562b
 8005574:	0800562b 	.word	0x0800562b
 8005578:	0800562b 	.word	0x0800562b
 800557c:	080055f7 	.word	0x080055f7
 8005580:	0800562b 	.word	0x0800562b
 8005584:	0800562b 	.word	0x0800562b
 8005588:	0800562b 	.word	0x0800562b
 800558c:	0800562b 	.word	0x0800562b
 8005590:	0800562b 	.word	0x0800562b
 8005594:	0800562b 	.word	0x0800562b
 8005598:	0800562b 	.word	0x0800562b
 800559c:	0800562b 	.word	0x0800562b
 80055a0:	0800562b 	.word	0x0800562b
 80055a4:	0800562b 	.word	0x0800562b
 80055a8:	0800562b 	.word	0x0800562b
 80055ac:	0800562b 	.word	0x0800562b
 80055b0:	0800562b 	.word	0x0800562b
 80055b4:	0800562b 	.word	0x0800562b
 80055b8:	0800562b 	.word	0x0800562b
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d02e      	beq.n	8005622 <UART_SetConfig+0x8aa>
 80055c4:	e031      	b.n	800562a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c6:	f7fd ff5d 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 80055ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055cc:	e033      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ce:	f7fd ff6f 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 80055d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055d4:	e02f      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe feda 	bl	8004394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055e4:	e027      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055e6:	f107 0318 	add.w	r3, r7, #24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff f826 	bl	800463c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055f4:	e01f      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f6:	4b2d      	ldr	r3, [pc, #180]	; (80056ac <UART_SetConfig+0x934>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005602:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <UART_SetConfig+0x934>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	08db      	lsrs	r3, r3, #3
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <UART_SetConfig+0x928>)
 800560e:	fa22 f303 	lsr.w	r3, r2, r3
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005614:	e00f      	b.n	8005636 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005616:	4b22      	ldr	r3, [pc, #136]	; (80056a0 <UART_SetConfig+0x928>)
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800561a:	e00c      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800561c:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <UART_SetConfig+0x92c>)
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005620:	e009      	b.n	8005636 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005628:	e005      	b.n	8005636 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80e7 	beq.w	800580c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <UART_SetConfig+0x930>)
 8005644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005648:	461a      	mov	r2, r3
 800564a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005650:	005a      	lsls	r2, r3, #1
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	085b      	lsrs	r3, r3, #1
 8005658:	441a      	add	r2, r3
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	2b0f      	cmp	r3, #15
 8005668:	d916      	bls.n	8005698 <UART_SetConfig+0x920>
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d212      	bcs.n	8005698 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	b29b      	uxth	r3, r3
 8005676:	f023 030f 	bic.w	r3, r3, #15
 800567a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	b29a      	uxth	r2, r3
 8005688:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800568a:	4313      	orrs	r3, r2
 800568c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	e0b9      	b.n	800580c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800569e:	e0b5      	b.n	800580c <UART_SetConfig+0xa94>
 80056a0:	03d09000 	.word	0x03d09000
 80056a4:	003d0900 	.word	0x003d0900
 80056a8:	08006f18 	.word	0x08006f18
 80056ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	dc49      	bgt.n	800574c <UART_SetConfig+0x9d4>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	db7c      	blt.n	80057b6 <UART_SetConfig+0xa3e>
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d87a      	bhi.n	80057b6 <UART_SetConfig+0xa3e>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <UART_SetConfig+0x950>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	08005753 	.word	0x08005753
 80056cc:	0800575b 	.word	0x0800575b
 80056d0:	080057b7 	.word	0x080057b7
 80056d4:	080057b7 	.word	0x080057b7
 80056d8:	08005763 	.word	0x08005763
 80056dc:	080057b7 	.word	0x080057b7
 80056e0:	080057b7 	.word	0x080057b7
 80056e4:	080057b7 	.word	0x080057b7
 80056e8:	08005773 	.word	0x08005773
 80056ec:	080057b7 	.word	0x080057b7
 80056f0:	080057b7 	.word	0x080057b7
 80056f4:	080057b7 	.word	0x080057b7
 80056f8:	080057b7 	.word	0x080057b7
 80056fc:	080057b7 	.word	0x080057b7
 8005700:	080057b7 	.word	0x080057b7
 8005704:	080057b7 	.word	0x080057b7
 8005708:	08005783 	.word	0x08005783
 800570c:	080057b7 	.word	0x080057b7
 8005710:	080057b7 	.word	0x080057b7
 8005714:	080057b7 	.word	0x080057b7
 8005718:	080057b7 	.word	0x080057b7
 800571c:	080057b7 	.word	0x080057b7
 8005720:	080057b7 	.word	0x080057b7
 8005724:	080057b7 	.word	0x080057b7
 8005728:	080057b7 	.word	0x080057b7
 800572c:	080057b7 	.word	0x080057b7
 8005730:	080057b7 	.word	0x080057b7
 8005734:	080057b7 	.word	0x080057b7
 8005738:	080057b7 	.word	0x080057b7
 800573c:	080057b7 	.word	0x080057b7
 8005740:	080057b7 	.word	0x080057b7
 8005744:	080057b7 	.word	0x080057b7
 8005748:	080057a9 	.word	0x080057a9
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d02e      	beq.n	80057ae <UART_SetConfig+0xa36>
 8005750:	e031      	b.n	80057b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005752:	f7fd fe97 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8005756:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005758:	e033      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800575a:	f7fd fea9 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 800575e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005760:	e02f      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fe14 	bl	8004394 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005770:	e027      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005772:	f107 0318 	add.w	r3, r7, #24
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe ff60 	bl	800463c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005780:	e01f      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005782:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <UART_SetConfig+0xac0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800578e:	4b2a      	ldr	r3, [pc, #168]	; (8005838 <UART_SetConfig+0xac0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	4a28      	ldr	r2, [pc, #160]	; (800583c <UART_SetConfig+0xac4>)
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057a0:	e00f      	b.n	80057c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80057a2:	4b26      	ldr	r3, [pc, #152]	; (800583c <UART_SetConfig+0xac4>)
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a6:	e00c      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057a8:	4b25      	ldr	r3, [pc, #148]	; (8005840 <UART_SetConfig+0xac8>)
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ac:	e009      	b.n	80057c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057b4:	e005      	b.n	80057c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057c0:	bf00      	nop
    }

    if (pclk != 0U)
 80057c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d021      	beq.n	800580c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	4a1d      	ldr	r2, [pc, #116]	; (8005844 <UART_SetConfig+0xacc>)
 80057ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	441a      	add	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	2b0f      	cmp	r3, #15
 80057f0:	d909      	bls.n	8005806 <UART_SetConfig+0xa8e>
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f8:	d205      	bcs.n	8005806 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60da      	str	r2, [r3, #12]
 8005804:	e002      	b.n	800580c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2201      	movs	r2, #1
 8005810:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2201      	movs	r2, #1
 8005818:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2200      	movs	r2, #0
 8005820:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2200      	movs	r2, #0
 8005826:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005828:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800582c:	4618      	mov	r0, r3
 800582e:	3748      	adds	r7, #72	; 0x48
 8005830:	46bd      	mov	sp, r7
 8005832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	03d09000 	.word	0x03d09000
 8005840:	003d0900 	.word	0x003d0900
 8005844:	08006f18 	.word	0x08006f18

08005848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01a      	beq.n	800595e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005946:	d10a      	bne.n	800595e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af02      	add	r7, sp, #8
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800599c:	f7fb fc3e 	bl	800121c <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d10e      	bne.n	80059ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f82f 	bl	8005a22 <UART_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e025      	b.n	8005a1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d10e      	bne.n	80059fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f819 	bl	8005a22 <UART_WaitOnFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e00f      	b.n	8005a1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b09c      	sub	sp, #112	; 0x70
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a32:	e0a9      	b.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	f000 80a5 	beq.w	8005b88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3e:	f7fb fbed 	bl	800121c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d140      	bne.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a68:	667b      	str	r3, [r7, #100]	; 0x64
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e6      	bne.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005aa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e5      	bne.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e069      	b.n	8005baa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d051      	beq.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af2:	d149      	bne.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005afc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e6      	bne.n	8005afe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b50:	623a      	str	r2, [r7, #32]
 8005b52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	69f9      	ldr	r1, [r7, #28]
 8005b56:	6a3a      	ldr	r2, [r7, #32]
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e010      	b.n	8005baa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4013      	ands	r3, r2
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	bf0c      	ite	eq
 8005b98:	2301      	moveq	r3, #1
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	f43f af46 	beq.w	8005a34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3770      	adds	r7, #112	; 0x70
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e027      	b.n	8005c18 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e02d      	b.n	8005c98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2224      	movs	r2, #36	; 0x24
 8005c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f84f 	bl	8005d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e02d      	b.n	8005d14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2224      	movs	r2, #36	; 0x24
 8005cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f811 	bl	8005d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d108      	bne.n	8005d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d3c:	e031      	b.n	8005da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d3e:	2310      	movs	r3, #16
 8005d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d42:	2310      	movs	r3, #16
 8005d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	0e5b      	lsrs	r3, r3, #25
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	0f5b      	lsrs	r3, r3, #29
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
 8005d68:	7b3a      	ldrb	r2, [r7, #12]
 8005d6a:	4911      	ldr	r1, [pc, #68]	; (8005db0 <UARTEx_SetNbDataToProcess+0x94>)
 8005d6c:	5c8a      	ldrb	r2, [r1, r2]
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d72:	7b3a      	ldrb	r2, [r7, #12]
 8005d74:	490f      	ldr	r1, [pc, #60]	; (8005db4 <UARTEx_SetNbDataToProcess+0x98>)
 8005d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	7b7a      	ldrb	r2, [r7, #13]
 8005d88:	4909      	ldr	r1, [pc, #36]	; (8005db0 <UARTEx_SetNbDataToProcess+0x94>)
 8005d8a:	5c8a      	ldrb	r2, [r1, r2]
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d90:	7b7a      	ldrb	r2, [r7, #13]
 8005d92:	4908      	ldr	r1, [pc, #32]	; (8005db4 <UARTEx_SetNbDataToProcess+0x98>)
 8005d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	08006f30 	.word	0x08006f30
 8005db4:	08006f38 	.word	0x08006f38

08005db8 <__errno>:
 8005db8:	4b01      	ldr	r3, [pc, #4]	; (8005dc0 <__errno+0x8>)
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	24000010 	.word	0x24000010

08005dc4 <__libc_init_array>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4d0d      	ldr	r5, [pc, #52]	; (8005dfc <__libc_init_array+0x38>)
 8005dc8:	4c0d      	ldr	r4, [pc, #52]	; (8005e00 <__libc_init_array+0x3c>)
 8005dca:	1b64      	subs	r4, r4, r5
 8005dcc:	10a4      	asrs	r4, r4, #2
 8005dce:	2600      	movs	r6, #0
 8005dd0:	42a6      	cmp	r6, r4
 8005dd2:	d109      	bne.n	8005de8 <__libc_init_array+0x24>
 8005dd4:	4d0b      	ldr	r5, [pc, #44]	; (8005e04 <__libc_init_array+0x40>)
 8005dd6:	4c0c      	ldr	r4, [pc, #48]	; (8005e08 <__libc_init_array+0x44>)
 8005dd8:	f001 f832 	bl	8006e40 <_init>
 8005ddc:	1b64      	subs	r4, r4, r5
 8005dde:	10a4      	asrs	r4, r4, #2
 8005de0:	2600      	movs	r6, #0
 8005de2:	42a6      	cmp	r6, r4
 8005de4:	d105      	bne.n	8005df2 <__libc_init_array+0x2e>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dec:	4798      	blx	r3
 8005dee:	3601      	adds	r6, #1
 8005df0:	e7ee      	b.n	8005dd0 <__libc_init_array+0xc>
 8005df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df6:	4798      	blx	r3
 8005df8:	3601      	adds	r6, #1
 8005dfa:	e7f2      	b.n	8005de2 <__libc_init_array+0x1e>
 8005dfc:	08006fe0 	.word	0x08006fe0
 8005e00:	08006fe0 	.word	0x08006fe0
 8005e04:	08006fe0 	.word	0x08006fe0
 8005e08:	08006fe4 	.word	0x08006fe4

08005e0c <memcpy>:
 8005e0c:	440a      	add	r2, r1
 8005e0e:	4291      	cmp	r1, r2
 8005e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e14:	d100      	bne.n	8005e18 <memcpy+0xc>
 8005e16:	4770      	bx	lr
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e22:	4291      	cmp	r1, r2
 8005e24:	d1f9      	bne.n	8005e1a <memcpy+0xe>
 8005e26:	bd10      	pop	{r4, pc}

08005e28 <memset>:
 8005e28:	4402      	add	r2, r0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d100      	bne.n	8005e32 <memset+0xa>
 8005e30:	4770      	bx	lr
 8005e32:	f803 1b01 	strb.w	r1, [r3], #1
 8005e36:	e7f9      	b.n	8005e2c <memset+0x4>

08005e38 <iprintf>:
 8005e38:	b40f      	push	{r0, r1, r2, r3}
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <iprintf+0x2c>)
 8005e3c:	b513      	push	{r0, r1, r4, lr}
 8005e3e:	681c      	ldr	r4, [r3, #0]
 8005e40:	b124      	cbz	r4, 8005e4c <iprintf+0x14>
 8005e42:	69a3      	ldr	r3, [r4, #24]
 8005e44:	b913      	cbnz	r3, 8005e4c <iprintf+0x14>
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 fa5e 	bl	8006308 <__sinit>
 8005e4c:	ab05      	add	r3, sp, #20
 8005e4e:	9a04      	ldr	r2, [sp, #16]
 8005e50:	68a1      	ldr	r1, [r4, #8]
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fc67 	bl	8006728 <_vfiprintf_r>
 8005e5a:	b002      	add	sp, #8
 8005e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e60:	b004      	add	sp, #16
 8005e62:	4770      	bx	lr
 8005e64:	24000010 	.word	0x24000010

08005e68 <_puts_r>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	460e      	mov	r6, r1
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	b118      	cbz	r0, 8005e78 <_puts_r+0x10>
 8005e70:	6983      	ldr	r3, [r0, #24]
 8005e72:	b90b      	cbnz	r3, 8005e78 <_puts_r+0x10>
 8005e74:	f000 fa48 	bl	8006308 <__sinit>
 8005e78:	69ab      	ldr	r3, [r5, #24]
 8005e7a:	68ac      	ldr	r4, [r5, #8]
 8005e7c:	b913      	cbnz	r3, 8005e84 <_puts_r+0x1c>
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f000 fa42 	bl	8006308 <__sinit>
 8005e84:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <_puts_r+0xd0>)
 8005e86:	429c      	cmp	r4, r3
 8005e88:	d120      	bne.n	8005ecc <_puts_r+0x64>
 8005e8a:	686c      	ldr	r4, [r5, #4]
 8005e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e8e:	07db      	lsls	r3, r3, #31
 8005e90:	d405      	bmi.n	8005e9e <_puts_r+0x36>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	0598      	lsls	r0, r3, #22
 8005e96:	d402      	bmi.n	8005e9e <_puts_r+0x36>
 8005e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9a:	f000 fad3 	bl	8006444 <__retarget_lock_acquire_recursive>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	0719      	lsls	r1, r3, #28
 8005ea2:	d51d      	bpl.n	8005ee0 <_puts_r+0x78>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	b1db      	cbz	r3, 8005ee0 <_puts_r+0x78>
 8005ea8:	3e01      	subs	r6, #1
 8005eaa:	68a3      	ldr	r3, [r4, #8]
 8005eac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	60a3      	str	r3, [r4, #8]
 8005eb4:	bb39      	cbnz	r1, 8005f06 <_puts_r+0x9e>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da38      	bge.n	8005f2c <_puts_r+0xc4>
 8005eba:	4622      	mov	r2, r4
 8005ebc:	210a      	movs	r1, #10
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f848 	bl	8005f54 <__swbuf_r>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d011      	beq.n	8005eec <_puts_r+0x84>
 8005ec8:	250a      	movs	r5, #10
 8005eca:	e011      	b.n	8005ef0 <_puts_r+0x88>
 8005ecc:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <_puts_r+0xd4>)
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d101      	bne.n	8005ed6 <_puts_r+0x6e>
 8005ed2:	68ac      	ldr	r4, [r5, #8]
 8005ed4:	e7da      	b.n	8005e8c <_puts_r+0x24>
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <_puts_r+0xd8>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	bf08      	it	eq
 8005edc:	68ec      	ldreq	r4, [r5, #12]
 8005ede:	e7d5      	b.n	8005e8c <_puts_r+0x24>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 f888 	bl	8005ff8 <__swsetup_r>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d0dd      	beq.n	8005ea8 <_puts_r+0x40>
 8005eec:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef2:	07da      	lsls	r2, r3, #31
 8005ef4:	d405      	bmi.n	8005f02 <_puts_r+0x9a>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	059b      	lsls	r3, r3, #22
 8005efa:	d402      	bmi.n	8005f02 <_puts_r+0x9a>
 8005efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005efe:	f000 faa2 	bl	8006446 <__retarget_lock_release_recursive>
 8005f02:	4628      	mov	r0, r5
 8005f04:	bd70      	pop	{r4, r5, r6, pc}
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da04      	bge.n	8005f14 <_puts_r+0xac>
 8005f0a:	69a2      	ldr	r2, [r4, #24]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	dc06      	bgt.n	8005f1e <_puts_r+0xb6>
 8005f10:	290a      	cmp	r1, #10
 8005f12:	d004      	beq.n	8005f1e <_puts_r+0xb6>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	6022      	str	r2, [r4, #0]
 8005f1a:	7019      	strb	r1, [r3, #0]
 8005f1c:	e7c5      	b.n	8005eaa <_puts_r+0x42>
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 f817 	bl	8005f54 <__swbuf_r>
 8005f26:	3001      	adds	r0, #1
 8005f28:	d1bf      	bne.n	8005eaa <_puts_r+0x42>
 8005f2a:	e7df      	b.n	8005eec <_puts_r+0x84>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	250a      	movs	r5, #10
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	701d      	strb	r5, [r3, #0]
 8005f36:	e7db      	b.n	8005ef0 <_puts_r+0x88>
 8005f38:	08006f64 	.word	0x08006f64
 8005f3c:	08006f84 	.word	0x08006f84
 8005f40:	08006f44 	.word	0x08006f44

08005f44 <puts>:
 8005f44:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <puts+0xc>)
 8005f46:	4601      	mov	r1, r0
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	f7ff bf8d 	b.w	8005e68 <_puts_r>
 8005f4e:	bf00      	nop
 8005f50:	24000010 	.word	0x24000010

08005f54 <__swbuf_r>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	460e      	mov	r6, r1
 8005f58:	4614      	mov	r4, r2
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b118      	cbz	r0, 8005f66 <__swbuf_r+0x12>
 8005f5e:	6983      	ldr	r3, [r0, #24]
 8005f60:	b90b      	cbnz	r3, 8005f66 <__swbuf_r+0x12>
 8005f62:	f000 f9d1 	bl	8006308 <__sinit>
 8005f66:	4b21      	ldr	r3, [pc, #132]	; (8005fec <__swbuf_r+0x98>)
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	d12b      	bne.n	8005fc4 <__swbuf_r+0x70>
 8005f6c:	686c      	ldr	r4, [r5, #4]
 8005f6e:	69a3      	ldr	r3, [r4, #24]
 8005f70:	60a3      	str	r3, [r4, #8]
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	071a      	lsls	r2, r3, #28
 8005f76:	d52f      	bpl.n	8005fd8 <__swbuf_r+0x84>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	b36b      	cbz	r3, 8005fd8 <__swbuf_r+0x84>
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	1ac0      	subs	r0, r0, r3
 8005f82:	6963      	ldr	r3, [r4, #20]
 8005f84:	b2f6      	uxtb	r6, r6
 8005f86:	4283      	cmp	r3, r0
 8005f88:	4637      	mov	r7, r6
 8005f8a:	dc04      	bgt.n	8005f96 <__swbuf_r+0x42>
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 f926 	bl	80061e0 <_fflush_r>
 8005f94:	bb30      	cbnz	r0, 8005fe4 <__swbuf_r+0x90>
 8005f96:	68a3      	ldr	r3, [r4, #8]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	6022      	str	r2, [r4, #0]
 8005fa2:	701e      	strb	r6, [r3, #0]
 8005fa4:	6963      	ldr	r3, [r4, #20]
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	4283      	cmp	r3, r0
 8005faa:	d004      	beq.n	8005fb6 <__swbuf_r+0x62>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d506      	bpl.n	8005fc0 <__swbuf_r+0x6c>
 8005fb2:	2e0a      	cmp	r6, #10
 8005fb4:	d104      	bne.n	8005fc0 <__swbuf_r+0x6c>
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 f911 	bl	80061e0 <_fflush_r>
 8005fbe:	b988      	cbnz	r0, 8005fe4 <__swbuf_r+0x90>
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <__swbuf_r+0x9c>)
 8005fc6:	429c      	cmp	r4, r3
 8005fc8:	d101      	bne.n	8005fce <__swbuf_r+0x7a>
 8005fca:	68ac      	ldr	r4, [r5, #8]
 8005fcc:	e7cf      	b.n	8005f6e <__swbuf_r+0x1a>
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <__swbuf_r+0xa0>)
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	bf08      	it	eq
 8005fd4:	68ec      	ldreq	r4, [r5, #12]
 8005fd6:	e7ca      	b.n	8005f6e <__swbuf_r+0x1a>
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 f80c 	bl	8005ff8 <__swsetup_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d0cb      	beq.n	8005f7c <__swbuf_r+0x28>
 8005fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8005fe8:	e7ea      	b.n	8005fc0 <__swbuf_r+0x6c>
 8005fea:	bf00      	nop
 8005fec:	08006f64 	.word	0x08006f64
 8005ff0:	08006f84 	.word	0x08006f84
 8005ff4:	08006f44 	.word	0x08006f44

08005ff8 <__swsetup_r>:
 8005ff8:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <__swsetup_r+0xcc>)
 8005ffa:	b570      	push	{r4, r5, r6, lr}
 8005ffc:	681d      	ldr	r5, [r3, #0]
 8005ffe:	4606      	mov	r6, r0
 8006000:	460c      	mov	r4, r1
 8006002:	b125      	cbz	r5, 800600e <__swsetup_r+0x16>
 8006004:	69ab      	ldr	r3, [r5, #24]
 8006006:	b913      	cbnz	r3, 800600e <__swsetup_r+0x16>
 8006008:	4628      	mov	r0, r5
 800600a:	f000 f97d 	bl	8006308 <__sinit>
 800600e:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <__swsetup_r+0xd0>)
 8006010:	429c      	cmp	r4, r3
 8006012:	d10f      	bne.n	8006034 <__swsetup_r+0x3c>
 8006014:	686c      	ldr	r4, [r5, #4]
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800601c:	0719      	lsls	r1, r3, #28
 800601e:	d42c      	bmi.n	800607a <__swsetup_r+0x82>
 8006020:	06dd      	lsls	r5, r3, #27
 8006022:	d411      	bmi.n	8006048 <__swsetup_r+0x50>
 8006024:	2309      	movs	r3, #9
 8006026:	6033      	str	r3, [r6, #0]
 8006028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	f04f 30ff 	mov.w	r0, #4294967295
 8006032:	e03e      	b.n	80060b2 <__swsetup_r+0xba>
 8006034:	4b25      	ldr	r3, [pc, #148]	; (80060cc <__swsetup_r+0xd4>)
 8006036:	429c      	cmp	r4, r3
 8006038:	d101      	bne.n	800603e <__swsetup_r+0x46>
 800603a:	68ac      	ldr	r4, [r5, #8]
 800603c:	e7eb      	b.n	8006016 <__swsetup_r+0x1e>
 800603e:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <__swsetup_r+0xd8>)
 8006040:	429c      	cmp	r4, r3
 8006042:	bf08      	it	eq
 8006044:	68ec      	ldreq	r4, [r5, #12]
 8006046:	e7e6      	b.n	8006016 <__swsetup_r+0x1e>
 8006048:	0758      	lsls	r0, r3, #29
 800604a:	d512      	bpl.n	8006072 <__swsetup_r+0x7a>
 800604c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800604e:	b141      	cbz	r1, 8006062 <__swsetup_r+0x6a>
 8006050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006054:	4299      	cmp	r1, r3
 8006056:	d002      	beq.n	800605e <__swsetup_r+0x66>
 8006058:	4630      	mov	r0, r6
 800605a:	f000 fa5b 	bl	8006514 <_free_r>
 800605e:	2300      	movs	r3, #0
 8006060:	6363      	str	r3, [r4, #52]	; 0x34
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	2300      	movs	r3, #0
 800606c:	6063      	str	r3, [r4, #4]
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f043 0308 	orr.w	r3, r3, #8
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	b94b      	cbnz	r3, 8006092 <__swsetup_r+0x9a>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006088:	d003      	beq.n	8006092 <__swsetup_r+0x9a>
 800608a:	4621      	mov	r1, r4
 800608c:	4630      	mov	r0, r6
 800608e:	f000 fa01 	bl	8006494 <__smakebuf_r>
 8006092:	89a0      	ldrh	r0, [r4, #12]
 8006094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006098:	f010 0301 	ands.w	r3, r0, #1
 800609c:	d00a      	beq.n	80060b4 <__swsetup_r+0xbc>
 800609e:	2300      	movs	r3, #0
 80060a0:	60a3      	str	r3, [r4, #8]
 80060a2:	6963      	ldr	r3, [r4, #20]
 80060a4:	425b      	negs	r3, r3
 80060a6:	61a3      	str	r3, [r4, #24]
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	b943      	cbnz	r3, 80060be <__swsetup_r+0xc6>
 80060ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060b0:	d1ba      	bne.n	8006028 <__swsetup_r+0x30>
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	0781      	lsls	r1, r0, #30
 80060b6:	bf58      	it	pl
 80060b8:	6963      	ldrpl	r3, [r4, #20]
 80060ba:	60a3      	str	r3, [r4, #8]
 80060bc:	e7f4      	b.n	80060a8 <__swsetup_r+0xb0>
 80060be:	2000      	movs	r0, #0
 80060c0:	e7f7      	b.n	80060b2 <__swsetup_r+0xba>
 80060c2:	bf00      	nop
 80060c4:	24000010 	.word	0x24000010
 80060c8:	08006f64 	.word	0x08006f64
 80060cc:	08006f84 	.word	0x08006f84
 80060d0:	08006f44 	.word	0x08006f44

080060d4 <__sflush_r>:
 80060d4:	898a      	ldrh	r2, [r1, #12]
 80060d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	4605      	mov	r5, r0
 80060dc:	0710      	lsls	r0, r2, #28
 80060de:	460c      	mov	r4, r1
 80060e0:	d458      	bmi.n	8006194 <__sflush_r+0xc0>
 80060e2:	684b      	ldr	r3, [r1, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dc05      	bgt.n	80060f4 <__sflush_r+0x20>
 80060e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	dc02      	bgt.n	80060f4 <__sflush_r+0x20>
 80060ee:	2000      	movs	r0, #0
 80060f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060f6:	2e00      	cmp	r6, #0
 80060f8:	d0f9      	beq.n	80060ee <__sflush_r+0x1a>
 80060fa:	2300      	movs	r3, #0
 80060fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006100:	682f      	ldr	r7, [r5, #0]
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	d032      	beq.n	800616c <__sflush_r+0x98>
 8006106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	075a      	lsls	r2, r3, #29
 800610c:	d505      	bpl.n	800611a <__sflush_r+0x46>
 800610e:	6863      	ldr	r3, [r4, #4]
 8006110:	1ac0      	subs	r0, r0, r3
 8006112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006114:	b10b      	cbz	r3, 800611a <__sflush_r+0x46>
 8006116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006118:	1ac0      	subs	r0, r0, r3
 800611a:	2300      	movs	r3, #0
 800611c:	4602      	mov	r2, r0
 800611e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006120:	6a21      	ldr	r1, [r4, #32]
 8006122:	4628      	mov	r0, r5
 8006124:	47b0      	blx	r6
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	d106      	bne.n	800613a <__sflush_r+0x66>
 800612c:	6829      	ldr	r1, [r5, #0]
 800612e:	291d      	cmp	r1, #29
 8006130:	d82c      	bhi.n	800618c <__sflush_r+0xb8>
 8006132:	4a2a      	ldr	r2, [pc, #168]	; (80061dc <__sflush_r+0x108>)
 8006134:	40ca      	lsrs	r2, r1
 8006136:	07d6      	lsls	r6, r2, #31
 8006138:	d528      	bpl.n	800618c <__sflush_r+0xb8>
 800613a:	2200      	movs	r2, #0
 800613c:	6062      	str	r2, [r4, #4]
 800613e:	04d9      	lsls	r1, r3, #19
 8006140:	6922      	ldr	r2, [r4, #16]
 8006142:	6022      	str	r2, [r4, #0]
 8006144:	d504      	bpl.n	8006150 <__sflush_r+0x7c>
 8006146:	1c42      	adds	r2, r0, #1
 8006148:	d101      	bne.n	800614e <__sflush_r+0x7a>
 800614a:	682b      	ldr	r3, [r5, #0]
 800614c:	b903      	cbnz	r3, 8006150 <__sflush_r+0x7c>
 800614e:	6560      	str	r0, [r4, #84]	; 0x54
 8006150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006152:	602f      	str	r7, [r5, #0]
 8006154:	2900      	cmp	r1, #0
 8006156:	d0ca      	beq.n	80060ee <__sflush_r+0x1a>
 8006158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800615c:	4299      	cmp	r1, r3
 800615e:	d002      	beq.n	8006166 <__sflush_r+0x92>
 8006160:	4628      	mov	r0, r5
 8006162:	f000 f9d7 	bl	8006514 <_free_r>
 8006166:	2000      	movs	r0, #0
 8006168:	6360      	str	r0, [r4, #52]	; 0x34
 800616a:	e7c1      	b.n	80060f0 <__sflush_r+0x1c>
 800616c:	6a21      	ldr	r1, [r4, #32]
 800616e:	2301      	movs	r3, #1
 8006170:	4628      	mov	r0, r5
 8006172:	47b0      	blx	r6
 8006174:	1c41      	adds	r1, r0, #1
 8006176:	d1c7      	bne.n	8006108 <__sflush_r+0x34>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0c4      	beq.n	8006108 <__sflush_r+0x34>
 800617e:	2b1d      	cmp	r3, #29
 8006180:	d001      	beq.n	8006186 <__sflush_r+0xb2>
 8006182:	2b16      	cmp	r3, #22
 8006184:	d101      	bne.n	800618a <__sflush_r+0xb6>
 8006186:	602f      	str	r7, [r5, #0]
 8006188:	e7b1      	b.n	80060ee <__sflush_r+0x1a>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	e7ad      	b.n	80060f0 <__sflush_r+0x1c>
 8006194:	690f      	ldr	r7, [r1, #16]
 8006196:	2f00      	cmp	r7, #0
 8006198:	d0a9      	beq.n	80060ee <__sflush_r+0x1a>
 800619a:	0793      	lsls	r3, r2, #30
 800619c:	680e      	ldr	r6, [r1, #0]
 800619e:	bf08      	it	eq
 80061a0:	694b      	ldreq	r3, [r1, #20]
 80061a2:	600f      	str	r7, [r1, #0]
 80061a4:	bf18      	it	ne
 80061a6:	2300      	movne	r3, #0
 80061a8:	eba6 0807 	sub.w	r8, r6, r7
 80061ac:	608b      	str	r3, [r1, #8]
 80061ae:	f1b8 0f00 	cmp.w	r8, #0
 80061b2:	dd9c      	ble.n	80060ee <__sflush_r+0x1a>
 80061b4:	6a21      	ldr	r1, [r4, #32]
 80061b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061b8:	4643      	mov	r3, r8
 80061ba:	463a      	mov	r2, r7
 80061bc:	4628      	mov	r0, r5
 80061be:	47b0      	blx	r6
 80061c0:	2800      	cmp	r0, #0
 80061c2:	dc06      	bgt.n	80061d2 <__sflush_r+0xfe>
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	e78e      	b.n	80060f0 <__sflush_r+0x1c>
 80061d2:	4407      	add	r7, r0
 80061d4:	eba8 0800 	sub.w	r8, r8, r0
 80061d8:	e7e9      	b.n	80061ae <__sflush_r+0xda>
 80061da:	bf00      	nop
 80061dc:	20400001 	.word	0x20400001

080061e0 <_fflush_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	690b      	ldr	r3, [r1, #16]
 80061e4:	4605      	mov	r5, r0
 80061e6:	460c      	mov	r4, r1
 80061e8:	b913      	cbnz	r3, 80061f0 <_fflush_r+0x10>
 80061ea:	2500      	movs	r5, #0
 80061ec:	4628      	mov	r0, r5
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	b118      	cbz	r0, 80061fa <_fflush_r+0x1a>
 80061f2:	6983      	ldr	r3, [r0, #24]
 80061f4:	b90b      	cbnz	r3, 80061fa <_fflush_r+0x1a>
 80061f6:	f000 f887 	bl	8006308 <__sinit>
 80061fa:	4b14      	ldr	r3, [pc, #80]	; (800624c <_fflush_r+0x6c>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	d11b      	bne.n	8006238 <_fflush_r+0x58>
 8006200:	686c      	ldr	r4, [r5, #4]
 8006202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0ef      	beq.n	80061ea <_fflush_r+0xa>
 800620a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800620c:	07d0      	lsls	r0, r2, #31
 800620e:	d404      	bmi.n	800621a <_fflush_r+0x3a>
 8006210:	0599      	lsls	r1, r3, #22
 8006212:	d402      	bmi.n	800621a <_fflush_r+0x3a>
 8006214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006216:	f000 f915 	bl	8006444 <__retarget_lock_acquire_recursive>
 800621a:	4628      	mov	r0, r5
 800621c:	4621      	mov	r1, r4
 800621e:	f7ff ff59 	bl	80060d4 <__sflush_r>
 8006222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006224:	07da      	lsls	r2, r3, #31
 8006226:	4605      	mov	r5, r0
 8006228:	d4e0      	bmi.n	80061ec <_fflush_r+0xc>
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	059b      	lsls	r3, r3, #22
 800622e:	d4dd      	bmi.n	80061ec <_fflush_r+0xc>
 8006230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006232:	f000 f908 	bl	8006446 <__retarget_lock_release_recursive>
 8006236:	e7d9      	b.n	80061ec <_fflush_r+0xc>
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <_fflush_r+0x70>)
 800623a:	429c      	cmp	r4, r3
 800623c:	d101      	bne.n	8006242 <_fflush_r+0x62>
 800623e:	68ac      	ldr	r4, [r5, #8]
 8006240:	e7df      	b.n	8006202 <_fflush_r+0x22>
 8006242:	4b04      	ldr	r3, [pc, #16]	; (8006254 <_fflush_r+0x74>)
 8006244:	429c      	cmp	r4, r3
 8006246:	bf08      	it	eq
 8006248:	68ec      	ldreq	r4, [r5, #12]
 800624a:	e7da      	b.n	8006202 <_fflush_r+0x22>
 800624c:	08006f64 	.word	0x08006f64
 8006250:	08006f84 	.word	0x08006f84
 8006254:	08006f44 	.word	0x08006f44

08006258 <std>:
 8006258:	2300      	movs	r3, #0
 800625a:	b510      	push	{r4, lr}
 800625c:	4604      	mov	r4, r0
 800625e:	e9c0 3300 	strd	r3, r3, [r0]
 8006262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006266:	6083      	str	r3, [r0, #8]
 8006268:	8181      	strh	r1, [r0, #12]
 800626a:	6643      	str	r3, [r0, #100]	; 0x64
 800626c:	81c2      	strh	r2, [r0, #14]
 800626e:	6183      	str	r3, [r0, #24]
 8006270:	4619      	mov	r1, r3
 8006272:	2208      	movs	r2, #8
 8006274:	305c      	adds	r0, #92	; 0x5c
 8006276:	f7ff fdd7 	bl	8005e28 <memset>
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <std+0x38>)
 800627c:	6263      	str	r3, [r4, #36]	; 0x24
 800627e:	4b05      	ldr	r3, [pc, #20]	; (8006294 <std+0x3c>)
 8006280:	62a3      	str	r3, [r4, #40]	; 0x28
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <std+0x40>)
 8006284:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <std+0x44>)
 8006288:	6224      	str	r4, [r4, #32]
 800628a:	6323      	str	r3, [r4, #48]	; 0x30
 800628c:	bd10      	pop	{r4, pc}
 800628e:	bf00      	nop
 8006290:	08006cd1 	.word	0x08006cd1
 8006294:	08006cf3 	.word	0x08006cf3
 8006298:	08006d2b 	.word	0x08006d2b
 800629c:	08006d4f 	.word	0x08006d4f

080062a0 <_cleanup_r>:
 80062a0:	4901      	ldr	r1, [pc, #4]	; (80062a8 <_cleanup_r+0x8>)
 80062a2:	f000 b8af 	b.w	8006404 <_fwalk_reent>
 80062a6:	bf00      	nop
 80062a8:	080061e1 	.word	0x080061e1

080062ac <__sfmoreglue>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	2268      	movs	r2, #104	; 0x68
 80062b0:	1e4d      	subs	r5, r1, #1
 80062b2:	4355      	muls	r5, r2
 80062b4:	460e      	mov	r6, r1
 80062b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062ba:	f000 f997 	bl	80065ec <_malloc_r>
 80062be:	4604      	mov	r4, r0
 80062c0:	b140      	cbz	r0, 80062d4 <__sfmoreglue+0x28>
 80062c2:	2100      	movs	r1, #0
 80062c4:	e9c0 1600 	strd	r1, r6, [r0]
 80062c8:	300c      	adds	r0, #12
 80062ca:	60a0      	str	r0, [r4, #8]
 80062cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062d0:	f7ff fdaa 	bl	8005e28 <memset>
 80062d4:	4620      	mov	r0, r4
 80062d6:	bd70      	pop	{r4, r5, r6, pc}

080062d8 <__sfp_lock_acquire>:
 80062d8:	4801      	ldr	r0, [pc, #4]	; (80062e0 <__sfp_lock_acquire+0x8>)
 80062da:	f000 b8b3 	b.w	8006444 <__retarget_lock_acquire_recursive>
 80062de:	bf00      	nop
 80062e0:	2400023d 	.word	0x2400023d

080062e4 <__sfp_lock_release>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__sfp_lock_release+0x8>)
 80062e6:	f000 b8ae 	b.w	8006446 <__retarget_lock_release_recursive>
 80062ea:	bf00      	nop
 80062ec:	2400023d 	.word	0x2400023d

080062f0 <__sinit_lock_acquire>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__sinit_lock_acquire+0x8>)
 80062f2:	f000 b8a7 	b.w	8006444 <__retarget_lock_acquire_recursive>
 80062f6:	bf00      	nop
 80062f8:	2400023e 	.word	0x2400023e

080062fc <__sinit_lock_release>:
 80062fc:	4801      	ldr	r0, [pc, #4]	; (8006304 <__sinit_lock_release+0x8>)
 80062fe:	f000 b8a2 	b.w	8006446 <__retarget_lock_release_recursive>
 8006302:	bf00      	nop
 8006304:	2400023e 	.word	0x2400023e

08006308 <__sinit>:
 8006308:	b510      	push	{r4, lr}
 800630a:	4604      	mov	r4, r0
 800630c:	f7ff fff0 	bl	80062f0 <__sinit_lock_acquire>
 8006310:	69a3      	ldr	r3, [r4, #24]
 8006312:	b11b      	cbz	r3, 800631c <__sinit+0x14>
 8006314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006318:	f7ff bff0 	b.w	80062fc <__sinit_lock_release>
 800631c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006320:	6523      	str	r3, [r4, #80]	; 0x50
 8006322:	4b13      	ldr	r3, [pc, #76]	; (8006370 <__sinit+0x68>)
 8006324:	4a13      	ldr	r2, [pc, #76]	; (8006374 <__sinit+0x6c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	62a2      	str	r2, [r4, #40]	; 0x28
 800632a:	42a3      	cmp	r3, r4
 800632c:	bf04      	itt	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	61a3      	streq	r3, [r4, #24]
 8006332:	4620      	mov	r0, r4
 8006334:	f000 f820 	bl	8006378 <__sfp>
 8006338:	6060      	str	r0, [r4, #4]
 800633a:	4620      	mov	r0, r4
 800633c:	f000 f81c 	bl	8006378 <__sfp>
 8006340:	60a0      	str	r0, [r4, #8]
 8006342:	4620      	mov	r0, r4
 8006344:	f000 f818 	bl	8006378 <__sfp>
 8006348:	2200      	movs	r2, #0
 800634a:	60e0      	str	r0, [r4, #12]
 800634c:	2104      	movs	r1, #4
 800634e:	6860      	ldr	r0, [r4, #4]
 8006350:	f7ff ff82 	bl	8006258 <std>
 8006354:	68a0      	ldr	r0, [r4, #8]
 8006356:	2201      	movs	r2, #1
 8006358:	2109      	movs	r1, #9
 800635a:	f7ff ff7d 	bl	8006258 <std>
 800635e:	68e0      	ldr	r0, [r4, #12]
 8006360:	2202      	movs	r2, #2
 8006362:	2112      	movs	r1, #18
 8006364:	f7ff ff78 	bl	8006258 <std>
 8006368:	2301      	movs	r3, #1
 800636a:	61a3      	str	r3, [r4, #24]
 800636c:	e7d2      	b.n	8006314 <__sinit+0xc>
 800636e:	bf00      	nop
 8006370:	08006f40 	.word	0x08006f40
 8006374:	080062a1 	.word	0x080062a1

08006378 <__sfp>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	4607      	mov	r7, r0
 800637c:	f7ff ffac 	bl	80062d8 <__sfp_lock_acquire>
 8006380:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <__sfp+0x84>)
 8006382:	681e      	ldr	r6, [r3, #0]
 8006384:	69b3      	ldr	r3, [r6, #24]
 8006386:	b913      	cbnz	r3, 800638e <__sfp+0x16>
 8006388:	4630      	mov	r0, r6
 800638a:	f7ff ffbd 	bl	8006308 <__sinit>
 800638e:	3648      	adds	r6, #72	; 0x48
 8006390:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006394:	3b01      	subs	r3, #1
 8006396:	d503      	bpl.n	80063a0 <__sfp+0x28>
 8006398:	6833      	ldr	r3, [r6, #0]
 800639a:	b30b      	cbz	r3, 80063e0 <__sfp+0x68>
 800639c:	6836      	ldr	r6, [r6, #0]
 800639e:	e7f7      	b.n	8006390 <__sfp+0x18>
 80063a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063a4:	b9d5      	cbnz	r5, 80063dc <__sfp+0x64>
 80063a6:	4b16      	ldr	r3, [pc, #88]	; (8006400 <__sfp+0x88>)
 80063a8:	60e3      	str	r3, [r4, #12]
 80063aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063ae:	6665      	str	r5, [r4, #100]	; 0x64
 80063b0:	f000 f847 	bl	8006442 <__retarget_lock_init_recursive>
 80063b4:	f7ff ff96 	bl	80062e4 <__sfp_lock_release>
 80063b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063c0:	6025      	str	r5, [r4, #0]
 80063c2:	61a5      	str	r5, [r4, #24]
 80063c4:	2208      	movs	r2, #8
 80063c6:	4629      	mov	r1, r5
 80063c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063cc:	f7ff fd2c 	bl	8005e28 <memset>
 80063d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063d8:	4620      	mov	r0, r4
 80063da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063dc:	3468      	adds	r4, #104	; 0x68
 80063de:	e7d9      	b.n	8006394 <__sfp+0x1c>
 80063e0:	2104      	movs	r1, #4
 80063e2:	4638      	mov	r0, r7
 80063e4:	f7ff ff62 	bl	80062ac <__sfmoreglue>
 80063e8:	4604      	mov	r4, r0
 80063ea:	6030      	str	r0, [r6, #0]
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d1d5      	bne.n	800639c <__sfp+0x24>
 80063f0:	f7ff ff78 	bl	80062e4 <__sfp_lock_release>
 80063f4:	230c      	movs	r3, #12
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	e7ee      	b.n	80063d8 <__sfp+0x60>
 80063fa:	bf00      	nop
 80063fc:	08006f40 	.word	0x08006f40
 8006400:	ffff0001 	.word	0xffff0001

08006404 <_fwalk_reent>:
 8006404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006408:	4606      	mov	r6, r0
 800640a:	4688      	mov	r8, r1
 800640c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006410:	2700      	movs	r7, #0
 8006412:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006416:	f1b9 0901 	subs.w	r9, r9, #1
 800641a:	d505      	bpl.n	8006428 <_fwalk_reent+0x24>
 800641c:	6824      	ldr	r4, [r4, #0]
 800641e:	2c00      	cmp	r4, #0
 8006420:	d1f7      	bne.n	8006412 <_fwalk_reent+0xe>
 8006422:	4638      	mov	r0, r7
 8006424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006428:	89ab      	ldrh	r3, [r5, #12]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d907      	bls.n	800643e <_fwalk_reent+0x3a>
 800642e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006432:	3301      	adds	r3, #1
 8006434:	d003      	beq.n	800643e <_fwalk_reent+0x3a>
 8006436:	4629      	mov	r1, r5
 8006438:	4630      	mov	r0, r6
 800643a:	47c0      	blx	r8
 800643c:	4307      	orrs	r7, r0
 800643e:	3568      	adds	r5, #104	; 0x68
 8006440:	e7e9      	b.n	8006416 <_fwalk_reent+0x12>

08006442 <__retarget_lock_init_recursive>:
 8006442:	4770      	bx	lr

08006444 <__retarget_lock_acquire_recursive>:
 8006444:	4770      	bx	lr

08006446 <__retarget_lock_release_recursive>:
 8006446:	4770      	bx	lr

08006448 <__swhatbuf_r>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	460e      	mov	r6, r1
 800644c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006450:	2900      	cmp	r1, #0
 8006452:	b096      	sub	sp, #88	; 0x58
 8006454:	4614      	mov	r4, r2
 8006456:	461d      	mov	r5, r3
 8006458:	da08      	bge.n	800646c <__swhatbuf_r+0x24>
 800645a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	602a      	str	r2, [r5, #0]
 8006462:	061a      	lsls	r2, r3, #24
 8006464:	d410      	bmi.n	8006488 <__swhatbuf_r+0x40>
 8006466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800646a:	e00e      	b.n	800648a <__swhatbuf_r+0x42>
 800646c:	466a      	mov	r2, sp
 800646e:	f000 fc95 	bl	8006d9c <_fstat_r>
 8006472:	2800      	cmp	r0, #0
 8006474:	dbf1      	blt.n	800645a <__swhatbuf_r+0x12>
 8006476:	9a01      	ldr	r2, [sp, #4]
 8006478:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800647c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006480:	425a      	negs	r2, r3
 8006482:	415a      	adcs	r2, r3
 8006484:	602a      	str	r2, [r5, #0]
 8006486:	e7ee      	b.n	8006466 <__swhatbuf_r+0x1e>
 8006488:	2340      	movs	r3, #64	; 0x40
 800648a:	2000      	movs	r0, #0
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	b016      	add	sp, #88	; 0x58
 8006490:	bd70      	pop	{r4, r5, r6, pc}
	...

08006494 <__smakebuf_r>:
 8006494:	898b      	ldrh	r3, [r1, #12]
 8006496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006498:	079d      	lsls	r5, r3, #30
 800649a:	4606      	mov	r6, r0
 800649c:	460c      	mov	r4, r1
 800649e:	d507      	bpl.n	80064b0 <__smakebuf_r+0x1c>
 80064a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	2301      	movs	r3, #1
 80064aa:	6163      	str	r3, [r4, #20]
 80064ac:	b002      	add	sp, #8
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	ab01      	add	r3, sp, #4
 80064b2:	466a      	mov	r2, sp
 80064b4:	f7ff ffc8 	bl	8006448 <__swhatbuf_r>
 80064b8:	9900      	ldr	r1, [sp, #0]
 80064ba:	4605      	mov	r5, r0
 80064bc:	4630      	mov	r0, r6
 80064be:	f000 f895 	bl	80065ec <_malloc_r>
 80064c2:	b948      	cbnz	r0, 80064d8 <__smakebuf_r+0x44>
 80064c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c8:	059a      	lsls	r2, r3, #22
 80064ca:	d4ef      	bmi.n	80064ac <__smakebuf_r+0x18>
 80064cc:	f023 0303 	bic.w	r3, r3, #3
 80064d0:	f043 0302 	orr.w	r3, r3, #2
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	e7e3      	b.n	80064a0 <__smakebuf_r+0xc>
 80064d8:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <__smakebuf_r+0x7c>)
 80064da:	62b3      	str	r3, [r6, #40]	; 0x28
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	6020      	str	r0, [r4, #0]
 80064e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	9b00      	ldr	r3, [sp, #0]
 80064e8:	6163      	str	r3, [r4, #20]
 80064ea:	9b01      	ldr	r3, [sp, #4]
 80064ec:	6120      	str	r0, [r4, #16]
 80064ee:	b15b      	cbz	r3, 8006508 <__smakebuf_r+0x74>
 80064f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 fc63 	bl	8006dc0 <_isatty_r>
 80064fa:	b128      	cbz	r0, 8006508 <__smakebuf_r+0x74>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f023 0303 	bic.w	r3, r3, #3
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	89a0      	ldrh	r0, [r4, #12]
 800650a:	4305      	orrs	r5, r0
 800650c:	81a5      	strh	r5, [r4, #12]
 800650e:	e7cd      	b.n	80064ac <__smakebuf_r+0x18>
 8006510:	080062a1 	.word	0x080062a1

08006514 <_free_r>:
 8006514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006516:	2900      	cmp	r1, #0
 8006518:	d044      	beq.n	80065a4 <_free_r+0x90>
 800651a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800651e:	9001      	str	r0, [sp, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f1a1 0404 	sub.w	r4, r1, #4
 8006526:	bfb8      	it	lt
 8006528:	18e4      	addlt	r4, r4, r3
 800652a:	f000 fc6b 	bl	8006e04 <__malloc_lock>
 800652e:	4a1e      	ldr	r2, [pc, #120]	; (80065a8 <_free_r+0x94>)
 8006530:	9801      	ldr	r0, [sp, #4]
 8006532:	6813      	ldr	r3, [r2, #0]
 8006534:	b933      	cbnz	r3, 8006544 <_free_r+0x30>
 8006536:	6063      	str	r3, [r4, #4]
 8006538:	6014      	str	r4, [r2, #0]
 800653a:	b003      	add	sp, #12
 800653c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006540:	f000 bc66 	b.w	8006e10 <__malloc_unlock>
 8006544:	42a3      	cmp	r3, r4
 8006546:	d908      	bls.n	800655a <_free_r+0x46>
 8006548:	6825      	ldr	r5, [r4, #0]
 800654a:	1961      	adds	r1, r4, r5
 800654c:	428b      	cmp	r3, r1
 800654e:	bf01      	itttt	eq
 8006550:	6819      	ldreq	r1, [r3, #0]
 8006552:	685b      	ldreq	r3, [r3, #4]
 8006554:	1949      	addeq	r1, r1, r5
 8006556:	6021      	streq	r1, [r4, #0]
 8006558:	e7ed      	b.n	8006536 <_free_r+0x22>
 800655a:	461a      	mov	r2, r3
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	b10b      	cbz	r3, 8006564 <_free_r+0x50>
 8006560:	42a3      	cmp	r3, r4
 8006562:	d9fa      	bls.n	800655a <_free_r+0x46>
 8006564:	6811      	ldr	r1, [r2, #0]
 8006566:	1855      	adds	r5, r2, r1
 8006568:	42a5      	cmp	r5, r4
 800656a:	d10b      	bne.n	8006584 <_free_r+0x70>
 800656c:	6824      	ldr	r4, [r4, #0]
 800656e:	4421      	add	r1, r4
 8006570:	1854      	adds	r4, r2, r1
 8006572:	42a3      	cmp	r3, r4
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	d1e0      	bne.n	800653a <_free_r+0x26>
 8006578:	681c      	ldr	r4, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	6053      	str	r3, [r2, #4]
 800657e:	4421      	add	r1, r4
 8006580:	6011      	str	r1, [r2, #0]
 8006582:	e7da      	b.n	800653a <_free_r+0x26>
 8006584:	d902      	bls.n	800658c <_free_r+0x78>
 8006586:	230c      	movs	r3, #12
 8006588:	6003      	str	r3, [r0, #0]
 800658a:	e7d6      	b.n	800653a <_free_r+0x26>
 800658c:	6825      	ldr	r5, [r4, #0]
 800658e:	1961      	adds	r1, r4, r5
 8006590:	428b      	cmp	r3, r1
 8006592:	bf04      	itt	eq
 8006594:	6819      	ldreq	r1, [r3, #0]
 8006596:	685b      	ldreq	r3, [r3, #4]
 8006598:	6063      	str	r3, [r4, #4]
 800659a:	bf04      	itt	eq
 800659c:	1949      	addeq	r1, r1, r5
 800659e:	6021      	streq	r1, [r4, #0]
 80065a0:	6054      	str	r4, [r2, #4]
 80065a2:	e7ca      	b.n	800653a <_free_r+0x26>
 80065a4:	b003      	add	sp, #12
 80065a6:	bd30      	pop	{r4, r5, pc}
 80065a8:	24000240 	.word	0x24000240

080065ac <sbrk_aligned>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4e0e      	ldr	r6, [pc, #56]	; (80065e8 <sbrk_aligned+0x3c>)
 80065b0:	460c      	mov	r4, r1
 80065b2:	6831      	ldr	r1, [r6, #0]
 80065b4:	4605      	mov	r5, r0
 80065b6:	b911      	cbnz	r1, 80065be <sbrk_aligned+0x12>
 80065b8:	f000 fb7a 	bl	8006cb0 <_sbrk_r>
 80065bc:	6030      	str	r0, [r6, #0]
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f000 fb75 	bl	8006cb0 <_sbrk_r>
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	d00a      	beq.n	80065e0 <sbrk_aligned+0x34>
 80065ca:	1cc4      	adds	r4, r0, #3
 80065cc:	f024 0403 	bic.w	r4, r4, #3
 80065d0:	42a0      	cmp	r0, r4
 80065d2:	d007      	beq.n	80065e4 <sbrk_aligned+0x38>
 80065d4:	1a21      	subs	r1, r4, r0
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 fb6a 	bl	8006cb0 <_sbrk_r>
 80065dc:	3001      	adds	r0, #1
 80065de:	d101      	bne.n	80065e4 <sbrk_aligned+0x38>
 80065e0:	f04f 34ff 	mov.w	r4, #4294967295
 80065e4:	4620      	mov	r0, r4
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	24000244 	.word	0x24000244

080065ec <_malloc_r>:
 80065ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f0:	1ccd      	adds	r5, r1, #3
 80065f2:	f025 0503 	bic.w	r5, r5, #3
 80065f6:	3508      	adds	r5, #8
 80065f8:	2d0c      	cmp	r5, #12
 80065fa:	bf38      	it	cc
 80065fc:	250c      	movcc	r5, #12
 80065fe:	2d00      	cmp	r5, #0
 8006600:	4607      	mov	r7, r0
 8006602:	db01      	blt.n	8006608 <_malloc_r+0x1c>
 8006604:	42a9      	cmp	r1, r5
 8006606:	d905      	bls.n	8006614 <_malloc_r+0x28>
 8006608:	230c      	movs	r3, #12
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	2600      	movs	r6, #0
 800660e:	4630      	mov	r0, r6
 8006610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006614:	4e2e      	ldr	r6, [pc, #184]	; (80066d0 <_malloc_r+0xe4>)
 8006616:	f000 fbf5 	bl	8006e04 <__malloc_lock>
 800661a:	6833      	ldr	r3, [r6, #0]
 800661c:	461c      	mov	r4, r3
 800661e:	bb34      	cbnz	r4, 800666e <_malloc_r+0x82>
 8006620:	4629      	mov	r1, r5
 8006622:	4638      	mov	r0, r7
 8006624:	f7ff ffc2 	bl	80065ac <sbrk_aligned>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	4604      	mov	r4, r0
 800662c:	d14d      	bne.n	80066ca <_malloc_r+0xde>
 800662e:	6834      	ldr	r4, [r6, #0]
 8006630:	4626      	mov	r6, r4
 8006632:	2e00      	cmp	r6, #0
 8006634:	d140      	bne.n	80066b8 <_malloc_r+0xcc>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	4631      	mov	r1, r6
 800663a:	4638      	mov	r0, r7
 800663c:	eb04 0803 	add.w	r8, r4, r3
 8006640:	f000 fb36 	bl	8006cb0 <_sbrk_r>
 8006644:	4580      	cmp	r8, r0
 8006646:	d13a      	bne.n	80066be <_malloc_r+0xd2>
 8006648:	6821      	ldr	r1, [r4, #0]
 800664a:	3503      	adds	r5, #3
 800664c:	1a6d      	subs	r5, r5, r1
 800664e:	f025 0503 	bic.w	r5, r5, #3
 8006652:	3508      	adds	r5, #8
 8006654:	2d0c      	cmp	r5, #12
 8006656:	bf38      	it	cc
 8006658:	250c      	movcc	r5, #12
 800665a:	4629      	mov	r1, r5
 800665c:	4638      	mov	r0, r7
 800665e:	f7ff ffa5 	bl	80065ac <sbrk_aligned>
 8006662:	3001      	adds	r0, #1
 8006664:	d02b      	beq.n	80066be <_malloc_r+0xd2>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	442b      	add	r3, r5
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	e00e      	b.n	800668c <_malloc_r+0xa0>
 800666e:	6822      	ldr	r2, [r4, #0]
 8006670:	1b52      	subs	r2, r2, r5
 8006672:	d41e      	bmi.n	80066b2 <_malloc_r+0xc6>
 8006674:	2a0b      	cmp	r2, #11
 8006676:	d916      	bls.n	80066a6 <_malloc_r+0xba>
 8006678:	1961      	adds	r1, r4, r5
 800667a:	42a3      	cmp	r3, r4
 800667c:	6025      	str	r5, [r4, #0]
 800667e:	bf18      	it	ne
 8006680:	6059      	strne	r1, [r3, #4]
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	bf08      	it	eq
 8006686:	6031      	streq	r1, [r6, #0]
 8006688:	5162      	str	r2, [r4, r5]
 800668a:	604b      	str	r3, [r1, #4]
 800668c:	4638      	mov	r0, r7
 800668e:	f104 060b 	add.w	r6, r4, #11
 8006692:	f000 fbbd 	bl	8006e10 <__malloc_unlock>
 8006696:	f026 0607 	bic.w	r6, r6, #7
 800669a:	1d23      	adds	r3, r4, #4
 800669c:	1af2      	subs	r2, r6, r3
 800669e:	d0b6      	beq.n	800660e <_malloc_r+0x22>
 80066a0:	1b9b      	subs	r3, r3, r6
 80066a2:	50a3      	str	r3, [r4, r2]
 80066a4:	e7b3      	b.n	800660e <_malloc_r+0x22>
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	42a3      	cmp	r3, r4
 80066aa:	bf0c      	ite	eq
 80066ac:	6032      	streq	r2, [r6, #0]
 80066ae:	605a      	strne	r2, [r3, #4]
 80066b0:	e7ec      	b.n	800668c <_malloc_r+0xa0>
 80066b2:	4623      	mov	r3, r4
 80066b4:	6864      	ldr	r4, [r4, #4]
 80066b6:	e7b2      	b.n	800661e <_malloc_r+0x32>
 80066b8:	4634      	mov	r4, r6
 80066ba:	6876      	ldr	r6, [r6, #4]
 80066bc:	e7b9      	b.n	8006632 <_malloc_r+0x46>
 80066be:	230c      	movs	r3, #12
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	4638      	mov	r0, r7
 80066c4:	f000 fba4 	bl	8006e10 <__malloc_unlock>
 80066c8:	e7a1      	b.n	800660e <_malloc_r+0x22>
 80066ca:	6025      	str	r5, [r4, #0]
 80066cc:	e7de      	b.n	800668c <_malloc_r+0xa0>
 80066ce:	bf00      	nop
 80066d0:	24000240 	.word	0x24000240

080066d4 <__sfputc_r>:
 80066d4:	6893      	ldr	r3, [r2, #8]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	b410      	push	{r4}
 80066dc:	6093      	str	r3, [r2, #8]
 80066de:	da08      	bge.n	80066f2 <__sfputc_r+0x1e>
 80066e0:	6994      	ldr	r4, [r2, #24]
 80066e2:	42a3      	cmp	r3, r4
 80066e4:	db01      	blt.n	80066ea <__sfputc_r+0x16>
 80066e6:	290a      	cmp	r1, #10
 80066e8:	d103      	bne.n	80066f2 <__sfputc_r+0x1e>
 80066ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ee:	f7ff bc31 	b.w	8005f54 <__swbuf_r>
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	1c58      	adds	r0, r3, #1
 80066f6:	6010      	str	r0, [r2, #0]
 80066f8:	7019      	strb	r1, [r3, #0]
 80066fa:	4608      	mov	r0, r1
 80066fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006700:	4770      	bx	lr

08006702 <__sfputs_r>:
 8006702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006704:	4606      	mov	r6, r0
 8006706:	460f      	mov	r7, r1
 8006708:	4614      	mov	r4, r2
 800670a:	18d5      	adds	r5, r2, r3
 800670c:	42ac      	cmp	r4, r5
 800670e:	d101      	bne.n	8006714 <__sfputs_r+0x12>
 8006710:	2000      	movs	r0, #0
 8006712:	e007      	b.n	8006724 <__sfputs_r+0x22>
 8006714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006718:	463a      	mov	r2, r7
 800671a:	4630      	mov	r0, r6
 800671c:	f7ff ffda 	bl	80066d4 <__sfputc_r>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d1f3      	bne.n	800670c <__sfputs_r+0xa>
 8006724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006728 <_vfiprintf_r>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	460d      	mov	r5, r1
 800672e:	b09d      	sub	sp, #116	; 0x74
 8006730:	4614      	mov	r4, r2
 8006732:	4698      	mov	r8, r3
 8006734:	4606      	mov	r6, r0
 8006736:	b118      	cbz	r0, 8006740 <_vfiprintf_r+0x18>
 8006738:	6983      	ldr	r3, [r0, #24]
 800673a:	b90b      	cbnz	r3, 8006740 <_vfiprintf_r+0x18>
 800673c:	f7ff fde4 	bl	8006308 <__sinit>
 8006740:	4b89      	ldr	r3, [pc, #548]	; (8006968 <_vfiprintf_r+0x240>)
 8006742:	429d      	cmp	r5, r3
 8006744:	d11b      	bne.n	800677e <_vfiprintf_r+0x56>
 8006746:	6875      	ldr	r5, [r6, #4]
 8006748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800674a:	07d9      	lsls	r1, r3, #31
 800674c:	d405      	bmi.n	800675a <_vfiprintf_r+0x32>
 800674e:	89ab      	ldrh	r3, [r5, #12]
 8006750:	059a      	lsls	r2, r3, #22
 8006752:	d402      	bmi.n	800675a <_vfiprintf_r+0x32>
 8006754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006756:	f7ff fe75 	bl	8006444 <__retarget_lock_acquire_recursive>
 800675a:	89ab      	ldrh	r3, [r5, #12]
 800675c:	071b      	lsls	r3, r3, #28
 800675e:	d501      	bpl.n	8006764 <_vfiprintf_r+0x3c>
 8006760:	692b      	ldr	r3, [r5, #16]
 8006762:	b9eb      	cbnz	r3, 80067a0 <_vfiprintf_r+0x78>
 8006764:	4629      	mov	r1, r5
 8006766:	4630      	mov	r0, r6
 8006768:	f7ff fc46 	bl	8005ff8 <__swsetup_r>
 800676c:	b1c0      	cbz	r0, 80067a0 <_vfiprintf_r+0x78>
 800676e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006770:	07dc      	lsls	r4, r3, #31
 8006772:	d50e      	bpl.n	8006792 <_vfiprintf_r+0x6a>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b01d      	add	sp, #116	; 0x74
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	4b7b      	ldr	r3, [pc, #492]	; (800696c <_vfiprintf_r+0x244>)
 8006780:	429d      	cmp	r5, r3
 8006782:	d101      	bne.n	8006788 <_vfiprintf_r+0x60>
 8006784:	68b5      	ldr	r5, [r6, #8]
 8006786:	e7df      	b.n	8006748 <_vfiprintf_r+0x20>
 8006788:	4b79      	ldr	r3, [pc, #484]	; (8006970 <_vfiprintf_r+0x248>)
 800678a:	429d      	cmp	r5, r3
 800678c:	bf08      	it	eq
 800678e:	68f5      	ldreq	r5, [r6, #12]
 8006790:	e7da      	b.n	8006748 <_vfiprintf_r+0x20>
 8006792:	89ab      	ldrh	r3, [r5, #12]
 8006794:	0598      	lsls	r0, r3, #22
 8006796:	d4ed      	bmi.n	8006774 <_vfiprintf_r+0x4c>
 8006798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679a:	f7ff fe54 	bl	8006446 <__retarget_lock_release_recursive>
 800679e:	e7e9      	b.n	8006774 <_vfiprintf_r+0x4c>
 80067a0:	2300      	movs	r3, #0
 80067a2:	9309      	str	r3, [sp, #36]	; 0x24
 80067a4:	2320      	movs	r3, #32
 80067a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ae:	2330      	movs	r3, #48	; 0x30
 80067b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006974 <_vfiprintf_r+0x24c>
 80067b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067b8:	f04f 0901 	mov.w	r9, #1
 80067bc:	4623      	mov	r3, r4
 80067be:	469a      	mov	sl, r3
 80067c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c4:	b10a      	cbz	r2, 80067ca <_vfiprintf_r+0xa2>
 80067c6:	2a25      	cmp	r2, #37	; 0x25
 80067c8:	d1f9      	bne.n	80067be <_vfiprintf_r+0x96>
 80067ca:	ebba 0b04 	subs.w	fp, sl, r4
 80067ce:	d00b      	beq.n	80067e8 <_vfiprintf_r+0xc0>
 80067d0:	465b      	mov	r3, fp
 80067d2:	4622      	mov	r2, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ff93 	bl	8006702 <__sfputs_r>
 80067dc:	3001      	adds	r0, #1
 80067de:	f000 80aa 	beq.w	8006936 <_vfiprintf_r+0x20e>
 80067e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e4:	445a      	add	r2, fp
 80067e6:	9209      	str	r2, [sp, #36]	; 0x24
 80067e8:	f89a 3000 	ldrb.w	r3, [sl]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80a2 	beq.w	8006936 <_vfiprintf_r+0x20e>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f04f 32ff 	mov.w	r2, #4294967295
 80067f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067fc:	f10a 0a01 	add.w	sl, sl, #1
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	9307      	str	r3, [sp, #28]
 8006804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006808:	931a      	str	r3, [sp, #104]	; 0x68
 800680a:	4654      	mov	r4, sl
 800680c:	2205      	movs	r2, #5
 800680e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006812:	4858      	ldr	r0, [pc, #352]	; (8006974 <_vfiprintf_r+0x24c>)
 8006814:	f7f9 fd64 	bl	80002e0 <memchr>
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	b9d8      	cbnz	r0, 8006854 <_vfiprintf_r+0x12c>
 800681c:	06d1      	lsls	r1, r2, #27
 800681e:	bf44      	itt	mi
 8006820:	2320      	movmi	r3, #32
 8006822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006826:	0713      	lsls	r3, r2, #28
 8006828:	bf44      	itt	mi
 800682a:	232b      	movmi	r3, #43	; 0x2b
 800682c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006830:	f89a 3000 	ldrb.w	r3, [sl]
 8006834:	2b2a      	cmp	r3, #42	; 0x2a
 8006836:	d015      	beq.n	8006864 <_vfiprintf_r+0x13c>
 8006838:	9a07      	ldr	r2, [sp, #28]
 800683a:	4654      	mov	r4, sl
 800683c:	2000      	movs	r0, #0
 800683e:	f04f 0c0a 	mov.w	ip, #10
 8006842:	4621      	mov	r1, r4
 8006844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006848:	3b30      	subs	r3, #48	; 0x30
 800684a:	2b09      	cmp	r3, #9
 800684c:	d94e      	bls.n	80068ec <_vfiprintf_r+0x1c4>
 800684e:	b1b0      	cbz	r0, 800687e <_vfiprintf_r+0x156>
 8006850:	9207      	str	r2, [sp, #28]
 8006852:	e014      	b.n	800687e <_vfiprintf_r+0x156>
 8006854:	eba0 0308 	sub.w	r3, r0, r8
 8006858:	fa09 f303 	lsl.w	r3, r9, r3
 800685c:	4313      	orrs	r3, r2
 800685e:	9304      	str	r3, [sp, #16]
 8006860:	46a2      	mov	sl, r4
 8006862:	e7d2      	b.n	800680a <_vfiprintf_r+0xe2>
 8006864:	9b03      	ldr	r3, [sp, #12]
 8006866:	1d19      	adds	r1, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	9103      	str	r1, [sp, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	bfbb      	ittet	lt
 8006870:	425b      	neglt	r3, r3
 8006872:	f042 0202 	orrlt.w	r2, r2, #2
 8006876:	9307      	strge	r3, [sp, #28]
 8006878:	9307      	strlt	r3, [sp, #28]
 800687a:	bfb8      	it	lt
 800687c:	9204      	strlt	r2, [sp, #16]
 800687e:	7823      	ldrb	r3, [r4, #0]
 8006880:	2b2e      	cmp	r3, #46	; 0x2e
 8006882:	d10c      	bne.n	800689e <_vfiprintf_r+0x176>
 8006884:	7863      	ldrb	r3, [r4, #1]
 8006886:	2b2a      	cmp	r3, #42	; 0x2a
 8006888:	d135      	bne.n	80068f6 <_vfiprintf_r+0x1ce>
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	1d1a      	adds	r2, r3, #4
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	9203      	str	r2, [sp, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	bfb8      	it	lt
 8006896:	f04f 33ff 	movlt.w	r3, #4294967295
 800689a:	3402      	adds	r4, #2
 800689c:	9305      	str	r3, [sp, #20]
 800689e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006984 <_vfiprintf_r+0x25c>
 80068a2:	7821      	ldrb	r1, [r4, #0]
 80068a4:	2203      	movs	r2, #3
 80068a6:	4650      	mov	r0, sl
 80068a8:	f7f9 fd1a 	bl	80002e0 <memchr>
 80068ac:	b140      	cbz	r0, 80068c0 <_vfiprintf_r+0x198>
 80068ae:	2340      	movs	r3, #64	; 0x40
 80068b0:	eba0 000a 	sub.w	r0, r0, sl
 80068b4:	fa03 f000 	lsl.w	r0, r3, r0
 80068b8:	9b04      	ldr	r3, [sp, #16]
 80068ba:	4303      	orrs	r3, r0
 80068bc:	3401      	adds	r4, #1
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c4:	482c      	ldr	r0, [pc, #176]	; (8006978 <_vfiprintf_r+0x250>)
 80068c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ca:	2206      	movs	r2, #6
 80068cc:	f7f9 fd08 	bl	80002e0 <memchr>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d03f      	beq.n	8006954 <_vfiprintf_r+0x22c>
 80068d4:	4b29      	ldr	r3, [pc, #164]	; (800697c <_vfiprintf_r+0x254>)
 80068d6:	bb1b      	cbnz	r3, 8006920 <_vfiprintf_r+0x1f8>
 80068d8:	9b03      	ldr	r3, [sp, #12]
 80068da:	3307      	adds	r3, #7
 80068dc:	f023 0307 	bic.w	r3, r3, #7
 80068e0:	3308      	adds	r3, #8
 80068e2:	9303      	str	r3, [sp, #12]
 80068e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e6:	443b      	add	r3, r7
 80068e8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ea:	e767      	b.n	80067bc <_vfiprintf_r+0x94>
 80068ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80068f0:	460c      	mov	r4, r1
 80068f2:	2001      	movs	r0, #1
 80068f4:	e7a5      	b.n	8006842 <_vfiprintf_r+0x11a>
 80068f6:	2300      	movs	r3, #0
 80068f8:	3401      	adds	r4, #1
 80068fa:	9305      	str	r3, [sp, #20]
 80068fc:	4619      	mov	r1, r3
 80068fe:	f04f 0c0a 	mov.w	ip, #10
 8006902:	4620      	mov	r0, r4
 8006904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006908:	3a30      	subs	r2, #48	; 0x30
 800690a:	2a09      	cmp	r2, #9
 800690c:	d903      	bls.n	8006916 <_vfiprintf_r+0x1ee>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0c5      	beq.n	800689e <_vfiprintf_r+0x176>
 8006912:	9105      	str	r1, [sp, #20]
 8006914:	e7c3      	b.n	800689e <_vfiprintf_r+0x176>
 8006916:	fb0c 2101 	mla	r1, ip, r1, r2
 800691a:	4604      	mov	r4, r0
 800691c:	2301      	movs	r3, #1
 800691e:	e7f0      	b.n	8006902 <_vfiprintf_r+0x1da>
 8006920:	ab03      	add	r3, sp, #12
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	462a      	mov	r2, r5
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <_vfiprintf_r+0x258>)
 8006928:	a904      	add	r1, sp, #16
 800692a:	4630      	mov	r0, r6
 800692c:	f3af 8000 	nop.w
 8006930:	4607      	mov	r7, r0
 8006932:	1c78      	adds	r0, r7, #1
 8006934:	d1d6      	bne.n	80068e4 <_vfiprintf_r+0x1bc>
 8006936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006938:	07d9      	lsls	r1, r3, #31
 800693a:	d405      	bmi.n	8006948 <_vfiprintf_r+0x220>
 800693c:	89ab      	ldrh	r3, [r5, #12]
 800693e:	059a      	lsls	r2, r3, #22
 8006940:	d402      	bmi.n	8006948 <_vfiprintf_r+0x220>
 8006942:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006944:	f7ff fd7f 	bl	8006446 <__retarget_lock_release_recursive>
 8006948:	89ab      	ldrh	r3, [r5, #12]
 800694a:	065b      	lsls	r3, r3, #25
 800694c:	f53f af12 	bmi.w	8006774 <_vfiprintf_r+0x4c>
 8006950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006952:	e711      	b.n	8006778 <_vfiprintf_r+0x50>
 8006954:	ab03      	add	r3, sp, #12
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	462a      	mov	r2, r5
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <_vfiprintf_r+0x258>)
 800695c:	a904      	add	r1, sp, #16
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f880 	bl	8006a64 <_printf_i>
 8006964:	e7e4      	b.n	8006930 <_vfiprintf_r+0x208>
 8006966:	bf00      	nop
 8006968:	08006f64 	.word	0x08006f64
 800696c:	08006f84 	.word	0x08006f84
 8006970:	08006f44 	.word	0x08006f44
 8006974:	08006fa4 	.word	0x08006fa4
 8006978:	08006fae 	.word	0x08006fae
 800697c:	00000000 	.word	0x00000000
 8006980:	08006703 	.word	0x08006703
 8006984:	08006faa 	.word	0x08006faa

08006988 <_printf_common>:
 8006988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800698c:	4616      	mov	r6, r2
 800698e:	4699      	mov	r9, r3
 8006990:	688a      	ldr	r2, [r1, #8]
 8006992:	690b      	ldr	r3, [r1, #16]
 8006994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006998:	4293      	cmp	r3, r2
 800699a:	bfb8      	it	lt
 800699c:	4613      	movlt	r3, r2
 800699e:	6033      	str	r3, [r6, #0]
 80069a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069a4:	4607      	mov	r7, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	b10a      	cbz	r2, 80069ae <_printf_common+0x26>
 80069aa:	3301      	adds	r3, #1
 80069ac:	6033      	str	r3, [r6, #0]
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	0699      	lsls	r1, r3, #26
 80069b2:	bf42      	ittt	mi
 80069b4:	6833      	ldrmi	r3, [r6, #0]
 80069b6:	3302      	addmi	r3, #2
 80069b8:	6033      	strmi	r3, [r6, #0]
 80069ba:	6825      	ldr	r5, [r4, #0]
 80069bc:	f015 0506 	ands.w	r5, r5, #6
 80069c0:	d106      	bne.n	80069d0 <_printf_common+0x48>
 80069c2:	f104 0a19 	add.w	sl, r4, #25
 80069c6:	68e3      	ldr	r3, [r4, #12]
 80069c8:	6832      	ldr	r2, [r6, #0]
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	42ab      	cmp	r3, r5
 80069ce:	dc26      	bgt.n	8006a1e <_printf_common+0x96>
 80069d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d4:	1e13      	subs	r3, r2, #0
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	bf18      	it	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	0692      	lsls	r2, r2, #26
 80069de:	d42b      	bmi.n	8006a38 <_printf_common+0xb0>
 80069e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e4:	4649      	mov	r1, r9
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c0      	blx	r8
 80069ea:	3001      	adds	r0, #1
 80069ec:	d01e      	beq.n	8006a2c <_printf_common+0xa4>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	68e5      	ldr	r5, [r4, #12]
 80069f2:	6832      	ldr	r2, [r6, #0]
 80069f4:	f003 0306 	and.w	r3, r3, #6
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	bf08      	it	eq
 80069fc:	1aad      	subeq	r5, r5, r2
 80069fe:	68a3      	ldr	r3, [r4, #8]
 8006a00:	6922      	ldr	r2, [r4, #16]
 8006a02:	bf0c      	ite	eq
 8006a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a08:	2500      	movne	r5, #0
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	bfc4      	itt	gt
 8006a0e:	1a9b      	subgt	r3, r3, r2
 8006a10:	18ed      	addgt	r5, r5, r3
 8006a12:	2600      	movs	r6, #0
 8006a14:	341a      	adds	r4, #26
 8006a16:	42b5      	cmp	r5, r6
 8006a18:	d11a      	bne.n	8006a50 <_printf_common+0xc8>
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	e008      	b.n	8006a30 <_printf_common+0xa8>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4652      	mov	r2, sl
 8006a22:	4649      	mov	r1, r9
 8006a24:	4638      	mov	r0, r7
 8006a26:	47c0      	blx	r8
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d103      	bne.n	8006a34 <_printf_common+0xac>
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a34:	3501      	adds	r5, #1
 8006a36:	e7c6      	b.n	80069c6 <_printf_common+0x3e>
 8006a38:	18e1      	adds	r1, r4, r3
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	2030      	movs	r0, #48	; 0x30
 8006a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a42:	4422      	add	r2, r4
 8006a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	e7c7      	b.n	80069e0 <_printf_common+0x58>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4622      	mov	r2, r4
 8006a54:	4649      	mov	r1, r9
 8006a56:	4638      	mov	r0, r7
 8006a58:	47c0      	blx	r8
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d0e6      	beq.n	8006a2c <_printf_common+0xa4>
 8006a5e:	3601      	adds	r6, #1
 8006a60:	e7d9      	b.n	8006a16 <_printf_common+0x8e>
	...

08006a64 <_printf_i>:
 8006a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a68:	7e0f      	ldrb	r7, [r1, #24]
 8006a6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a6c:	2f78      	cmp	r7, #120	; 0x78
 8006a6e:	4691      	mov	r9, r2
 8006a70:	4680      	mov	r8, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	469a      	mov	sl, r3
 8006a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a7a:	d807      	bhi.n	8006a8c <_printf_i+0x28>
 8006a7c:	2f62      	cmp	r7, #98	; 0x62
 8006a7e:	d80a      	bhi.n	8006a96 <_printf_i+0x32>
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	f000 80d8 	beq.w	8006c36 <_printf_i+0x1d2>
 8006a86:	2f58      	cmp	r7, #88	; 0x58
 8006a88:	f000 80a3 	beq.w	8006bd2 <_printf_i+0x16e>
 8006a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a94:	e03a      	b.n	8006b0c <_printf_i+0xa8>
 8006a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a9a:	2b15      	cmp	r3, #21
 8006a9c:	d8f6      	bhi.n	8006a8c <_printf_i+0x28>
 8006a9e:	a101      	add	r1, pc, #4	; (adr r1, 8006aa4 <_printf_i+0x40>)
 8006aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa4:	08006afd 	.word	0x08006afd
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006a8d 	.word	0x08006a8d
 8006ab0:	08006a8d 	.word	0x08006a8d
 8006ab4:	08006a8d 	.word	0x08006a8d
 8006ab8:	08006a8d 	.word	0x08006a8d
 8006abc:	08006b11 	.word	0x08006b11
 8006ac0:	08006a8d 	.word	0x08006a8d
 8006ac4:	08006a8d 	.word	0x08006a8d
 8006ac8:	08006a8d 	.word	0x08006a8d
 8006acc:	08006a8d 	.word	0x08006a8d
 8006ad0:	08006c1d 	.word	0x08006c1d
 8006ad4:	08006b41 	.word	0x08006b41
 8006ad8:	08006bff 	.word	0x08006bff
 8006adc:	08006a8d 	.word	0x08006a8d
 8006ae0:	08006a8d 	.word	0x08006a8d
 8006ae4:	08006c3f 	.word	0x08006c3f
 8006ae8:	08006a8d 	.word	0x08006a8d
 8006aec:	08006b41 	.word	0x08006b41
 8006af0:	08006a8d 	.word	0x08006a8d
 8006af4:	08006a8d 	.word	0x08006a8d
 8006af8:	08006c07 	.word	0x08006c07
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	602a      	str	r2, [r5, #0]
 8006b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0a3      	b.n	8006c58 <_printf_i+0x1f4>
 8006b10:	6820      	ldr	r0, [r4, #0]
 8006b12:	6829      	ldr	r1, [r5, #0]
 8006b14:	0606      	lsls	r6, r0, #24
 8006b16:	f101 0304 	add.w	r3, r1, #4
 8006b1a:	d50a      	bpl.n	8006b32 <_printf_i+0xce>
 8006b1c:	680e      	ldr	r6, [r1, #0]
 8006b1e:	602b      	str	r3, [r5, #0]
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	da03      	bge.n	8006b2c <_printf_i+0xc8>
 8006b24:	232d      	movs	r3, #45	; 0x2d
 8006b26:	4276      	negs	r6, r6
 8006b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2c:	485e      	ldr	r0, [pc, #376]	; (8006ca8 <_printf_i+0x244>)
 8006b2e:	230a      	movs	r3, #10
 8006b30:	e019      	b.n	8006b66 <_printf_i+0x102>
 8006b32:	680e      	ldr	r6, [r1, #0]
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b3a:	bf18      	it	ne
 8006b3c:	b236      	sxthne	r6, r6
 8006b3e:	e7ef      	b.n	8006b20 <_printf_i+0xbc>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	6820      	ldr	r0, [r4, #0]
 8006b44:	1d19      	adds	r1, r3, #4
 8006b46:	6029      	str	r1, [r5, #0]
 8006b48:	0601      	lsls	r1, r0, #24
 8006b4a:	d501      	bpl.n	8006b50 <_printf_i+0xec>
 8006b4c:	681e      	ldr	r6, [r3, #0]
 8006b4e:	e002      	b.n	8006b56 <_printf_i+0xf2>
 8006b50:	0646      	lsls	r6, r0, #25
 8006b52:	d5fb      	bpl.n	8006b4c <_printf_i+0xe8>
 8006b54:	881e      	ldrh	r6, [r3, #0]
 8006b56:	4854      	ldr	r0, [pc, #336]	; (8006ca8 <_printf_i+0x244>)
 8006b58:	2f6f      	cmp	r7, #111	; 0x6f
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2308      	moveq	r3, #8
 8006b5e:	230a      	movne	r3, #10
 8006b60:	2100      	movs	r1, #0
 8006b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b66:	6865      	ldr	r5, [r4, #4]
 8006b68:	60a5      	str	r5, [r4, #8]
 8006b6a:	2d00      	cmp	r5, #0
 8006b6c:	bfa2      	ittt	ge
 8006b6e:	6821      	ldrge	r1, [r4, #0]
 8006b70:	f021 0104 	bicge.w	r1, r1, #4
 8006b74:	6021      	strge	r1, [r4, #0]
 8006b76:	b90e      	cbnz	r6, 8006b7c <_printf_i+0x118>
 8006b78:	2d00      	cmp	r5, #0
 8006b7a:	d04d      	beq.n	8006c18 <_printf_i+0x1b4>
 8006b7c:	4615      	mov	r5, r2
 8006b7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b82:	fb03 6711 	mls	r7, r3, r1, r6
 8006b86:	5dc7      	ldrb	r7, [r0, r7]
 8006b88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b8c:	4637      	mov	r7, r6
 8006b8e:	42bb      	cmp	r3, r7
 8006b90:	460e      	mov	r6, r1
 8006b92:	d9f4      	bls.n	8006b7e <_printf_i+0x11a>
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d10b      	bne.n	8006bb0 <_printf_i+0x14c>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	07de      	lsls	r6, r3, #31
 8006b9c:	d508      	bpl.n	8006bb0 <_printf_i+0x14c>
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	6861      	ldr	r1, [r4, #4]
 8006ba2:	4299      	cmp	r1, r3
 8006ba4:	bfde      	ittt	le
 8006ba6:	2330      	movle	r3, #48	; 0x30
 8006ba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bb0:	1b52      	subs	r2, r2, r5
 8006bb2:	6122      	str	r2, [r4, #16]
 8006bb4:	f8cd a000 	str.w	sl, [sp]
 8006bb8:	464b      	mov	r3, r9
 8006bba:	aa03      	add	r2, sp, #12
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	f7ff fee2 	bl	8006988 <_printf_common>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d14c      	bne.n	8006c62 <_printf_i+0x1fe>
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bcc:	b004      	add	sp, #16
 8006bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd2:	4835      	ldr	r0, [pc, #212]	; (8006ca8 <_printf_i+0x244>)
 8006bd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bd8:	6829      	ldr	r1, [r5, #0]
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006be0:	6029      	str	r1, [r5, #0]
 8006be2:	061d      	lsls	r5, r3, #24
 8006be4:	d514      	bpl.n	8006c10 <_printf_i+0x1ac>
 8006be6:	07df      	lsls	r7, r3, #31
 8006be8:	bf44      	itt	mi
 8006bea:	f043 0320 	orrmi.w	r3, r3, #32
 8006bee:	6023      	strmi	r3, [r4, #0]
 8006bf0:	b91e      	cbnz	r6, 8006bfa <_printf_i+0x196>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	f023 0320 	bic.w	r3, r3, #32
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	2310      	movs	r3, #16
 8006bfc:	e7b0      	b.n	8006b60 <_printf_i+0xfc>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	f043 0320 	orr.w	r3, r3, #32
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	2378      	movs	r3, #120	; 0x78
 8006c08:	4828      	ldr	r0, [pc, #160]	; (8006cac <_printf_i+0x248>)
 8006c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c0e:	e7e3      	b.n	8006bd8 <_printf_i+0x174>
 8006c10:	0659      	lsls	r1, r3, #25
 8006c12:	bf48      	it	mi
 8006c14:	b2b6      	uxthmi	r6, r6
 8006c16:	e7e6      	b.n	8006be6 <_printf_i+0x182>
 8006c18:	4615      	mov	r5, r2
 8006c1a:	e7bb      	b.n	8006b94 <_printf_i+0x130>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	6826      	ldr	r6, [r4, #0]
 8006c20:	6961      	ldr	r1, [r4, #20]
 8006c22:	1d18      	adds	r0, r3, #4
 8006c24:	6028      	str	r0, [r5, #0]
 8006c26:	0635      	lsls	r5, r6, #24
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	d501      	bpl.n	8006c30 <_printf_i+0x1cc>
 8006c2c:	6019      	str	r1, [r3, #0]
 8006c2e:	e002      	b.n	8006c36 <_printf_i+0x1d2>
 8006c30:	0670      	lsls	r0, r6, #25
 8006c32:	d5fb      	bpl.n	8006c2c <_printf_i+0x1c8>
 8006c34:	8019      	strh	r1, [r3, #0]
 8006c36:	2300      	movs	r3, #0
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	4615      	mov	r5, r2
 8006c3c:	e7ba      	b.n	8006bb4 <_printf_i+0x150>
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	1d1a      	adds	r2, r3, #4
 8006c42:	602a      	str	r2, [r5, #0]
 8006c44:	681d      	ldr	r5, [r3, #0]
 8006c46:	6862      	ldr	r2, [r4, #4]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7f9 fb48 	bl	80002e0 <memchr>
 8006c50:	b108      	cbz	r0, 8006c56 <_printf_i+0x1f2>
 8006c52:	1b40      	subs	r0, r0, r5
 8006c54:	6060      	str	r0, [r4, #4]
 8006c56:	6863      	ldr	r3, [r4, #4]
 8006c58:	6123      	str	r3, [r4, #16]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c60:	e7a8      	b.n	8006bb4 <_printf_i+0x150>
 8006c62:	6923      	ldr	r3, [r4, #16]
 8006c64:	462a      	mov	r2, r5
 8006c66:	4649      	mov	r1, r9
 8006c68:	4640      	mov	r0, r8
 8006c6a:	47d0      	blx	sl
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d0ab      	beq.n	8006bc8 <_printf_i+0x164>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	079b      	lsls	r3, r3, #30
 8006c74:	d413      	bmi.n	8006c9e <_printf_i+0x23a>
 8006c76:	68e0      	ldr	r0, [r4, #12]
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	4298      	cmp	r0, r3
 8006c7c:	bfb8      	it	lt
 8006c7e:	4618      	movlt	r0, r3
 8006c80:	e7a4      	b.n	8006bcc <_printf_i+0x168>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4632      	mov	r2, r6
 8006c86:	4649      	mov	r1, r9
 8006c88:	4640      	mov	r0, r8
 8006c8a:	47d0      	blx	sl
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d09b      	beq.n	8006bc8 <_printf_i+0x164>
 8006c90:	3501      	adds	r5, #1
 8006c92:	68e3      	ldr	r3, [r4, #12]
 8006c94:	9903      	ldr	r1, [sp, #12]
 8006c96:	1a5b      	subs	r3, r3, r1
 8006c98:	42ab      	cmp	r3, r5
 8006c9a:	dcf2      	bgt.n	8006c82 <_printf_i+0x21e>
 8006c9c:	e7eb      	b.n	8006c76 <_printf_i+0x212>
 8006c9e:	2500      	movs	r5, #0
 8006ca0:	f104 0619 	add.w	r6, r4, #25
 8006ca4:	e7f5      	b.n	8006c92 <_printf_i+0x22e>
 8006ca6:	bf00      	nop
 8006ca8:	08006fb5 	.word	0x08006fb5
 8006cac:	08006fc6 	.word	0x08006fc6

08006cb0 <_sbrk_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_sbrk_r+0x1c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	f7fa f9c8 	bl	8001050 <_sbrk>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_sbrk_r+0x1a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_sbrk_r+0x1a>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	24000248 	.word	0x24000248

08006cd0 <__sread>:
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd8:	f000 f8a0 	bl	8006e1c <_read_r>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	bfab      	itete	ge
 8006ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce4:	181b      	addge	r3, r3, r0
 8006ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cea:	bfac      	ite	ge
 8006cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cee:	81a3      	strhlt	r3, [r4, #12]
 8006cf0:	bd10      	pop	{r4, pc}

08006cf2 <__swrite>:
 8006cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf6:	461f      	mov	r7, r3
 8006cf8:	898b      	ldrh	r3, [r1, #12]
 8006cfa:	05db      	lsls	r3, r3, #23
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	460c      	mov	r4, r1
 8006d00:	4616      	mov	r6, r2
 8006d02:	d505      	bpl.n	8006d10 <__swrite+0x1e>
 8006d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d08:	2302      	movs	r3, #2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f000 f868 	bl	8006de0 <_lseek_r>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	4632      	mov	r2, r6
 8006d1e:	463b      	mov	r3, r7
 8006d20:	4628      	mov	r0, r5
 8006d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d26:	f000 b817 	b.w	8006d58 <_write_r>

08006d2a <__sseek>:
 8006d2a:	b510      	push	{r4, lr}
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d32:	f000 f855 	bl	8006de0 <_lseek_r>
 8006d36:	1c43      	adds	r3, r0, #1
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	bf15      	itete	ne
 8006d3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d46:	81a3      	strheq	r3, [r4, #12]
 8006d48:	bf18      	it	ne
 8006d4a:	81a3      	strhne	r3, [r4, #12]
 8006d4c:	bd10      	pop	{r4, pc}

08006d4e <__sclose>:
 8006d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d52:	f000 b813 	b.w	8006d7c <_close_r>
	...

08006d58 <_write_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d07      	ldr	r5, [pc, #28]	; (8006d78 <_write_r+0x20>)
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	4608      	mov	r0, r1
 8006d60:	4611      	mov	r1, r2
 8006d62:	2200      	movs	r2, #0
 8006d64:	602a      	str	r2, [r5, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	f7fa f921 	bl	8000fae <_write>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d102      	bne.n	8006d76 <_write_r+0x1e>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b103      	cbz	r3, 8006d76 <_write_r+0x1e>
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	24000248 	.word	0x24000248

08006d7c <_close_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d06      	ldr	r5, [pc, #24]	; (8006d98 <_close_r+0x1c>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	f7fa f92d 	bl	8000fe6 <_close>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_close_r+0x1a>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_close_r+0x1a>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	24000248 	.word	0x24000248

08006d9c <_fstat_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d07      	ldr	r5, [pc, #28]	; (8006dbc <_fstat_r+0x20>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	4611      	mov	r1, r2
 8006da8:	602b      	str	r3, [r5, #0]
 8006daa:	f7fa f928 	bl	8000ffe <_fstat>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d102      	bne.n	8006db8 <_fstat_r+0x1c>
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	b103      	cbz	r3, 8006db8 <_fstat_r+0x1c>
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	bd38      	pop	{r3, r4, r5, pc}
 8006dba:	bf00      	nop
 8006dbc:	24000248 	.word	0x24000248

08006dc0 <_isatty_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d06      	ldr	r5, [pc, #24]	; (8006ddc <_isatty_r+0x1c>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f7fa f927 	bl	800101e <_isatty>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_isatty_r+0x1a>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_isatty_r+0x1a>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	24000248 	.word	0x24000248

08006de0 <_lseek_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d07      	ldr	r5, [pc, #28]	; (8006e00 <_lseek_r+0x20>)
 8006de4:	4604      	mov	r4, r0
 8006de6:	4608      	mov	r0, r1
 8006de8:	4611      	mov	r1, r2
 8006dea:	2200      	movs	r2, #0
 8006dec:	602a      	str	r2, [r5, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f7fa f920 	bl	8001034 <_lseek>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_lseek_r+0x1e>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_lseek_r+0x1e>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	24000248 	.word	0x24000248

08006e04 <__malloc_lock>:
 8006e04:	4801      	ldr	r0, [pc, #4]	; (8006e0c <__malloc_lock+0x8>)
 8006e06:	f7ff bb1d 	b.w	8006444 <__retarget_lock_acquire_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	2400023c 	.word	0x2400023c

08006e10 <__malloc_unlock>:
 8006e10:	4801      	ldr	r0, [pc, #4]	; (8006e18 <__malloc_unlock+0x8>)
 8006e12:	f7ff bb18 	b.w	8006446 <__retarget_lock_release_recursive>
 8006e16:	bf00      	nop
 8006e18:	2400023c 	.word	0x2400023c

08006e1c <_read_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d07      	ldr	r5, [pc, #28]	; (8006e3c <_read_r+0x20>)
 8006e20:	4604      	mov	r4, r0
 8006e22:	4608      	mov	r0, r1
 8006e24:	4611      	mov	r1, r2
 8006e26:	2200      	movs	r2, #0
 8006e28:	602a      	str	r2, [r5, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f7fa f8a2 	bl	8000f74 <_read>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_read_r+0x1e>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_read_r+0x1e>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	24000248 	.word	0x24000248

08006e40 <_init>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	bf00      	nop
 8006e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e46:	bc08      	pop	{r3}
 8006e48:	469e      	mov	lr, r3
 8006e4a:	4770      	bx	lr

08006e4c <_fini>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	bf00      	nop
 8006e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e52:	bc08      	pop	{r3}
 8006e54:	469e      	mov	lr, r3
 8006e56:	4770      	bx	lr
