
stm32H7_RNF24_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008304  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  080085a4  080085a4  000185a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf8  08008bf8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c00  08008c00  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c04  08008c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  08008c08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  24000080  08008c84  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000334  08008c84  00020334  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f5f  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b9  00000000  00000000  00035009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  000377c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00038728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b2dd  00000000  00000000  00039590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133c8  00000000  00000000  0007486d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00180faf  00000000  00000000  00087c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00208be4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004898  00000000  00000000  00208c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800858c 	.word	0x0800858c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800858c 	.word	0x0800858c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 f8a9 	bl	8002974 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f8a0 	bl	8002974 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000ac 	.word	0x240000ac
 8000840:	240000b0 	.word	0x240000b0

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f889 	bl	8002974 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f880 	bl	8002974 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000ac 	.word	0x240000ac
 8000880:	240000b2 	.word	0x240000b2

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f004 fd2e 	bl	8005308 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f004 ff18 	bl	80056ec <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000b4 	.word	0x240000b4

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f004 fd03 	bl	8005308 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f004 feee 	bl	80056ec <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000b4 	.word	0x240000b4

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 1000);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000950:	2202      	movs	r2, #2
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <NRF24_write_register+0x44>)
 8000954:	f004 fcd8 	bl	8005308 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff ff53 	bl	8000804 <NRF24_csn>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	240000b4 	.word	0x240000b4

0800096c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff ff41 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	b2db      	uxtb	r3, r3
 800098a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 1000);
 800098c:	f107 010c 	add.w	r1, r7, #12
 8000990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000994:	2201      	movs	r2, #1
 8000996:	4809      	ldr	r0, [pc, #36]	; (80009bc <NRF24_write_registerN+0x50>)
 8000998:	f004 fcb6 	bl	8005308 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 1000);
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a4:	6839      	ldr	r1, [r7, #0]
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <NRF24_write_registerN+0x50>)
 80009a8:	f004 fcae 	bl	8005308 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff ff29 	bl	8000804 <NRF24_csn>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	240000b4 	.word	0x240000b4

080009c0 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009cc:	f000 fa0c 	bl	8000de8 <NRF24_getPayloadSize>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d303      	bcc.n	80009e2 <NRF24_read_payload+0x22>
 80009da:	f000 fa05 	bl	8000de8 <NRF24_getPayloadSize>
 80009de:	4603      	mov	r3, r0
 80009e0:	e000      	b.n	80009e4 <NRF24_read_payload+0x24>
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff ff0c 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009ec:	2361      	movs	r3, #97	; 0x61
 80009ee:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 1000);
 80009f0:	f107 010e 	add.w	r1, r7, #14
 80009f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f8:	2201      	movs	r2, #1
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <NRF24_read_payload+0x60>)
 80009fc:	f004 fc84 	bl	8005308 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 1000);
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <NRF24_read_payload+0x60>)
 8000a0c:	f004 fe6e 	bl	80056ec <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fef7 	bl	8000804 <NRF24_csn>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	240000b4 	.word	0x240000b4

08000a24 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a28:	21ff      	movs	r1, #255	; 0xff
 8000a2a:	20e1      	movs	r0, #225	; 0xe1
 8000a2c:	f7ff ff7a 	bl	8000924 <NRF24_write_register>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a38:	21ff      	movs	r1, #255	; 0xff
 8000a3a:	20e2      	movs	r0, #226	; 0xe2
 8000a3c:	f7ff ff72 	bl	8000924 <NRF24_write_register>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f7ff ff1a 	bl	8000884 <NRF24_read_register>
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a54:	79fb      	ldrb	r3, [r7, #7]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a60:	b082      	sub	sp, #8
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
 8000a70:	4613      	mov	r3, r2
 8000a72:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a74:	4b66      	ldr	r3, [pc, #408]	; (8000c10 <NRF24_begin+0x1b0>)
 8000a76:	4618      	mov	r0, r3
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2288      	movs	r2, #136	; 0x88
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f006 fc12 	bl	80072a8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a84:	4a63      	ldr	r2, [pc, #396]	; (8000c14 <NRF24_begin+0x1b4>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a8a:	4a63      	ldr	r2, [pc, #396]	; (8000c18 <NRF24_begin+0x1b8>)
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a90:	4a62      	ldr	r2, [pc, #392]	; (8000c1c <NRF24_begin+0x1bc>)
 8000a92:	883b      	ldrh	r3, [r7, #0]
 8000a94:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff feb4 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fed1 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f001 fca2 	bl	80023ec <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff ff3a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000ab0:	213f      	movs	r1, #63	; 0x3f
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff ff36 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000ab8:	2103      	movs	r1, #3
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff ff32 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f7ff ff2e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000ac8:	2103      	movs	r1, #3
 8000aca:	2004      	movs	r0, #4
 8000acc:	f7ff ff2a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	2005      	movs	r0, #5
 8000ad4:	f7ff ff26 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000ad8:	210f      	movs	r1, #15
 8000ada:	2006      	movs	r0, #6
 8000adc:	f7ff ff22 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ae0:	210e      	movs	r1, #14
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f7ff ff1e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2008      	movs	r0, #8
 8000aec:	f7ff ff1a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2009      	movs	r0, #9
 8000af4:	f7ff ff16 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	733b      	strb	r3, [r7, #12]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	72fb      	strb	r3, [r7, #11]
 8000b00:	23e7      	movs	r3, #231	; 0xe7
 8000b02:	72bb      	strb	r3, [r7, #10]
 8000b04:	23e7      	movs	r3, #231	; 0xe7
 8000b06:	727b      	strb	r3, [r7, #9]
 8000b08:	23e7      	movs	r3, #231	; 0xe7
 8000b0a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2205      	movs	r2, #5
 8000b12:	4619      	mov	r1, r3
 8000b14:	200a      	movs	r0, #10
 8000b16:	f7ff ff29 	bl	800096c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	733b      	strb	r3, [r7, #12]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	72fb      	strb	r3, [r7, #11]
 8000b22:	23c2      	movs	r3, #194	; 0xc2
 8000b24:	72bb      	strb	r3, [r7, #10]
 8000b26:	23c2      	movs	r3, #194	; 0xc2
 8000b28:	727b      	strb	r3, [r7, #9]
 8000b2a:	23c2      	movs	r3, #194	; 0xc2
 8000b2c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	2205      	movs	r2, #5
 8000b34:	4619      	mov	r1, r3
 8000b36:	200b      	movs	r0, #11
 8000b38:	f7ff ff18 	bl	800096c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b3c:	21c3      	movs	r1, #195	; 0xc3
 8000b3e:	200c      	movs	r0, #12
 8000b40:	f7ff fef0 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b44:	21c4      	movs	r1, #196	; 0xc4
 8000b46:	200d      	movs	r0, #13
 8000b48:	f7ff feec 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b4c:	21c5      	movs	r1, #197	; 0xc5
 8000b4e:	200e      	movs	r0, #14
 8000b50:	f7ff fee8 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b54:	21c6      	movs	r1, #198	; 0xc6
 8000b56:	200f      	movs	r0, #15
 8000b58:	f7ff fee4 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	733b      	strb	r3, [r7, #12]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	72fb      	strb	r3, [r7, #11]
 8000b64:	23e7      	movs	r3, #231	; 0xe7
 8000b66:	72bb      	strb	r3, [r7, #10]
 8000b68:	23e7      	movs	r3, #231	; 0xe7
 8000b6a:	727b      	strb	r3, [r7, #9]
 8000b6c:	23e7      	movs	r3, #231	; 0xe7
 8000b6e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	2205      	movs	r2, #5
 8000b76:	4619      	mov	r1, r3
 8000b78:	2010      	movs	r0, #16
 8000b7a:	f7ff fef7 	bl	800096c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2011      	movs	r0, #17
 8000b82:	f7ff fecf 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2012      	movs	r0, #18
 8000b8a:	f7ff fecb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2013      	movs	r0, #19
 8000b92:	f7ff fec7 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2014      	movs	r0, #20
 8000b9a:	f7ff fec3 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2015      	movs	r0, #21
 8000ba2:	f7ff febf 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2016      	movs	r0, #22
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000bae:	f000 fa7d 	bl	80010ac <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	201c      	movs	r0, #28
 8000bb6:	f7ff feb5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	201d      	movs	r0, #29
 8000bbe:	f7ff feb1 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bc2:	f000 fa8d 	bl	80010e0 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	200f      	movs	r0, #15
 8000bca:	f000 f8c5 	bl	8000d58 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f97d 	bl	8000ece <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 f9b3 	bl	8000f40 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f000 f9f6 	bl	8000fcc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000be0:	f000 f948 	bl	8000e74 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000be4:	2020      	movs	r0, #32
 8000be6:	f000 f8e7 	bl	8000db8 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bea:	f000 fa56 	bl	800109a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000bee:	204c      	movs	r0, #76	; 0x4c
 8000bf0:	f000 f8cd 	bl	8000d8e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000bf4:	f7ff ff16 	bl	8000a24 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bf8:	f7ff ff1c 	bl	8000a34 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bfc:	f000 fa0e 	bl	800101c <NRF24_powerDown>

}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c0a:	b002      	add	sp, #8
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	240000b4 	.word	0x240000b4
 8000c14:	240000ac 	.word	0x240000ac
 8000c18:	240000b0 	.word	0x240000b0
 8000c1c:	240000b2 	.word	0x240000b2

08000c20 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fe2d 	bl	8000884 <NRF24_read_register>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f043 0303 	orr.w	r3, r3, #3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4619      	mov	r1, r3
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fe75 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <NRF24_startListening+0x48>)
 8000c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	d004      	beq.n	8000c4e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c44:	2205      	movs	r2, #5
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <NRF24_startListening+0x48>)
 8000c48:	200a      	movs	r0, #10
 8000c4a:	f7ff fe8f 	bl	800096c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c4e:	f7ff fee9 	bl	8000a24 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c52:	f7ff feef 	bl	8000a34 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fdf4 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c5c:	2096      	movs	r0, #150	; 0x96
 8000c5e:	f7ff fdaf 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	240000a0 	.word	0x240000a0

08000c6c <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f9e2 	bl	800103a <NRF24_availablePipe>
 8000c76:	4603      	mov	r3, r0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c88:	78fb      	ldrb	r3, [r7, #3]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fe97 	bl	80009c0 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c92:	2017      	movs	r0, #23
 8000c94:	f7ff fdf6 	bl	8000884 <NRF24_read_register>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000ca0:	f7ff fec8 	bl	8000a34 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000ca4:	f000 f8ac 	bl	8000e00 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	e9c7 2300 	strd	r2, r3, [r7]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d104      	bne.n	8000cdc <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cd6:	491c      	ldr	r1, [pc, #112]	; (8000d48 <NRF24_openReadingPipe+0x8c>)
 8000cd8:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d82d      	bhi.n	8000d3e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d808      	bhi.n	8000cfa <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <NRF24_openReadingPipe+0x90>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	4639      	mov	r1, r7
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fe3a 	bl	800096c <NRF24_write_registerN>
 8000cf8:	e007      	b.n	8000d0a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <NRF24_openReadingPipe+0x90>)
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	4639      	mov	r1, r7
 8000d02:	2201      	movs	r2, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fe31 	bl	800096c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <NRF24_openReadingPipe+0x94>)
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <NRF24_openReadingPipe+0x98>)
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fe04 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fdb1 	bl	8000884 <NRF24_read_register>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b25a      	sxtb	r2, r3
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f7ff fdf3 	bl	8000924 <NRF24_write_register>
	}

}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	240000a0 	.word	0x240000a0
 8000d4c:	08008b28 	.word	0x08008b28
 8000d50:	08008b30 	.word	0x08008b30
 8000d54:	240000a8 	.word	0x240000a8

08000d58 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	b25a      	sxtb	r2, r3
 8000d6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2004      	movs	r0, #4
 8000d82:	f7ff fdcf 	bl	8000924 <NRF24_write_register>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d98:	237f      	movs	r3, #127	; 0x7f
 8000d9a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d9c:	7bfa      	ldrb	r2, [r7, #15]
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	bf28      	it	cs
 8000da4:	4613      	movcs	r3, r2
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4619      	mov	r1, r3
 8000daa:	2005      	movs	r0, #5
 8000dac:	f7ff fdba 	bl	8000924 <NRF24_write_register>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	bf28      	it	cs
 8000dce:	4613      	movcs	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <NRF24_setPayloadSize+0x2c>)
 8000dd4:	701a      	strb	r2, [r3, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	240000a8 	.word	0x240000a8

08000de8 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	return payload_size;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <NRF24_getPayloadSize+0x14>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	240000a8 	.word	0x240000a8

08000e00 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000e04:	2060      	movs	r0, #96	; 0x60
 8000e06:	f7ff fd3d 	bl	8000884 <NRF24_read_register>
 8000e0a:	4603      	mov	r3, r0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e14:	201d      	movs	r0, #29
 8000e16:	f7ff fd35 	bl	8000884 <NRF24_read_register>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	201d      	movs	r0, #29
 8000e26:	f7ff fd7d 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e2a:	201d      	movs	r0, #29
 8000e2c:	f7ff fd2a 	bl	8000884 <NRF24_read_register>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10c      	bne.n	8000e50 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e36:	f000 f939 	bl	80010ac <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e3a:	201d      	movs	r0, #29
 8000e3c:	f7ff fd22 	bl	8000884 <NRF24_read_register>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	201d      	movs	r0, #29
 8000e4c:	f7ff fd6a 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e50:	201c      	movs	r0, #28
 8000e52:	f7ff fd17 	bl	8000884 <NRF24_read_register>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4619      	mov	r1, r3
 8000e60:	201c      	movs	r0, #28
 8000e62:	f7ff fd5f 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e66:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <NRF24_enableDynamicPayloads+0x60>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	240000a9 	.word	0x240000a9

08000e74 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e78:	201d      	movs	r0, #29
 8000e7a:	f7ff fd03 	bl	8000884 <NRF24_read_register>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f023 0304 	bic.w	r3, r3, #4
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	201d      	movs	r0, #29
 8000e8a:	f7ff fd4b 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	201c      	movs	r0, #28
 8000e92:	f7ff fd47 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e96:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <NRF24_disableDynamicPayloads+0x2c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	240000a9 	.word	0x240000a9

08000ea4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000eb4:	213f      	movs	r1, #63	; 0x3f
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff fd34 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000ebc:	e003      	b.n	8000ec6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff fd2f 	bl	8000924 <NRF24_write_register>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ed8:	2006      	movs	r0, #6
 8000eda:	f7ff fcd3 	bl	8000884 <NRF24_read_register>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f023 0306 	bic.w	r3, r3, #6
 8000ee8:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d104      	bne.n	8000efa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f043 0306 	orr.w	r3, r3, #6
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e019      	b.n	8000f2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d104      	bne.n	8000f0a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e011      	b.n	8000f2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d104      	bne.n	8000f1a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e009      	b.n	8000f2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d103      	bne.n	8000f2e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0306 	orr.w	r3, r3, #6
 8000f2c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4619      	mov	r1, r3
 8000f32:	2006      	movs	r0, #6
 8000f34:	f7ff fcf6 	bl	8000924 <NRF24_write_register>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f4e:	2006      	movs	r0, #6
 8000f50:	f7ff fc98 	bl	8000884 <NRF24_read_register>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <NRF24_setDataRate+0x88>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f64:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d107      	bne.n	8000f7c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <NRF24_setDataRate+0x88>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	73bb      	strb	r3, [r7, #14]
 8000f7a:	e00d      	b.n	8000f98 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d107      	bne.n	8000f92 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <NRF24_setDataRate+0x88>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	73bb      	strb	r3, [r7, #14]
 8000f90:	e002      	b.n	8000f98 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <NRF24_setDataRate+0x88>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2006      	movs	r0, #6
 8000f9e:	f7ff fcc1 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000fa2:	2006      	movs	r0, #6
 8000fa4:	f7ff fc6e 	bl	8000884 <NRF24_read_register>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d102      	bne.n	8000fb8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e002      	b.n	8000fbe <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <NRF24_setDataRate+0x88>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	240000aa 	.word	0x240000aa

08000fcc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fc54 	bl	8000884 <NRF24_read_register>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f023 030c 	bic.w	r3, r3, #12
 8000fe2:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00f      	beq.n	800100a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d104      	bne.n	8000ffa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e007      	b.n	800100a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	4619      	mov	r1, r3
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fc88 	bl	8000924 <NRF24_write_register>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fc2f 	bl	8000884 <NRF24_read_register>
 8001026:	4603      	mov	r3, r0
 8001028:	f023 0302 	bic.w	r3, r3, #2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4619      	mov	r1, r3
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fc77 	bl	8000924 <NRF24_write_register>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}

0800103a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001042:	f7ff fcff 	bl	8000a44 <NRF24_get_status>
 8001046:	4603      	mov	r3, r0
 8001048:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	73bb      	strb	r3, [r7, #14]

  if (result)
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d017      	beq.n	8001090 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	b2da      	uxtb	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001076:	2140      	movs	r1, #64	; 0x40
 8001078:	2007      	movs	r0, #7
 800107a:	f7ff fc53 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f003 0320 	and.w	r3, r3, #32
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001088:	2120      	movs	r1, #32
 800108a:	2007      	movs	r0, #7
 800108c:	f7ff fc4a 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001090:	7bbb      	ldrb	r3, [r7, #14]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800109e:	2170      	movs	r1, #112	; 0x70
 80010a0:	2007      	movs	r0, #7
 80010a2:	f7ff fc3f 	bl	8000924 <NRF24_write_register>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff fba6 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010b8:	2350      	movs	r3, #80	; 0x50
 80010ba:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010bc:	2373      	movs	r3, #115	; 0x73
 80010be:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	2202      	movs	r2, #2
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <NRF24_ACTIVATE_cmd+0x30>)
 80010c8:	f004 f91e 	bl	8005308 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff fb99 	bl	8000804 <NRF24_csn>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	240000b4 	.word	0x240000b4

080010e0 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b0a1      	sub	sp, #132	; 0x84
 80010e4:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	49c3      	ldr	r1, [pc, #780]	; (80013f8 <printRadioSettings+0x318>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f006 f909 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f8f2 	bl	80002e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f107 0108 	add.w	r1, r7, #8
 8001104:	230a      	movs	r3, #10
 8001106:	48bd      	ldr	r0, [pc, #756]	; (80013fc <printRadioSettings+0x31c>)
 8001108:	f004 ffed 	bl	80060e6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fbb9 	bl	8000884 <NRF24_read_register>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001124:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <printRadioSettings+0x5e>
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	49b2      	ldr	r1, [pc, #712]	; (8001400 <printRadioSettings+0x320>)
 8001136:	4618      	mov	r0, r3
 8001138:	f006 f8e4 	bl	8007304 <siprintf>
 800113c:	e00c      	b.n	8001158 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	49b0      	ldr	r1, [pc, #704]	; (8001404 <printRadioSettings+0x324>)
 8001144:	4618      	mov	r0, r3
 8001146:	f006 f8dd 	bl	8007304 <siprintf>
 800114a:	e005      	b.n	8001158 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	49ad      	ldr	r1, [pc, #692]	; (8001408 <printRadioSettings+0x328>)
 8001152:	4618      	mov	r0, r3
 8001154:	f006 f8d6 	bl	8007304 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f8bf 	bl	80002e0 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	f107 0108 	add.w	r1, r7, #8
 800116a:	230a      	movs	r3, #10
 800116c:	48a3      	ldr	r0, [pc, #652]	; (80013fc <printRadioSettings+0x31c>)
 800116e:	f004 ffba 	bl	80060e6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001172:	2001      	movs	r0, #1
 8001174:	f7ff fb86 	bl	8000884 <NRF24_read_register>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800117e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001182:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001186:	2b00      	cmp	r3, #0
 8001188:	bfcc      	ite	gt
 800118a:	2301      	movgt	r3, #1
 800118c:	2300      	movle	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001192:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001196:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800119a:	2b00      	cmp	r3, #0
 800119c:	bfcc      	ite	gt
 800119e:	2301      	movgt	r3, #1
 80011a0:	2300      	movle	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011aa:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	bfcc      	ite	gt
 80011b2:	2301      	movgt	r3, #1
 80011b4:	2300      	movle	r3, #0
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011be:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bfcc      	ite	gt
 80011c6:	2301      	movgt	r3, #1
 80011c8:	2300      	movle	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011d2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bfcc      	ite	gt
 80011da:	2301      	movgt	r3, #1
 80011dc:	2300      	movle	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfcc      	ite	gt
 80011ee:	2301      	movgt	r3, #1
 80011f0:	2300      	movle	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f107 0008 	add.w	r0, r7, #8
 80011f8:	9303      	str	r3, [sp, #12]
 80011fa:	9402      	str	r4, [sp, #8]
 80011fc:	9101      	str	r1, [sp, #4]
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	4633      	mov	r3, r6
 8001202:	462a      	mov	r2, r5
 8001204:	4981      	ldr	r1, [pc, #516]	; (800140c <printRadioSettings+0x32c>)
 8001206:	f006 f87d 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f866 	bl	80002e0 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f107 0108 	add.w	r1, r7, #8
 800121c:	230a      	movs	r3, #10
 800121e:	4877      	ldr	r0, [pc, #476]	; (80013fc <printRadioSettings+0x31c>)
 8001220:	f004 ff61 	bl	80060e6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001224:	2002      	movs	r0, #2
 8001226:	f7ff fb2d 	bl	8000884 <NRF24_read_register>
 800122a:	4603      	mov	r3, r0
 800122c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001230:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001234:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001238:	2b00      	cmp	r3, #0
 800123a:	bfcc      	ite	gt
 800123c:	2301      	movgt	r3, #1
 800123e:	2300      	movle	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001244:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001248:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800124c:	2b00      	cmp	r3, #0
 800124e:	bfcc      	ite	gt
 8001250:	2301      	movgt	r3, #1
 8001252:	2300      	movle	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001258:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800125c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001260:	2b00      	cmp	r3, #0
 8001262:	bfcc      	ite	gt
 8001264:	2301      	movgt	r3, #1
 8001266:	2300      	movle	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800126c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001270:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001274:	2b00      	cmp	r3, #0
 8001276:	bfcc      	ite	gt
 8001278:	2301      	movgt	r3, #1
 800127a:	2300      	movle	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001280:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001284:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001288:	2b00      	cmp	r3, #0
 800128a:	bfcc      	ite	gt
 800128c:	2301      	movgt	r3, #1
 800128e:	2300      	movle	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001294:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001298:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800129c:	2b00      	cmp	r3, #0
 800129e:	bfcc      	ite	gt
 80012a0:	2301      	movgt	r3, #1
 80012a2:	2300      	movle	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f107 0008 	add.w	r0, r7, #8
 80012aa:	9303      	str	r3, [sp, #12]
 80012ac:	9402      	str	r4, [sp, #8]
 80012ae:	9101      	str	r1, [sp, #4]
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	4633      	mov	r3, r6
 80012b4:	462a      	mov	r2, r5
 80012b6:	4956      	ldr	r1, [pc, #344]	; (8001410 <printRadioSettings+0x330>)
 80012b8:	f006 f824 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f80d 	bl	80002e0 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f107 0108 	add.w	r1, r7, #8
 80012ce:	230a      	movs	r3, #10
 80012d0:	484a      	ldr	r0, [pc, #296]	; (80013fc <printRadioSettings+0x31c>)
 80012d2:	f004 ff08 	bl	80060e6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012d6:	2003      	movs	r0, #3
 80012d8:	f7ff fad4 	bl	8000884 <NRF24_read_register>
 80012dc:	4603      	mov	r3, r0
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ea:	3302      	adds	r3, #2
 80012ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012f0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4946      	ldr	r1, [pc, #280]	; (8001414 <printRadioSettings+0x334>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f006 f802 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ffeb 	bl	80002e0 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f107 0108 	add.w	r1, r7, #8
 8001312:	230a      	movs	r3, #10
 8001314:	4839      	ldr	r0, [pc, #228]	; (80013fc <printRadioSettings+0x31c>)
 8001316:	f004 fee6 	bl	80060e6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800131a:	2005      	movs	r0, #5
 800131c:	f7ff fab2 	bl	8000884 <NRF24_read_register>
 8001320:	4603      	mov	r3, r0
 8001322:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001326:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800132a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4939      	ldr	r1, [pc, #228]	; (8001418 <printRadioSettings+0x338>)
 8001334:	4618      	mov	r0, r3
 8001336:	f005 ffe5 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ffce 	bl	80002e0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f107 0108 	add.w	r1, r7, #8
 800134c:	230a      	movs	r3, #10
 800134e:	482b      	ldr	r0, [pc, #172]	; (80013fc <printRadioSettings+0x31c>)
 8001350:	f004 fec9 	bl	80060e6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001354:	2006      	movs	r0, #6
 8001356:	f7ff fa95 	bl	8000884 <NRF24_read_register>
 800135a:	4603      	mov	r3, r0
 800135c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <printRadioSettings+0x29a>
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	492a      	ldr	r1, [pc, #168]	; (800141c <printRadioSettings+0x33c>)
 8001372:	4618      	mov	r0, r3
 8001374:	f005 ffc6 	bl	8007304 <siprintf>
 8001378:	e005      	b.n	8001386 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4928      	ldr	r1, [pc, #160]	; (8001420 <printRadioSettings+0x340>)
 8001380:	4618      	mov	r0, r3
 8001382:	f005 ffbf 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ffa8 	bl	80002e0 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0108 	add.w	r1, r7, #8
 8001398:	230a      	movs	r3, #10
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <printRadioSettings+0x31c>)
 800139c:	f004 fea3 	bl	80060e6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	f003 0306 	and.w	r3, r3, #6
 80013a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <printRadioSettings+0x2ec>
 80013be:	f107 0308 	add.w	r3, r7, #8
 80013c2:	4918      	ldr	r1, [pc, #96]	; (8001424 <printRadioSettings+0x344>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 ff9d 	bl	8007304 <siprintf>
 80013ca:	e03b      	b.n	8001444 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d106      	bne.n	80013e2 <printRadioSettings+0x302>
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4913      	ldr	r1, [pc, #76]	; (8001428 <printRadioSettings+0x348>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 ff92 	bl	8007304 <siprintf>
 80013e0:	e030      	b.n	8001444 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d122      	bne.n	8001430 <printRadioSettings+0x350>
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	490f      	ldr	r1, [pc, #60]	; (800142c <printRadioSettings+0x34c>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 ff87 	bl	8007304 <siprintf>
 80013f6:	e025      	b.n	8001444 <printRadioSettings+0x364>
 80013f8:	080085a4 	.word	0x080085a4
 80013fc:	2400013c 	.word	0x2400013c
 8001400:	080085d8 	.word	0x080085d8
 8001404:	080085f4 	.word	0x080085f4
 8001408:	08008610 	.word	0x08008610
 800140c:	08008624 	.word	0x08008624
 8001410:	08008668 	.word	0x08008668
 8001414:	080086b4 	.word	0x080086b4
 8001418:	080086d0 	.word	0x080086d0
 800141c:	080086e4 	.word	0x080086e4
 8001420:	080086fc 	.word	0x080086fc
 8001424:	08008714 	.word	0x08008714
 8001428:	08008728 	.word	0x08008728
 800142c:	0800873c 	.word	0x0800873c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001430:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001434:	2b03      	cmp	r3, #3
 8001436:	d105      	bne.n	8001444 <printRadioSettings+0x364>
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	49d7      	ldr	r1, [pc, #860]	; (800179c <printRadioSettings+0x6bc>)
 800143e:	4618      	mov	r0, r3
 8001440:	f005 ff60 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	4618      	mov	r0, r3
 800144a:	f7fe ff49 	bl	80002e0 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	f107 0108 	add.w	r1, r7, #8
 8001456:	230a      	movs	r3, #10
 8001458:	48d1      	ldr	r0, [pc, #836]	; (80017a0 <printRadioSettings+0x6c0>)
 800145a:	f004 fe44 	bl	80060e6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800145e:	463b      	mov	r3, r7
 8001460:	2205      	movs	r2, #5
 8001462:	4619      	mov	r1, r3
 8001464:	200a      	movs	r0, #10
 8001466:	f7ff fa35 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800146a:	793b      	ldrb	r3, [r7, #4]
 800146c:	461c      	mov	r4, r3
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	461d      	mov	r5, r3
 8001472:	78bb      	ldrb	r3, [r7, #2]
 8001474:	787a      	ldrb	r2, [r7, #1]
 8001476:	7839      	ldrb	r1, [r7, #0]
 8001478:	f107 0008 	add.w	r0, r7, #8
 800147c:	9102      	str	r1, [sp, #8]
 800147e:	9201      	str	r2, [sp, #4]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	462b      	mov	r3, r5
 8001484:	4622      	mov	r2, r4
 8001486:	49c7      	ldr	r1, [pc, #796]	; (80017a4 <printRadioSettings+0x6c4>)
 8001488:	f005 ff3c 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4618      	mov	r0, r3
 8001492:	f7fe ff25 	bl	80002e0 <strlen>
 8001496:	4603      	mov	r3, r0
 8001498:	b29a      	uxth	r2, r3
 800149a:	f107 0108 	add.w	r1, r7, #8
 800149e:	230a      	movs	r3, #10
 80014a0:	48bf      	ldr	r0, [pc, #764]	; (80017a0 <printRadioSettings+0x6c0>)
 80014a2:	f004 fe20 	bl	80060e6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80014a6:	463b      	mov	r3, r7
 80014a8:	2205      	movs	r2, #5
 80014aa:	4619      	mov	r1, r3
 80014ac:	200b      	movs	r0, #11
 80014ae:	f7ff fa11 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014b2:	793b      	ldrb	r3, [r7, #4]
 80014b4:	461c      	mov	r4, r3
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	461d      	mov	r5, r3
 80014ba:	78bb      	ldrb	r3, [r7, #2]
 80014bc:	787a      	ldrb	r2, [r7, #1]
 80014be:	7839      	ldrb	r1, [r7, #0]
 80014c0:	f107 0008 	add.w	r0, r7, #8
 80014c4:	9102      	str	r1, [sp, #8]
 80014c6:	9201      	str	r2, [sp, #4]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	462b      	mov	r3, r5
 80014cc:	4622      	mov	r2, r4
 80014ce:	49b6      	ldr	r1, [pc, #728]	; (80017a8 <printRadioSettings+0x6c8>)
 80014d0:	f005 ff18 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ff01 	bl	80002e0 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f107 0108 	add.w	r1, r7, #8
 80014e6:	230a      	movs	r3, #10
 80014e8:	48ad      	ldr	r0, [pc, #692]	; (80017a0 <printRadioSettings+0x6c0>)
 80014ea:	f004 fdfc 	bl	80060e6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014ee:	463b      	mov	r3, r7
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	200c      	movs	r0, #12
 80014f6:	f7ff f9ed 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014fa:	783b      	ldrb	r3, [r7, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	49aa      	ldr	r1, [pc, #680]	; (80017ac <printRadioSettings+0x6cc>)
 8001504:	4618      	mov	r0, r3
 8001506:	f005 fefd 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fee6 	bl	80002e0 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	b29a      	uxth	r2, r3
 8001518:	f107 0108 	add.w	r1, r7, #8
 800151c:	230a      	movs	r3, #10
 800151e:	48a0      	ldr	r0, [pc, #640]	; (80017a0 <printRadioSettings+0x6c0>)
 8001520:	f004 fde1 	bl	80060e6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001524:	463b      	mov	r3, r7
 8001526:	2201      	movs	r2, #1
 8001528:	4619      	mov	r1, r3
 800152a:	200d      	movs	r0, #13
 800152c:	f7ff f9d2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001530:	783b      	ldrb	r3, [r7, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	499d      	ldr	r1, [pc, #628]	; (80017b0 <printRadioSettings+0x6d0>)
 800153a:	4618      	mov	r0, r3
 800153c:	f005 fee2 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fecb 	bl	80002e0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	f107 0108 	add.w	r1, r7, #8
 8001552:	230a      	movs	r3, #10
 8001554:	4892      	ldr	r0, [pc, #584]	; (80017a0 <printRadioSettings+0x6c0>)
 8001556:	f004 fdc6 	bl	80060e6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800155a:	463b      	mov	r3, r7
 800155c:	2201      	movs	r2, #1
 800155e:	4619      	mov	r1, r3
 8001560:	200e      	movs	r0, #14
 8001562:	f7ff f9b7 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001566:	783b      	ldrb	r3, [r7, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4991      	ldr	r1, [pc, #580]	; (80017b4 <printRadioSettings+0x6d4>)
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fec7 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe feb0 	bl	80002e0 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	f107 0108 	add.w	r1, r7, #8
 8001588:	230a      	movs	r3, #10
 800158a:	4885      	ldr	r0, [pc, #532]	; (80017a0 <printRadioSettings+0x6c0>)
 800158c:	f004 fdab 	bl	80060e6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001590:	463b      	mov	r3, r7
 8001592:	2201      	movs	r2, #1
 8001594:	4619      	mov	r1, r3
 8001596:	200f      	movs	r0, #15
 8001598:	f7ff f99c 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800159c:	783b      	ldrb	r3, [r7, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4984      	ldr	r1, [pc, #528]	; (80017b8 <printRadioSettings+0x6d8>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f005 feac 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fe95 	bl	80002e0 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f107 0108 	add.w	r1, r7, #8
 80015be:	230a      	movs	r3, #10
 80015c0:	4877      	ldr	r0, [pc, #476]	; (80017a0 <printRadioSettings+0x6c0>)
 80015c2:	f004 fd90 	bl	80060e6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015c6:	463b      	mov	r3, r7
 80015c8:	2205      	movs	r2, #5
 80015ca:	4619      	mov	r1, r3
 80015cc:	2010      	movs	r0, #16
 80015ce:	f7ff f981 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015d2:	793b      	ldrb	r3, [r7, #4]
 80015d4:	461c      	mov	r4, r3
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	461d      	mov	r5, r3
 80015da:	78bb      	ldrb	r3, [r7, #2]
 80015dc:	787a      	ldrb	r2, [r7, #1]
 80015de:	7839      	ldrb	r1, [r7, #0]
 80015e0:	f107 0008 	add.w	r0, r7, #8
 80015e4:	9102      	str	r1, [sp, #8]
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	462b      	mov	r3, r5
 80015ec:	4622      	mov	r2, r4
 80015ee:	4973      	ldr	r1, [pc, #460]	; (80017bc <printRadioSettings+0x6dc>)
 80015f0:	f005 fe88 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fe71 	bl	80002e0 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29a      	uxth	r2, r3
 8001602:	f107 0108 	add.w	r1, r7, #8
 8001606:	230a      	movs	r3, #10
 8001608:	4865      	ldr	r0, [pc, #404]	; (80017a0 <printRadioSettings+0x6c0>)
 800160a:	f004 fd6c 	bl	80060e6 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800160e:	2011      	movs	r0, #17
 8001610:	f7ff f938 	bl	8000884 <NRF24_read_register>
 8001614:	4603      	mov	r3, r0
 8001616:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800161a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4966      	ldr	r1, [pc, #408]	; (80017c0 <printRadioSettings+0x6e0>)
 8001628:	4618      	mov	r0, r3
 800162a:	f005 fe6b 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fe54 	bl	80002e0 <strlen>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	f107 0108 	add.w	r1, r7, #8
 8001640:	230a      	movs	r3, #10
 8001642:	4857      	ldr	r0, [pc, #348]	; (80017a0 <printRadioSettings+0x6c0>)
 8001644:	f004 fd4f 	bl	80060e6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001648:	2012      	movs	r0, #18
 800164a:	f7ff f91b 	bl	8000884 <NRF24_read_register>
 800164e:	4603      	mov	r3, r0
 8001650:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001654:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001658:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4958      	ldr	r1, [pc, #352]	; (80017c4 <printRadioSettings+0x6e4>)
 8001662:	4618      	mov	r0, r3
 8001664:	f005 fe4e 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fe37 	bl	80002e0 <strlen>
 8001672:	4603      	mov	r3, r0
 8001674:	b29a      	uxth	r2, r3
 8001676:	f107 0108 	add.w	r1, r7, #8
 800167a:	230a      	movs	r3, #10
 800167c:	4848      	ldr	r0, [pc, #288]	; (80017a0 <printRadioSettings+0x6c0>)
 800167e:	f004 fd32 	bl	80060e6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001682:	2013      	movs	r0, #19
 8001684:	f7ff f8fe 	bl	8000884 <NRF24_read_register>
 8001688:	4603      	mov	r3, r0
 800168a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800168e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	494b      	ldr	r1, [pc, #300]	; (80017c8 <printRadioSettings+0x6e8>)
 800169c:	4618      	mov	r0, r3
 800169e:	f005 fe31 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fe1a 	bl	80002e0 <strlen>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	230a      	movs	r3, #10
 80016b6:	483a      	ldr	r0, [pc, #232]	; (80017a0 <printRadioSettings+0x6c0>)
 80016b8:	f004 fd15 	bl	80060e6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016bc:	2014      	movs	r0, #20
 80016be:	f7ff f8e1 	bl	8000884 <NRF24_read_register>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	493d      	ldr	r1, [pc, #244]	; (80017cc <printRadioSettings+0x6ec>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f005 fe14 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fdfd 	bl	80002e0 <strlen>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	f107 0108 	add.w	r1, r7, #8
 80016ee:	230a      	movs	r3, #10
 80016f0:	482b      	ldr	r0, [pc, #172]	; (80017a0 <printRadioSettings+0x6c0>)
 80016f2:	f004 fcf8 	bl	80060e6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016f6:	2015      	movs	r0, #21
 80016f8:	f7ff f8c4 	bl	8000884 <NRF24_read_register>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001702:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001706:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4930      	ldr	r1, [pc, #192]	; (80017d0 <printRadioSettings+0x6f0>)
 8001710:	4618      	mov	r0, r3
 8001712:	f005 fdf7 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fde0 	bl	80002e0 <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	b29a      	uxth	r2, r3
 8001724:	f107 0108 	add.w	r1, r7, #8
 8001728:	230a      	movs	r3, #10
 800172a:	481d      	ldr	r0, [pc, #116]	; (80017a0 <printRadioSettings+0x6c0>)
 800172c:	f004 fcdb 	bl	80060e6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001730:	2016      	movs	r0, #22
 8001732:	f7ff f8a7 	bl	8000884 <NRF24_read_register>
 8001736:	4603      	mov	r3, r0
 8001738:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800173c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001740:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4922      	ldr	r1, [pc, #136]	; (80017d4 <printRadioSettings+0x6f4>)
 800174a:	4618      	mov	r0, r3
 800174c:	f005 fdda 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fdc3 	bl	80002e0 <strlen>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	f107 0108 	add.w	r1, r7, #8
 8001762:	230a      	movs	r3, #10
 8001764:	480e      	ldr	r0, [pc, #56]	; (80017a0 <printRadioSettings+0x6c0>)
 8001766:	f004 fcbe 	bl	80060e6 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800176a:	201c      	movs	r0, #28
 800176c:	f7ff f88a 	bl	8000884 <NRF24_read_register>
 8001770:	4603      	mov	r3, r0
 8001772:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001776:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800177a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800177e:	2b00      	cmp	r3, #0
 8001780:	bfcc      	ite	gt
 8001782:	2301      	movgt	r3, #1
 8001784:	2300      	movle	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800178a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800178e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001792:	2b00      	cmp	r3, #0
 8001794:	bfcc      	ite	gt
 8001796:	2301      	movgt	r3, #1
 8001798:	2300      	movle	r3, #0
 800179a:	e01d      	b.n	80017d8 <printRadioSettings+0x6f8>
 800179c:	08008750 	.word	0x08008750
 80017a0:	2400013c 	.word	0x2400013c
 80017a4:	08008764 	.word	0x08008764
 80017a8:	08008794 	.word	0x08008794
 80017ac:	080087c4 	.word	0x080087c4
 80017b0:	080087ec 	.word	0x080087ec
 80017b4:	08008814 	.word	0x08008814
 80017b8:	0800883c 	.word	0x0800883c
 80017bc:	08008864 	.word	0x08008864
 80017c0:	08008890 	.word	0x08008890
 80017c4:	080088ac 	.word	0x080088ac
 80017c8:	080088c8 	.word	0x080088c8
 80017cc:	080088e4 	.word	0x080088e4
 80017d0:	08008900 	.word	0x08008900
 80017d4:	0800891c 	.word	0x0800891c
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfcc      	ite	gt
 80017e8:	2301      	movgt	r3, #1
 80017ea:	2300      	movle	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfcc      	ite	gt
 80017fc:	2301      	movgt	r3, #1
 80017fe:	2300      	movle	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001804:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001808:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800180c:	2b00      	cmp	r3, #0
 800180e:	bfcc      	ite	gt
 8001810:	2301      	movgt	r3, #1
 8001812:	2300      	movle	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001818:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfcc      	ite	gt
 8001824:	2301      	movgt	r3, #1
 8001826:	2300      	movle	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f107 0008 	add.w	r0, r7, #8
 800182e:	9303      	str	r3, [sp, #12]
 8001830:	9402      	str	r4, [sp, #8]
 8001832:	9101      	str	r1, [sp, #4]
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	4633      	mov	r3, r6
 8001838:	462a      	mov	r2, r5
 800183a:	4936      	ldr	r1, [pc, #216]	; (8001914 <printRadioSettings+0x834>)
 800183c:	f005 fd62 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fd4b 	bl	80002e0 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	f107 0108 	add.w	r1, r7, #8
 8001852:	230a      	movs	r3, #10
 8001854:	4830      	ldr	r0, [pc, #192]	; (8001918 <printRadioSettings+0x838>)
 8001856:	f004 fc46 	bl	80060e6 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800185a:	201d      	movs	r0, #29
 800185c:	f7ff f812 	bl	8000884 <NRF24_read_register>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001866:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <printRadioSettings+0x7a0>
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4929      	ldr	r1, [pc, #164]	; (800191c <printRadioSettings+0x83c>)
 8001878:	4618      	mov	r0, r3
 800187a:	f005 fd43 	bl	8007304 <siprintf>
 800187e:	e005      	b.n	800188c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4926      	ldr	r1, [pc, #152]	; (8001920 <printRadioSettings+0x840>)
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fd3c 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fd25 	bl	80002e0 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	b29a      	uxth	r2, r3
 800189a:	f107 0108 	add.w	r1, r7, #8
 800189e:	230a      	movs	r3, #10
 80018a0:	481d      	ldr	r0, [pc, #116]	; (8001918 <printRadioSettings+0x838>)
 80018a2:	f004 fc20 	bl	80060e6 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80018a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <printRadioSettings+0x7e0>
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	491b      	ldr	r1, [pc, #108]	; (8001924 <printRadioSettings+0x844>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f005 fd23 	bl	8007304 <siprintf>
 80018be:	e005      	b.n	80018cc <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4918      	ldr	r1, [pc, #96]	; (8001928 <printRadioSettings+0x848>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 fd1c 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fd05 	bl	80002e0 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	f107 0108 	add.w	r1, r7, #8
 80018de:	230a      	movs	r3, #10
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <printRadioSettings+0x838>)
 80018e2:	f004 fc00 	bl	80060e6 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4910      	ldr	r1, [pc, #64]	; (800192c <printRadioSettings+0x84c>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f005 fd09 	bl	8007304 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fcf2 	bl	80002e0 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29a      	uxth	r2, r3
 8001900:	f107 0108 	add.w	r1, r7, #8
 8001904:	230a      	movs	r3, #10
 8001906:	4804      	ldr	r0, [pc, #16]	; (8001918 <printRadioSettings+0x838>)
 8001908:	f004 fbed 	bl	80060e6 <HAL_UART_Transmit>
}
 800190c:	bf00      	nop
 800190e:	3774      	adds	r7, #116	; 0x74
 8001910:	46bd      	mov	sp, r7
 8001912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001914:	08008938 	.word	0x08008938
 8001918:	2400013c 	.word	0x2400013c
 800191c:	08008984 	.word	0x08008984
 8001920:	0800899c 	.word	0x0800899c
 8001924:	080089b4 	.word	0x080089b4
 8001928:	080089d0 	.word	0x080089d0
 800192c:	080085a4 	.word	0x080085a4

08001930 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001930:	b084      	sub	sp, #16
 8001932:	b580      	push	{r7, lr}
 8001934:	af00      	add	r7, sp, #0
 8001936:	f107 0c08 	add.w	ip, r7, #8
 800193a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <nrf24_DebugUART_Init+0x2c>)
 8001940:	4618      	mov	r0, r3
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	2290      	movs	r2, #144	; 0x90
 8001948:	4619      	mov	r1, r3
 800194a:	f005 fcad 	bl	80072a8 <memcpy>
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001956:	b004      	add	sp, #16
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	2400013c 	.word	0x2400013c

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	b0a5      	sub	sp, #148	; 0x94
 8001964:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800196c:	bf00      	nop
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <main+0x1ac>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <main+0x24>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	dcf4      	bgt.n	800196e <main+0xe>
  if ( timeout < 0 )
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	da01      	bge.n	800198e <main+0x2e>
  {
  Error_Handler();
 800198a:	f000 faa7 	bl	8001edc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198e:	f000 fc9b 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001992:	f000 f8d1 	bl	8001b38 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001996:	f000 f94d 	bl	8001c34 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800199a:	4b5c      	ldr	r3, [pc, #368]	; (8001b0c <main+0x1ac>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <main+0x1ac>)
 80019a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019aa:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <main+0x1ac>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 fff5 	bl	80029a8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80019be:	2100      	movs	r1, #0
 80019c0:	2000      	movs	r0, #0
 80019c2:	f001 f80b 	bl	80029dc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80019c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ca:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80019cc:	bf00      	nop
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <main+0x1ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d104      	bne.n	80019e4 <main+0x84>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	1e5a      	subs	r2, r3, #1
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	dcf4      	bgt.n	80019ce <main+0x6e>
if ( timeout < 0 )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da01      	bge.n	80019ee <main+0x8e>
{
Error_Handler();
 80019ea:	f000 fa77 	bl	8001edc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ee:	f000 f9df 	bl	8001db0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80019f2:	f000 f991 	bl	8001d18 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80019f6:	f000 f939 	bl	8001c6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(GPIOC,GPIO_PIN_6,GPIO_PIN_7, hspi1);
 80019fa:	4c45      	ldr	r4, [pc, #276]	; (8001b10 <main+0x1b0>)
 80019fc:	4668      	mov	r0, sp
 80019fe:	1d23      	adds	r3, r4, #4
 8001a00:	2284      	movs	r2, #132	; 0x84
 8001a02:	4619      	mov	r1, r3
 8001a04:	f005 fc50 	bl	80072a8 <memcpy>
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	2280      	movs	r2, #128	; 0x80
 8001a0c:	2140      	movs	r1, #64	; 0x40
 8001a0e:	4841      	ldr	r0, [pc, #260]	; (8001b14 <main+0x1b4>)
 8001a10:	f7ff f826 	bl	8000a60 <NRF24_begin>
  nrf24_DebugUART_Init(huart3);
 8001a14:	4c40      	ldr	r4, [pc, #256]	; (8001b18 <main+0x1b8>)
 8001a16:	4668      	mov	r0, sp
 8001a18:	f104 0310 	add.w	r3, r4, #16
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f005 fc42 	bl	80072a8 <memcpy>
 8001a24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a28:	f7ff ff82 	bl	8001930 <nrf24_DebugUART_Init>


  NRF24_setAutoAck(false);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fa39 	bl	8000ea4 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8001a32:	2034      	movs	r0, #52	; 0x34
 8001a34:	f7ff f9ab 	bl	8000d8e <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001a38:	2020      	movs	r0, #32
 8001a3a:	f7ff f9bd 	bl	8000db8 <NRF24_setPayloadSize>
  NRF24_setDataRate(RF24_2MBPS);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f7ff fa7e 	bl	8000f40 <NRF24_setDataRate>
  NRF24_openReadingPipe(0, RxpipeAddrs);
 8001a44:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <main+0x1bc>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff f936 	bl	8000cbc <NRF24_openReadingPipe>
  NRF24_enableDynamicPayloads();
 8001a50:	f7ff f9de 	bl	8000e10 <NRF24_enableDynamicPayloads>
  //NRF24_enableAckPayload();
  printRadioSettings();
 8001a54:	f7ff fb44 	bl	80010e0 <printRadioSettings>
  NRF24_startListening();
 8001a58:	f7ff f8e2 	bl	8000c20 <NRF24_startListening>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(NRF24_available())
 8001a5c:	f7ff f906 	bl	8000c6c <NRF24_available>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0fa      	beq.n	8001a5c <main+0xfc>
	  		{
		  NRF24_read(myRxData, 32);
 8001a66:	2120      	movs	r1, #32
 8001a68:	482d      	ldr	r0, [pc, #180]	; (8001b20 <main+0x1c0>)
 8001a6a:	f7ff f907 	bl	8000c7c <NRF24_read>
		  printf("Coordenadas: %d %d %d %d %d %d\r\n",myRxData[0],myRxData[1],myRxData[2],myRxData[3],myRxData[4],myRxData[5],myRxData[6]);
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <main+0x1c0>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461c      	mov	r4, r3
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <main+0x1c0>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	461d      	mov	r5, r3
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <main+0x1c0>)
 8001a7c:	789b      	ldrb	r3, [r3, #2]
 8001a7e:	461e      	mov	r6, r3
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <main+0x1c0>)
 8001a82:	78db      	ldrb	r3, [r3, #3]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <main+0x1c0>)
 8001a88:	791b      	ldrb	r3, [r3, #4]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <main+0x1c0>)
 8001a8e:	795b      	ldrb	r3, [r3, #5]
 8001a90:	4618      	mov	r0, r3
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <main+0x1c0>)
 8001a94:	799b      	ldrb	r3, [r3, #6]
 8001a96:	9303      	str	r3, [sp, #12]
 8001a98:	9002      	str	r0, [sp, #8]
 8001a9a:	9101      	str	r1, [sp, #4]
 8001a9c:	9200      	str	r2, [sp, #0]
 8001a9e:	4633      	mov	r3, r6
 8001aa0:	462a      	mov	r2, r5
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	481f      	ldr	r0, [pc, #124]	; (8001b24 <main+0x1c4>)
 8001aa6:	f005 fc15 	bl	80072d4 <iprintf>
		 // Concatenar y convertir el par 4 y 5
		 intToBinary(myRxData[4], binaryResult);
		 intToBinary(myRxData[5], binaryResult + 8);
		 printf("Resultado decimal A: %d\r\n", binaryToDecimal(binaryResult));
		 */
		 x = ((uint16_t)myRxData[0] << 8) | (uint16_t)myRxData[1];
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <main+0x1c0>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <main+0x1c0>)
 8001ab4:	785b      	ldrb	r3, [r3, #1]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <main+0x1c8>)
 8001ac0:	801a      	strh	r2, [r3, #0]
		 y = ((uint16_t)myRxData[2] << 8) | (uint16_t)myRxData[3];
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <main+0x1c0>)
 8001ac4:	789b      	ldrb	r3, [r3, #2]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <main+0x1c0>)
 8001acc:	78db      	ldrb	r3, [r3, #3]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <main+0x1cc>)
 8001ad8:	801a      	strh	r2, [r3, #0]
		 a = ((uint16_t)myRxData[4] << 8) | (uint16_t)myRxData[5];
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <main+0x1c0>)
 8001adc:	791b      	ldrb	r3, [r3, #4]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <main+0x1c0>)
 8001ae4:	795b      	ldrb	r3, [r3, #5]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <main+0x1d0>)
 8001af0:	801a      	strh	r2, [r3, #0]

		 printf("%u %u %u\r\n", x, y, a);
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <main+0x1c8>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <main+0x1cc>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <main+0x1d0>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <main+0x1d4>)
 8001b04:	f005 fbe6 	bl	80072d4 <iprintf>
	  if(NRF24_available())
 8001b08:	e7a8      	b.n	8001a5c <main+0xfc>
 8001b0a:	bf00      	nop
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	240001cc 	.word	0x240001cc
 8001b14:	58020800 	.word	0x58020800
 8001b18:	24000254 	.word	0x24000254
 8001b1c:	24000008 	.word	0x24000008
 8001b20:	240002e4 	.word	0x240002e4
 8001b24:	08008ae8 	.word	0x08008ae8
 8001b28:	24000316 	.word	0x24000316
 8001b2c:	24000318 	.word	0x24000318
 8001b30:	2400031a 	.word	0x2400031a
 8001b34:	08008b0c 	.word	0x08008b0c

08001b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b09c      	sub	sp, #112	; 0x70
 8001b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	224c      	movs	r2, #76	; 0x4c
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 fbbc 	bl	80072c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2220      	movs	r2, #32
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f005 fbb6 	bl	80072c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b58:	2004      	movs	r0, #4
 8001b5a:	f000 ff53 	bl	8002a04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
 8001b62:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <SystemClock_Config+0xf4>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <SystemClock_Config+0xf4>)
 8001b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <SystemClock_Config+0xf4>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <SystemClock_Config+0xf8>)
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	4a2c      	ldr	r2, [pc, #176]	; (8001c30 <SystemClock_Config+0xf8>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <SystemClock_Config+0xf8>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b90:	bf00      	nop
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <SystemClock_Config+0xf4>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9e:	d1f8      	bne.n	8001b92 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ba4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001bbe:	23f0      	movs	r3, #240	; 0xf0
 8001bc0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 ff6a 	bl	8002ab8 <HAL_RCC_OscConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001bea:	f000 f977 	bl	8001edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	233f      	movs	r3, #63	; 0x3f
 8001bf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001bfe:	2340      	movs	r3, #64	; 0x40
 8001c00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c02:	2340      	movs	r3, #64	; 0x40
 8001c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2104      	movs	r1, #4
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 fb7d 	bl	8003314 <HAL_RCC_ClockConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001c20:	f000 f95c 	bl	8001edc <Error_Handler>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3770      	adds	r7, #112	; 0x70
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	58024800 	.word	0x58024800
 8001c30:	58000400 	.word	0x58000400

08001c34 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b0b0      	sub	sp, #192	; 0xc0
 8001c38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	22bc      	movs	r2, #188	; 0xbc
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f005 fb3f 	bl	80072c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001c46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c4a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 feea 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8001c5e:	f000 f93d 	bl	8001edc <Error_Handler>
  }
}
 8001c62:	bf00      	nop
 8001c64:	37c0      	adds	r7, #192	; 0xc0
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001c72:	4a28      	ldr	r2, [pc, #160]	; (8001d14 <MX_SPI1_Init+0xa8>)
 8001c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001c78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001c86:	2207      	movs	r2, #7
 8001c88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001c98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001ca0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001ca4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_SPI1_Init+0xa4>)
 8001cfe:	f003 f9fd 	bl	80050fc <HAL_SPI_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d08:	f000 f8e8 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	240001cc 	.word	0x240001cc
 8001d14:	40013000 	.word	0x40013000

08001d18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d1e:	4a23      	ldr	r2, [pc, #140]	; (8001dac <MX_USART3_UART_Init+0x94>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d60:	4811      	ldr	r0, [pc, #68]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d62:	f004 f970 	bl	8006046 <HAL_UART_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d6c:	f000 f8b6 	bl	8001edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d70:	2100      	movs	r1, #0
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d74:	f005 f9a4 	bl	80070c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d7e:	f000 f8ad 	bl	8001edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d82:	2100      	movs	r1, #0
 8001d84:	4808      	ldr	r0, [pc, #32]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d86:	f005 f9d9 	bl	800713c <HAL_UARTEx_SetRxFifoThreshold>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d90:	f000 f8a4 	bl	8001edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_USART3_UART_Init+0x90>)
 8001d96:	f005 f95a 	bl	800704e <HAL_UARTEx_DisableFifoMode>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001da0:	f000 f89c 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	24000254 	.word	0x24000254
 8001dac:	40004800 	.word	0x40004800

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	4a40      	ldr	r2, [pc, #256]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de4:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	4a39      	ldr	r2, [pc, #228]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e08:	4a31      	ldr	r2, [pc, #196]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e26:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e44:	4a22      	ldr	r2, [pc, #136]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <MX_GPIO_Init+0x120>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001e62:	481c      	ldr	r0, [pc, #112]	; (8001ed4 <MX_GPIO_Init+0x124>)
 8001e64:	f000 fd86 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_SPI_Pin|CE_NRF_Pin, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	21c0      	movs	r1, #192	; 0xc0
 8001e6c:	481a      	ldr	r0, [pc, #104]	; (8001ed8 <MX_GPIO_Init+0x128>)
 8001e6e:	f000 fd81 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <MX_GPIO_Init+0x128>)
 8001e88:	f000 fbc4 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001e8c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <MX_GPIO_Init+0x124>)
 8001ea6:	f000 fbb5 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_SPI_Pin CE_NRF_Pin */
  GPIO_InitStruct.Pin = CS_SPI_Pin|CE_NRF_Pin;
 8001eaa:	23c0      	movs	r3, #192	; 0xc0
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_GPIO_Init+0x128>)
 8001ec2:	f000 fba7 	bl	8002614 <HAL_GPIO_Init>

}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	58020400 	.word	0x58020400
 8001ed8:	58020800 	.word	0x58020800

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <Error_Handler+0x8>
	...

08001ee8 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001ef0:	1d39      	adds	r1, r7, #4
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <__io_putchar+0x20>)
 8001efa:	f004 f8f4 	bl	80060e6 <HAL_UART_Transmit>
  return ch;
 8001efe:	687b      	ldr	r3, [r7, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	24000254 	.word	0x24000254

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_MspInit+0x30>)
 8001f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f18:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_MspInit+0x30>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_MspInit+0x30>)
 8001f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	58024400 	.word	0x58024400

08001f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0b8      	sub	sp, #224	; 0xe0
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	22bc      	movs	r2, #188	; 0xbc
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 f9af 	bl	80072c4 <memset>
  if(hspi->Instance==SPI1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a25      	ldr	r2, [pc, #148]	; (8002000 <HAL_SPI_MspInit+0xc0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d142      	bne.n	8001ff6 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001f76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	4618      	mov	r0, r3
 8001f82:	f001 fd53 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001f8c:	f7ff ffa6 	bl	8001edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_SPI_MspInit+0xc4>)
 8001f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f96:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <HAL_SPI_MspInit+0xc4>)
 8001f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_SPI_MspInit+0xc4>)
 8001fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_SPI_MspInit+0xc4>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <HAL_SPI_MspInit+0xc4>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_SPI_MspInit+0xc4>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fcc:	23e0      	movs	r3, #224	; 0xe0
 8001fce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe4:	2305      	movs	r3, #5
 8001fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <HAL_SPI_MspInit+0xc8>)
 8001ff2:	f000 fb0f 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	37e0      	adds	r7, #224	; 0xe0
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40013000 	.word	0x40013000
 8002004:	58024400 	.word	0x58024400
 8002008:	58020000 	.word	0x58020000

0800200c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0b8      	sub	sp, #224	; 0xe0
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	22bc      	movs	r2, #188	; 0xbc
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f005 f949 	bl	80072c4 <memset>
  if(huart->Instance==USART3)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <HAL_UART_MspInit+0xc0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d142      	bne.n	80020c2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4618      	mov	r0, r3
 800204c:	f001 fcee 	bl	8003a2c <HAL_RCCEx_PeriphCLKConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002056:	f7ff ff41 	bl	8001edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_UART_MspInit+0xc4>)
 800205c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_UART_MspInit+0xc4>)
 8002062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002066:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_UART_MspInit+0xc4>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_UART_MspInit+0xc4>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_UART_MspInit+0xc4>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_UART_MspInit+0xc4>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800209a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b0:	2307      	movs	r3, #7
 80020b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <HAL_UART_MspInit+0xc8>)
 80020be:	f000 faa9 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	37e0      	adds	r7, #224	; 0xe0
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40004800 	.word	0x40004800
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58020c00 	.word	0x58020c00

080020d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <NMI_Handler+0x4>

080020de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <HardFault_Handler+0x4>

080020e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <MemManage_Handler+0x4>

080020ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002124:	f000 f942 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e00a      	b.n	8002154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800213e:	f3af 8000 	nop.w
 8002142:	4601      	mov	r1, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	60ba      	str	r2, [r7, #8]
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf0      	blt.n	800213e <_read+0x12>
	}

return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e009      	b.n	800218c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60ba      	str	r2, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff feb1 	bl	8001ee8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	dbf1      	blt.n	8002178 <_write+0x12>
	}
	return len;
 8002194:	687b      	ldr	r3, [r7, #4]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_close>:

int _close(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
	return -1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c6:	605a      	str	r2, [r3, #4]
	return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_isatty>:

int _isatty(int file)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	return 1;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
	return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <_sbrk+0x5c>)
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <_sbrk+0x60>)
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <_sbrk+0x64>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <_sbrk+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d207      	bcs.n	8002248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002238:	f005 f80c 	bl	8007254 <__errno>
 800223c:	4603      	mov	r3, r0
 800223e:	220c      	movs	r2, #12
 8002240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	e009      	b.n	800225c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <_sbrk+0x64>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <_sbrk+0x64>)
 8002258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	24080000 	.word	0x24080000
 8002268:	00000400 	.word	0x00000400
 800226c:	2400031c 	.word	0x2400031c
 8002270:	24000338 	.word	0x24000338

08002274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002278:	f7fe fa0c 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800227c:	480c      	ldr	r0, [pc, #48]	; (80022b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800227e:	490d      	ldr	r1, [pc, #52]	; (80022b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002294:	4c0a      	ldr	r4, [pc, #40]	; (80022c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a2:	f004 ffdd 	bl	8007260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a6:	f7ff fb5b 	bl	8001960 <main>
  bx  lr
 80022aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80022b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022b4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80022b8:	08008c08 	.word	0x08008c08
  ldr r2, =_sbss
 80022bc:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80022c0:	24000334 	.word	0x24000334

080022c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC3_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ce:	2003      	movs	r0, #3
 80022d0:	f000 f96e 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022d4:	f001 f9d4 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_Init+0x68>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	4913      	ldr	r1, [pc, #76]	; (8002334 <HAL_Init+0x6c>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_Init+0x68>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_Init+0x6c>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_Init+0x70>)
 800230a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_Init+0x74>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002312:	200f      	movs	r0, #15
 8002314:	f000 f814 	bl	8002340 <HAL_InitTick>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e002      	b.n	8002328 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002322:	f7ff fdf3 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	58024400 	.word	0x58024400
 8002334:	08008b18 	.word	0x08008b18
 8002338:	24000004 	.word	0x24000004
 800233c:	24000000 	.word	0x24000000

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_InitTick+0x60>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e021      	b.n	8002398 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_InitTick+0x64>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_InitTick+0x60>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f945 	bl	80025fa <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00e      	b.n	8002398 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0f      	cmp	r3, #15
 800237e:	d80a      	bhi.n	8002396 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	2200      	movs	r2, #0
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f000 f91d 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <HAL_InitTick+0x68>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	24000014 	.word	0x24000014
 80023a4:	24000000 	.word	0x24000000
 80023a8:	24000010 	.word	0x24000010

080023ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x20>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x24>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <HAL_IncTick+0x24>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	24000014 	.word	0x24000014
 80023d0:	24000320 	.word	0x24000320

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	24000320 	.word	0x24000320

080023ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff ffee 	bl	80023d4 <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d005      	beq.n	8002412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_Delay+0x44>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002412:	bf00      	nop
 8002414:	f7ff ffde 	bl	80023d4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d8f7      	bhi.n	8002414 <HAL_Delay+0x28>
  {
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	24000014 	.word	0x24000014

08002434 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_GetREVID+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0c1b      	lsrs	r3, r3, #16
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	5c001000 	.word	0x5c001000

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <__NVIC_SetPriorityGrouping+0x40>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002476:	4313      	orrs	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <__NVIC_SetPriorityGrouping+0x40>)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	60d3      	str	r3, [r2, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00
 8002490:	05fa0000 	.word	0x05fa0000

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff47 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff5e 	bl	8002494 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff90 	bl	8002504 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5f 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffb2 	bl	800256c <SysTick_Config>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002622:	4b89      	ldr	r3, [pc, #548]	; (8002848 <HAL_GPIO_Init+0x234>)
 8002624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002626:	e194      	b.n	8002952 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8186 	beq.w	800294c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d005      	beq.n	8002658 <HAL_GPIO_Init+0x44>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d130      	bne.n	80026ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800268e:	2201      	movs	r2, #1
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 0201 	and.w	r2, r3, #1
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d017      	beq.n	80026f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d123      	bne.n	800274a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	08da      	lsrs	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3208      	adds	r2, #8
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0203 	and.w	r2, r3, #3
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80e0 	beq.w	800294c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_GPIO_Init+0x238>)
 800278e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002792:	4a2e      	ldr	r2, [pc, #184]	; (800284c <HAL_GPIO_Init+0x238>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_GPIO_Init+0x238>)
 800279e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_GPIO_Init+0x23c>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_GPIO_Init+0x240>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d052      	beq.n	800287c <HAL_GPIO_Init+0x268>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_GPIO_Init+0x244>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d031      	beq.n	8002842 <HAL_GPIO_Init+0x22e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_GPIO_Init+0x248>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02b      	beq.n	800283e <HAL_GPIO_Init+0x22a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_GPIO_Init+0x24c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d025      	beq.n	800283a <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_GPIO_Init+0x250>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01f      	beq.n	8002836 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_GPIO_Init+0x254>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d019      	beq.n	8002832 <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_GPIO_Init+0x258>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_GPIO_Init+0x21a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_GPIO_Init+0x25c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00d      	beq.n	800282a <HAL_GPIO_Init+0x216>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a18      	ldr	r2, [pc, #96]	; (8002874 <HAL_GPIO_Init+0x260>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <HAL_GPIO_Init+0x212>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_GPIO_Init+0x264>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_GPIO_Init+0x20e>
 800281e:	2309      	movs	r3, #9
 8002820:	e02d      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002822:	230a      	movs	r3, #10
 8002824:	e02b      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002826:	2308      	movs	r3, #8
 8002828:	e029      	b.n	800287e <HAL_GPIO_Init+0x26a>
 800282a:	2307      	movs	r3, #7
 800282c:	e027      	b.n	800287e <HAL_GPIO_Init+0x26a>
 800282e:	2306      	movs	r3, #6
 8002830:	e025      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002832:	2305      	movs	r3, #5
 8002834:	e023      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002836:	2304      	movs	r3, #4
 8002838:	e021      	b.n	800287e <HAL_GPIO_Init+0x26a>
 800283a:	2303      	movs	r3, #3
 800283c:	e01f      	b.n	800287e <HAL_GPIO_Init+0x26a>
 800283e:	2302      	movs	r3, #2
 8002840:	e01d      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002842:	2301      	movs	r3, #1
 8002844:	e01b      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002846:	bf00      	nop
 8002848:	58000080 	.word	0x58000080
 800284c:	58024400 	.word	0x58024400
 8002850:	58000400 	.word	0x58000400
 8002854:	58020000 	.word	0x58020000
 8002858:	58020400 	.word	0x58020400
 800285c:	58020800 	.word	0x58020800
 8002860:	58020c00 	.word	0x58020c00
 8002864:	58021000 	.word	0x58021000
 8002868:	58021400 	.word	0x58021400
 800286c:	58021800 	.word	0x58021800
 8002870:	58021c00 	.word	0x58021c00
 8002874:	58022000 	.word	0x58022000
 8002878:	58022400 	.word	0x58022400
 800287c:	2300      	movs	r3, #0
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288e:	4938      	ldr	r1, [pc, #224]	; (8002970 <HAL_GPIO_Init+0x35c>)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3301      	adds	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f ae63 	bne.w	8002628 <HAL_GPIO_Init+0x14>
  }
}
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	3724      	adds	r7, #36	; 0x24
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	58000400 	.word	0x58000400

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002990:	e003      	b.n	800299a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	619a      	str	r2, [r3, #24]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80029b0:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <HAL_HSEM_FastTake+0x2c>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3320      	adds	r3, #32
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_HSEM_FastTake+0x30>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e000      	b.n	80029c6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	58026400 	.word	0x58026400
 80029d8:	80000300 	.word	0x80000300

080029dc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80029e6:	4906      	ldr	r1, [pc, #24]	; (8002a00 <HAL_HSEM_Release+0x24>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	58026400 	.word	0x58026400

08002a04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	2b06      	cmp	r3, #6
 8002a16:	d00a      	beq.n	8002a2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a18:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d001      	beq.n	8002a2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e040      	b.n	8002aac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e03e      	b.n	8002aac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002a36:	491f      	ldr	r1, [pc, #124]	; (8002ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a3e:	f7ff fcc9 	bl	80023d4 <HAL_GetTick>
 8002a42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a44:	e009      	b.n	8002a5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a46:	f7ff fcc5 	bl	80023d4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a54:	d901      	bls.n	8002a5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e028      	b.n	8002aac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a66:	d1ee      	bne.n	8002a46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b1e      	cmp	r3, #30
 8002a6c:	d008      	beq.n	8002a80 <HAL_PWREx_ConfigSupply+0x7c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b2e      	cmp	r3, #46	; 0x2e
 8002a72:	d005      	beq.n	8002a80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b1d      	cmp	r3, #29
 8002a78:	d002      	beq.n	8002a80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8002a7e:	d114      	bne.n	8002aaa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002a80:	f7ff fca8 	bl	80023d4 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a86:	e009      	b.n	8002a9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a88:	f7ff fca4 	bl	80023d4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a96:	d901      	bls.n	8002a9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	d1ee      	bne.n	8002a88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	58024800 	.word	0x58024800

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f000 bc1d 	b.w	8003306 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8087 	beq.w	8002be8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ada:	4b99      	ldr	r3, [pc, #612]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ae4:	4b96      	ldr	r3, [pc, #600]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d007      	beq.n	8002b00 <HAL_RCC_OscConfig+0x48>
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	2b18      	cmp	r3, #24
 8002af4:	d110      	bne.n	8002b18 <HAL_RCC_OscConfig+0x60>
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d10b      	bne.n	8002b18 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	4b8f      	ldr	r3, [pc, #572]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d06c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x12e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d168      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e3f6      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b20:	d106      	bne.n	8002b30 <HAL_RCC_OscConfig+0x78>
 8002b22:	4b87      	ldr	r3, [pc, #540]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a86      	ldr	r2, [pc, #536]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e02e      	b.n	8002b8e <HAL_RCC_OscConfig+0xd6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10c      	bne.n	8002b52 <HAL_RCC_OscConfig+0x9a>
 8002b38:	4b81      	ldr	r3, [pc, #516]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a80      	ldr	r2, [pc, #512]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b7e      	ldr	r3, [pc, #504]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a7d      	ldr	r2, [pc, #500]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e01d      	b.n	8002b8e <HAL_RCC_OscConfig+0xd6>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_OscConfig+0xbe>
 8002b5c:	4b78      	ldr	r3, [pc, #480]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a77      	ldr	r2, [pc, #476]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a74      	ldr	r2, [pc, #464]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e00b      	b.n	8002b8e <HAL_RCC_OscConfig+0xd6>
 8002b76:	4b72      	ldr	r3, [pc, #456]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a71      	ldr	r2, [pc, #452]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6e      	ldr	r2, [pc, #440]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d013      	beq.n	8002bbe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7ff fc1d 	bl	80023d4 <HAL_GetTick>
 8002b9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9e:	f7ff fc19 	bl	80023d4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b64      	cmp	r3, #100	; 0x64
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e3aa      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb0:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0xe6>
 8002bbc:	e014      	b.n	8002be8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fc09 	bl	80023d4 <HAL_GetTick>
 8002bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc6:	f7ff fc05 	bl	80023d4 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b64      	cmp	r3, #100	; 0x64
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e396      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bd8:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x10e>
 8002be4:	e000      	b.n	8002be8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80cb 	beq.w	8002d8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf6:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bfe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_RCC_OscConfig+0x164>
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2b18      	cmp	r3, #24
 8002c10:	d156      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x208>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d151      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	4b48      	ldr	r3, [pc, #288]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x17c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e368      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c34:	4b42      	ldr	r3, [pc, #264]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 0219 	bic.w	r2, r3, #25
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	493f      	ldr	r1, [pc, #252]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c46:	f7ff fbc5 	bl	80023d4 <HAL_GetTick>
 8002c4a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7ff fbc1 	bl	80023d4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e352      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c60:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	f7ff fbe2 	bl	8002434 <HAL_GetREVID>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d817      	bhi.n	8002caa <HAL_RCC_OscConfig+0x1f2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d108      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1dc>
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c8a:	4a2d      	ldr	r2, [pc, #180]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c90:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c92:	e07b      	b.n	8002d8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	031b      	lsls	r3, r3, #12
 8002ca2:	4927      	ldr	r1, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca8:	e070      	b.n	8002d8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	061b      	lsls	r3, r3, #24
 8002cb8:	4921      	ldr	r1, [pc, #132]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbe:	e065      	b.n	8002d8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d048      	beq.n	8002d5a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 0219 	bic.w	r2, r3, #25
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	491a      	ldr	r1, [pc, #104]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7ff fb7b 	bl	80023d4 <HAL_GetTick>
 8002cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7ff fb77 	bl	80023d4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e308      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	f7ff fb98 	bl	8002434 <HAL_GetREVID>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d81a      	bhi.n	8002d44 <HAL_RCC_OscConfig+0x28c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0x270>
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	6053      	str	r3, [r2, #4]
 8002d26:	e031      	b.n	8002d8c <HAL_RCC_OscConfig+0x2d4>
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	4902      	ldr	r1, [pc, #8]	; (8002d40 <HAL_RCC_OscConfig+0x288>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
 8002d3c:	e026      	b.n	8002d8c <HAL_RCC_OscConfig+0x2d4>
 8002d3e:	bf00      	nop
 8002d40:	58024400 	.word	0x58024400
 8002d44:	4b9a      	ldr	r3, [pc, #616]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	4997      	ldr	r1, [pc, #604]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e018      	b.n	8002d8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b95      	ldr	r3, [pc, #596]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a94      	ldr	r2, [pc, #592]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7ff fb35 	bl	80023d4 <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7ff fb31 	bl	80023d4 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e2c2      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d80:	4b8b      	ldr	r3, [pc, #556]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a9 	beq.w	8002eec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9a:	4b85      	ldr	r3, [pc, #532]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002da2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002da4:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d007      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x308>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b18      	cmp	r3, #24
 8002db4:	d13a      	bne.n	8002e2c <HAL_RCC_OscConfig+0x374>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d135      	bne.n	8002e2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dc0:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x320>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e296      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dd8:	f7ff fb2c 	bl	8002434 <HAL_GetREVID>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f241 0203 	movw	r2, #4099	; 0x1003
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d817      	bhi.n	8002e16 <HAL_RCC_OscConfig+0x35e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d108      	bne.n	8002e00 <HAL_RCC_OscConfig+0x348>
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002df6:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dfe:	e075      	b.n	8002eec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e00:	4b6b      	ldr	r3, [pc, #428]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	069b      	lsls	r3, r3, #26
 8002e0e:	4968      	ldr	r1, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e14:	e06a      	b.n	8002eec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	4962      	ldr	r1, [pc, #392]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e2a:	e05f      	b.n	8002eec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d042      	beq.n	8002eba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e34:	4b5e      	ldr	r3, [pc, #376]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5d      	ldr	r2, [pc, #372]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7ff fac8 	bl	80023d4 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e48:	f7ff fac4 	bl	80023d4 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e255      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e5a:	4b55      	ldr	r3, [pc, #340]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e66:	f7ff fae5 	bl	8002434 <HAL_GetREVID>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d817      	bhi.n	8002ea4 <HAL_RCC_OscConfig+0x3ec>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d108      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3d6>
 8002e7c:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e84:	4a4a      	ldr	r2, [pc, #296]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e8a:	6053      	str	r3, [r2, #4]
 8002e8c:	e02e      	b.n	8002eec <HAL_RCC_OscConfig+0x434>
 8002e8e:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	4944      	ldr	r1, [pc, #272]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
 8002ea2:	e023      	b.n	8002eec <HAL_RCC_OscConfig+0x434>
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	493f      	ldr	r1, [pc, #252]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
 8002eb8:	e018      	b.n	8002eec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a3c      	ldr	r2, [pc, #240]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7ff fa85 	bl	80023d4 <HAL_GetTick>
 8002eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ece:	f7ff fa81 	bl	80023d4 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e212      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ee0:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d036      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d019      	beq.n	8002f34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f04:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7ff fa62 	bl	80023d4 <HAL_GetTick>
 8002f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f14:	f7ff fa5e 	bl	80023d4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1ef      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x45c>
 8002f32:	e018      	b.n	8002f66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f34:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7ff fa48 	bl	80023d4 <HAL_GetTick>
 8002f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f48:	f7ff fa44 	bl	80023d4 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1d5      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d039      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f86:	f7ff fa25 	bl	80023d4 <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f8e:	f7ff fa21 	bl	80023d4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1b2      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCC_OscConfig+0x4f8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
 8002fac:	e01b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x52e>
 8002fae:	bf00      	nop
 8002fb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fb4:	4b9b      	ldr	r3, [pc, #620]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a9a      	ldr	r2, [pc, #616]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8002fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fc0:	f7ff fa08 	bl	80023d4 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002fc8:	f7ff fa04 	bl	80023d4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e195      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fda:	4b92      	ldr	r3, [pc, #584]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8081 	beq.w	80030f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ff4:	4b8c      	ldr	r3, [pc, #560]	; (8003228 <HAL_RCC_OscConfig+0x770>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a8b      	ldr	r2, [pc, #556]	; (8003228 <HAL_RCC_OscConfig+0x770>)
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003000:	f7ff f9e8 	bl	80023d4 <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003008:	f7ff f9e4 	bl	80023d4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e175      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301a:	4b83      	ldr	r3, [pc, #524]	; (8003228 <HAL_RCC_OscConfig+0x770>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d106      	bne.n	800303c <HAL_RCC_OscConfig+0x584>
 800302e:	4b7d      	ldr	r3, [pc, #500]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a7c      	ldr	r2, [pc, #496]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
 800303a:	e02d      	b.n	8003098 <HAL_RCC_OscConfig+0x5e0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10c      	bne.n	800305e <HAL_RCC_OscConfig+0x5a6>
 8003044:	4b77      	ldr	r3, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a76      	ldr	r2, [pc, #472]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	4b74      	ldr	r3, [pc, #464]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a73      	ldr	r2, [pc, #460]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003056:	f023 0304 	bic.w	r3, r3, #4
 800305a:	6713      	str	r3, [r2, #112]	; 0x70
 800305c:	e01c      	b.n	8003098 <HAL_RCC_OscConfig+0x5e0>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x5c8>
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	4a6e      	ldr	r2, [pc, #440]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6713      	str	r3, [r2, #112]	; 0x70
 8003072:	4b6c      	ldr	r3, [pc, #432]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a6b      	ldr	r2, [pc, #428]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0x5e0>
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a67      	ldr	r2, [pc, #412]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003086:	f023 0301 	bic.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	4b65      	ldr	r3, [pc, #404]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a64      	ldr	r2, [pc, #400]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003092:	f023 0304 	bic.w	r3, r3, #4
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7ff f998 	bl	80023d4 <HAL_GetTick>
 80030a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a6:	e00a      	b.n	80030be <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f7ff f994 	bl	80023d4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e123      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030be:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0ee      	beq.n	80030a8 <HAL_RCC_OscConfig+0x5f0>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7ff f982 	bl	80023d4 <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7ff f97e 	bl	80023d4 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e10d      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030ea:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1ee      	bne.n	80030d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8102 	beq.w	8003304 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003100:	4b48      	ldr	r3, [pc, #288]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003108:	2b18      	cmp	r3, #24
 800310a:	f000 80bd 	beq.w	8003288 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b02      	cmp	r3, #2
 8003114:	f040 809e 	bne.w	8003254 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003118:	4b42      	ldr	r3, [pc, #264]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a41      	ldr	r2, [pc, #260]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 800311e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7ff f956 	bl	80023d4 <HAL_GetTick>
 8003128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312c:	f7ff f952 	bl	80023d4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0e3      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 800314c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314e:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCC_OscConfig+0x774>)
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800315a:	0112      	lsls	r2, r2, #4
 800315c:	430a      	orrs	r2, r1
 800315e:	4931      	ldr	r1, [pc, #196]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003160:	4313      	orrs	r3, r2
 8003162:	628b      	str	r3, [r1, #40]	; 0x28
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	3b01      	subs	r3, #1
 800316a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	3b01      	subs	r3, #1
 8003174:	025b      	lsls	r3, r3, #9
 8003176:	b29b      	uxth	r3, r3
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	3b01      	subs	r3, #1
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	3b01      	subs	r3, #1
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003194:	4923      	ldr	r1, [pc, #140]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003196:	4313      	orrs	r3, r2
 8003198:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	4a21      	ldr	r2, [pc, #132]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_RCC_OscConfig+0x778>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031b2:	00d2      	lsls	r2, r2, #3
 80031b4:	491b      	ldr	r1, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	f023 020c 	bic.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4917      	ldr	r1, [pc, #92]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031cc:	4b15      	ldr	r3, [pc, #84]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	f023 0202 	bic.w	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	4912      	ldr	r1, [pc, #72]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	4a07      	ldr	r2, [pc, #28]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_RCC_OscConfig+0x76c>)
 8003214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7ff f8db 	bl	80023d4 <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003220:	e011      	b.n	8003246 <HAL_RCC_OscConfig+0x78e>
 8003222:	bf00      	nop
 8003224:	58024400 	.word	0x58024400
 8003228:	58024800 	.word	0x58024800
 800322c:	fffffc0c 	.word	0xfffffc0c
 8003230:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003234:	f7ff f8ce 	bl	80023d4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e05f      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003246:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_OscConfig+0x858>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x77c>
 8003252:	e057      	b.n	8003304 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003254:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_RCC_OscConfig+0x858>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <HAL_RCC_OscConfig+0x858>)
 800325a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7ff f8b8 	bl	80023d4 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7ff f8b4 	bl	80023d4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e045      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_OscConfig+0x858>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x7b0>
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x858>)
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_OscConfig+0x858>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b01      	cmp	r3, #1
 800329a:	d031      	beq.n	8003300 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0203 	and.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d12a      	bne.n	8003300 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d122      	bne.n	8003300 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0a5b      	lsrs	r3, r3, #9
 80032ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d108      	bne.n	8003300 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3730      	adds	r7, #48	; 0x30
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400

08003314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e19c      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b8a      	ldr	r3, [pc, #552]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d910      	bls.n	8003358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b87      	ldr	r3, [pc, #540]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 020f 	bic.w	r2, r3, #15
 800333e:	4985      	ldr	r1, [pc, #532]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b83      	ldr	r3, [pc, #524]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e184      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	4b7b      	ldr	r3, [pc, #492]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003370:	429a      	cmp	r2, r3
 8003372:	d908      	bls.n	8003386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003374:	4b78      	ldr	r3, [pc, #480]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4975      	ldr	r1, [pc, #468]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003382:	4313      	orrs	r3, r2
 8003384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d010      	beq.n	80033b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	4b70      	ldr	r3, [pc, #448]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800339e:	429a      	cmp	r2, r3
 80033a0:	d908      	bls.n	80033b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	496a      	ldr	r1, [pc, #424]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	4b64      	ldr	r3, [pc, #400]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d908      	bls.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	495e      	ldr	r1, [pc, #376]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d908      	bls.n	8003410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033fe:	4b56      	ldr	r3, [pc, #344]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4953      	ldr	r1, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800340c:	4313      	orrs	r3, r2
 800340e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4b4d      	ldr	r3, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	429a      	cmp	r2, r3
 800342a:	d908      	bls.n	800343e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f023 020f 	bic.w	r2, r3, #15
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4947      	ldr	r1, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800343a:	4313      	orrs	r3, r2
 800343c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d055      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800344a:	4b43      	ldr	r3, [pc, #268]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4940      	ldr	r1, [pc, #256]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003458:	4313      	orrs	r3, r2
 800345a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d107      	bne.n	8003474 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003464:	4b3c      	ldr	r3, [pc, #240]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d121      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0f6      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d107      	bne.n	800348c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800347c:	4b36      	ldr	r3, [pc, #216]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d115      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0ea      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003494:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0de      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034a4:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d6      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034b4:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4925      	ldr	r1, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fe ff85 	bl	80023d4 <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ce:	f7fe ff81 	bl	80023d4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0be      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d1eb      	bne.n	80034ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	429a      	cmp	r2, r3
 8003510:	d208      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f023 020f 	bic.w	r2, r3, #15
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003520:	4313      	orrs	r3, r2
 8003522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d214      	bcs.n	800355c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 020f 	bic.w	r2, r3, #15
 800353a:	4906      	ldr	r1, [pc, #24]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e086      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
 8003554:	52002000 	.word	0x52002000
 8003558:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003574:	429a      	cmp	r2, r3
 8003576:	d208      	bcs.n	800358a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	4939      	ldr	r1, [pc, #228]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 8003586:	4313      	orrs	r3, r2
 8003588:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d010      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	4b34      	ldr	r3, [pc, #208]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d208      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035a6:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	492e      	ldr	r1, [pc, #184]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d208      	bcs.n	80035e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4922      	ldr	r1, [pc, #136]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035fe:	429a      	cmp	r2, r3
 8003600:	d208      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4917      	ldr	r1, [pc, #92]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 8003610:	4313      	orrs	r3, r2
 8003612:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003614:	f000 f834 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	4912      	ldr	r1, [pc, #72]	; (8003670 <HAL_RCC_ClockConfig+0x35c>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
 8003630:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <HAL_RCC_ClockConfig+0x35c>)
 800363c:	5cd3      	ldrb	r3, [r2, r3]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_RCC_ClockConfig+0x360>)
 800364a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x364>)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x368>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fe72 	bl	8002340 <HAL_InitTick>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	58024400 	.word	0x58024400
 8003670:	08008b18 	.word	0x08008b18
 8003674:	24000004 	.word	0x24000004
 8003678:	24000000 	.word	0x24000000
 800367c:	24000010 	.word	0x24000010

08003680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003686:	4bb3      	ldr	r3, [pc, #716]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800368e:	2b18      	cmp	r3, #24
 8003690:	f200 8155 	bhi.w	800393e <HAL_RCC_GetSysClockFreq+0x2be>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	08003701 	.word	0x08003701
 80036a0:	0800393f 	.word	0x0800393f
 80036a4:	0800393f 	.word	0x0800393f
 80036a8:	0800393f 	.word	0x0800393f
 80036ac:	0800393f 	.word	0x0800393f
 80036b0:	0800393f 	.word	0x0800393f
 80036b4:	0800393f 	.word	0x0800393f
 80036b8:	0800393f 	.word	0x0800393f
 80036bc:	08003727 	.word	0x08003727
 80036c0:	0800393f 	.word	0x0800393f
 80036c4:	0800393f 	.word	0x0800393f
 80036c8:	0800393f 	.word	0x0800393f
 80036cc:	0800393f 	.word	0x0800393f
 80036d0:	0800393f 	.word	0x0800393f
 80036d4:	0800393f 	.word	0x0800393f
 80036d8:	0800393f 	.word	0x0800393f
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	0800393f 	.word	0x0800393f
 80036e4:	0800393f 	.word	0x0800393f
 80036e8:	0800393f 	.word	0x0800393f
 80036ec:	0800393f 	.word	0x0800393f
 80036f0:	0800393f 	.word	0x0800393f
 80036f4:	0800393f 	.word	0x0800393f
 80036f8:	0800393f 	.word	0x0800393f
 80036fc:	08003733 	.word	0x08003733
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003700:	4b94      	ldr	r3, [pc, #592]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800370c:	4b91      	ldr	r3, [pc, #580]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	4a90      	ldr	r2, [pc, #576]	; (8003958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
 800371c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800371e:	e111      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003720:	4b8d      	ldr	r3, [pc, #564]	; (8003958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003722:	61bb      	str	r3, [r7, #24]
    break;
 8003724:	e10e      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003726:	4b8d      	ldr	r3, [pc, #564]	; (800395c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003728:	61bb      	str	r3, [r7, #24]
    break;
 800372a:	e10b      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800372c:	4b8c      	ldr	r3, [pc, #560]	; (8003960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800372e:	61bb      	str	r3, [r7, #24]
    break;
 8003730:	e108      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003732:	4b88      	ldr	r3, [pc, #544]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800373c:	4b85      	ldr	r3, [pc, #532]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003746:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003748:	4b82      	ldr	r3, [pc, #520]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003752:	4b80      	ldr	r3, [pc, #512]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	08db      	lsrs	r3, r3, #3
 8003758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80e1 	beq.w	8003938 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b02      	cmp	r3, #2
 800377a:	f000 8083 	beq.w	8003884 <HAL_RCC_GetSysClockFreq+0x204>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b02      	cmp	r3, #2
 8003782:	f200 80a1 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x248>
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x114>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d056      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003792:	e099      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003794:	4b6f      	ldr	r3, [pc, #444]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02d      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037a0:	4b6c      	ldr	r3, [pc, #432]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	08db      	lsrs	r3, r3, #3
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	4a6b      	ldr	r2, [pc, #428]	; (8003958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b62      	ldr	r3, [pc, #392]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a02 	vldr	s12, [r7, #8]
 80037de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80037fa:	e087      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b51      	ldr	r3, [pc, #324]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003822:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800383e:	e065      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800396c <HAL_RCC_GetSysClockFreq+0x2ec>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b40      	ldr	r3, [pc, #256]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a02 	vldr	s12, [r7, #8]
 8003866:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003882:	e043      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003896:	4b2f      	ldr	r3, [pc, #188]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038c6:	e021      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800396c <HAL_RCC_GetSysClockFreq+0x2ec>
 80038d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800390a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	0a5b      	lsrs	r3, r3, #9
 8003912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003916:	3301      	adds	r3, #1
 8003918:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003924:	edd7 6a07 	vldr	s13, [r7, #28]
 8003928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003930:	ee17 3a90 	vmov	r3, s15
 8003934:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003936:	e005      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
    break;
 800393c:	e002      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003940:	61bb      	str	r3, [r7, #24]
    break;
 8003942:	bf00      	nop
  }

  return sysclockfreq;
 8003944:	69bb      	ldr	r3, [r7, #24]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3724      	adds	r7, #36	; 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	58024400 	.word	0x58024400
 8003958:	03d09000 	.word	0x03d09000
 800395c:	003d0900 	.word	0x003d0900
 8003960:	007a1200 	.word	0x007a1200
 8003964:	46000000 	.word	0x46000000
 8003968:	4c742400 	.word	0x4c742400
 800396c:	4a742400 	.word	0x4a742400
 8003970:	4af42400 	.word	0x4af42400

08003974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800397a:	f7ff fe81 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 800397e:	4602      	mov	r2, r0
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	490f      	ldr	r1, [pc, #60]	; (80039c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800398c:	5ccb      	ldrb	r3, [r1, r3]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	fa22 f303 	lsr.w	r3, r2, r3
 80039ae:	4a07      	ldr	r2, [pc, #28]	; (80039cc <HAL_RCC_GetHCLKFreq+0x58>)
 80039b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039b8:	4b04      	ldr	r3, [pc, #16]	; (80039cc <HAL_RCC_GetHCLKFreq+0x58>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	58024400 	.word	0x58024400
 80039c8:	08008b18 	.word	0x08008b18
 80039cc:	24000004 	.word	0x24000004
 80039d0:	24000000 	.word	0x24000000

080039d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039d8:	f7ff ffcc 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4904      	ldr	r1, [pc, #16]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	58024400 	.word	0x58024400
 80039fc:	08008b18 	.word	0x08008b18

08003a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a04:	f7ff ffb6 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4904      	ldr	r1, [pc, #16]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	58024400 	.word	0x58024400
 8003a28:	08008b18 	.word	0x08008b18

08003a2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a38:	2300      	movs	r3, #0
 8003a3a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d03f      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a50:	d02a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a56:	d824      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a5c:	d018      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a62:	d81e      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a6c:	d007      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a6e:	e018      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a70:	4ba3      	ldr	r3, [pc, #652]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	4aa2      	ldr	r2, [pc, #648]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a7c:	e015      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2102      	movs	r1, #2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 f9d5 	bl	8004e34 <RCCEx_PLL2_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a8e:	e00c      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3324      	adds	r3, #36	; 0x24
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fa7e 	bl	8004f98 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003aa0:	e003      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa6:	e000      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ab0:	4b93      	ldr	r3, [pc, #588]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003abc:	4990      	ldr	r1, [pc, #576]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ac2:	e001      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d03d      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d826      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003adc:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae2:	bf00      	nop
 8003ae4:	08003af9 	.word	0x08003af9
 8003ae8:	08003b07 	.word	0x08003b07
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b31 	.word	0x08003b31
 8003af4:	08003b31 	.word	0x08003b31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af8:	4b81      	ldr	r3, [pc, #516]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	4a80      	ldr	r2, [pc, #512]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b04:	e015      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 f991 	bl	8004e34 <RCCEx_PLL2_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b16:	e00c      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3324      	adds	r3, #36	; 0x24
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fa3a 	bl	8004f98 <RCCEx_PLL3_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b38:	4b71      	ldr	r3, [pc, #452]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3c:	f023 0207 	bic.w	r2, r3, #7
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	496e      	ldr	r1, [pc, #440]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	650b      	str	r3, [r1, #80]	; 0x50
 8003b4a:	e001      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d042      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b64:	d02b      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6a:	d825      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003b6c:	2bc0      	cmp	r3, #192	; 0xc0
 8003b6e:	d028      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b70:	2bc0      	cmp	r3, #192	; 0xc0
 8003b72:	d821      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d016      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d81d      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d007      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003b84:	e018      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b86:	4b5e      	ldr	r3, [pc, #376]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	4a5d      	ldr	r2, [pc, #372]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b92:	e017      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 f94a 	bl	8004e34 <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003ba4:	e00e      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3324      	adds	r3, #36	; 0x24
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f9f3 	bl	8004f98 <RCCEx_PLL3_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003bb6:	e005      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	75fb      	strb	r3, [r7, #23]
      break;
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bca:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	494a      	ldr	r1, [pc, #296]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	650b      	str	r3, [r1, #80]	; 0x50
 8003bdc:	e001      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d049      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bf8:	d030      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bfe:	d82a      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c04:	d02c      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003c06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c0a:	d824      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c10:	d018      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c16:	d81e      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c20:	d007      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003c22:	e018      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	4a35      	ldr	r2, [pc, #212]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c30:	e017      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f8fb 	bl	8004e34 <RCCEx_PLL2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c42:	e00e      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3324      	adds	r3, #36	; 0x24
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 f9a4 	bl	8004f98 <RCCEx_PLL3_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c54:	e005      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5a:	e002      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003c5c:	bf00      	nop
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c76:	4922      	ldr	r1, [pc, #136]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	658b      	str	r3, [r1, #88]	; 0x58
 8003c7c:	e001      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d04b      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c98:	d030      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003c9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c9e:	d82a      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ca0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ca4:	d02e      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003ca6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003caa:	d824      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003cac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb0:	d018      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb6:	d81e      	bhi.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc0:	d007      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003cc2:	e018      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cd0:	e019      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 f8ab 	bl	8004e34 <RCCEx_PLL2_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ce2:	e010      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3324      	adds	r3, #36	; 0x24
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 f954 	bl	8004f98 <RCCEx_PLL3_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cf4:	e007      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003cfc:	bf00      	nop
 8003cfe:	e002      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003d00:	58024400 	.word	0x58024400
      break;
 8003d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d0c:	4b99      	ldr	r3, [pc, #612]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d1a:	4996      	ldr	r1, [pc, #600]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	658b      	str	r3, [r1, #88]	; 0x58
 8003d20:	e001      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d032      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d36:	2b30      	cmp	r3, #48	; 0x30
 8003d38:	d01c      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d817      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d00c      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d813      	bhi.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d10f      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4e:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	4a88      	ldr	r2, [pc, #544]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d5a:	e00e      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	2102      	movs	r1, #2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 f866 	bl	8004e34 <RCCEx_PLL2_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d6c:	e005      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003d74:	bf00      	nop
 8003d76:	e000      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d80:	4b7c      	ldr	r3, [pc, #496]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8c:	4979      	ldr	r1, [pc, #484]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d92:	e001      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
 8003d96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d047      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dac:	d030      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db2:	d82a      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003db4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003db8:	d02c      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003dba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dbe:	d824      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc4:	d018      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dca:	d81e      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d007      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003dd6:	e018      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd8:	4b66      	ldr	r3, [pc, #408]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a65      	ldr	r2, [pc, #404]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003de4:	e017      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 f821 	bl	8004e34 <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003df6:	e00e      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3324      	adds	r3, #36	; 0x24
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 f8ca 	bl	8004f98 <RCCEx_PLL3_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e08:	e005      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e1c:	4b55      	ldr	r3, [pc, #340]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	4952      	ldr	r1, [pc, #328]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e2e:	e001      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d049      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e48:	d02e      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4e:	d828      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003e50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e54:	d02a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e5a:	d822      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003e5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e60:	d026      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003e62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e66:	d81c      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e6c:	d010      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e72:	d816      	bhi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01d      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7c:	d111      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 ffd5 	bl	8004e34 <RCCEx_PLL2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e8e:	e012      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3324      	adds	r3, #36	; 0x24
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 f87e 	bl	8004f98 <RCCEx_PLL3_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ea0:	e009      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea6:	e006      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003ea8:	bf00      	nop
 8003eaa:	e004      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003eac:	bf00      	nop
 8003eae:	e002      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	492a      	ldr	r1, [pc, #168]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	650b      	str	r3, [r1, #80]	; 0x50
 8003ece:	e001      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d04d      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eea:	d02e      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef0:	d828      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d02a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d822      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003efe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f02:	d026      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003f04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f08:	d81c      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f0e:	d010      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f14:	d816      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01d      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	2101      	movs	r1, #1
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 ff84 	bl	8004e34 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f30:	e012      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3324      	adds	r3, #36	; 0x24
 8003f36:	2101      	movs	r1, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f82d 	bl	8004f98 <RCCEx_PLL3_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f42:	e009      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
      break;
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e004      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e002      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f5e:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f6c:	4901      	ldr	r1, [pc, #4]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	658b      	str	r3, [r1, #88]	; 0x58
 8003f72:	e003      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003f74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02f      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f90:	d00e      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f96:	d814      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d015      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa2:	4baf      	ldr	r3, [pc, #700]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	4aae      	ldr	r2, [pc, #696]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fae:	e00c      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ff3c 	bl	8004e34 <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fc0:	e003      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fd0:	4ba3      	ldr	r3, [pc, #652]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fdc:	49a0      	ldr	r1, [pc, #640]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	650b      	str	r3, [r1, #80]	; 0x50
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d81b      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	0800403b 	.word	0x0800403b
 8004008:	08004015 	.word	0x08004015
 800400c:	08004023 	.word	0x08004023
 8004010:	0800403b 	.word	0x0800403b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4b92      	ldr	r3, [pc, #584]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4a91      	ldr	r2, [pc, #580]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004020:	e00c      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3304      	adds	r3, #4
 8004026:	2102      	movs	r1, #2
 8004028:	4618      	mov	r0, r3
 800402a:	f000 ff03 	bl	8004e34 <RCCEx_PLL2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004032:	e003      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	75fb      	strb	r3, [r7, #23]
      break;
 8004038:	e000      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800403a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004042:	4b87      	ldr	r3, [pc, #540]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	f023 0203 	bic.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	4984      	ldr	r1, [pc, #528]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004050:	4313      	orrs	r3, r2
 8004052:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004054:	e001      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8086 	beq.w	8004174 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004068:	4b7e      	ldr	r3, [pc, #504]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a7d      	ldr	r2, [pc, #500]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800406e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004074:	f7fe f9ae 	bl	80023d4 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800407a:	e009      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7fe f9aa 	bl	80023d4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d902      	bls.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	75fb      	strb	r3, [r7, #23]
        break;
 800408e:	e005      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004090:	4b74      	ldr	r3, [pc, #464]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ef      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d166      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040a2:	4b6f      	ldr	r3, [pc, #444]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040ac:	4053      	eors	r3, r2
 80040ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d013      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b6:	4b6a      	ldr	r3, [pc, #424]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c0:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a66      	ldr	r2, [pc, #408]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040cc:	4b64      	ldr	r3, [pc, #400]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a63      	ldr	r2, [pc, #396]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040d8:	4a61      	ldr	r2, [pc, #388]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e8:	d115      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fe f973 	bl	80023d4 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f0:	e00b      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fe f96f 	bl	80023d4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d902      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	75fb      	strb	r3, [r7, #23]
            break;
 8004108:	e005      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800410a:	4b55      	ldr	r3, [pc, #340]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ed      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d126      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800412a:	d10d      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800412c:	4b4c      	ldr	r3, [pc, #304]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800413a:	0919      	lsrs	r1, r3, #4
 800413c:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800413e:	400b      	ands	r3, r1
 8004140:	4947      	ldr	r1, [pc, #284]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004142:	4313      	orrs	r3, r2
 8004144:	610b      	str	r3, [r1, #16]
 8004146:	e005      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004148:	4b45      	ldr	r3, [pc, #276]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	4a44      	ldr	r2, [pc, #272]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800414e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004152:	6113      	str	r3, [r2, #16]
 8004154:	4b42      	ldr	r3, [pc, #264]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800415e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004162:	493f      	ldr	r1, [pc, #252]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004164:	4313      	orrs	r3, r2
 8004166:	670b      	str	r3, [r1, #112]	; 0x70
 8004168:	e004      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	75bb      	strb	r3, [r7, #22]
 800416e:	e001      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8085 	beq.w	800428c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004186:	2b28      	cmp	r3, #40	; 0x28
 8004188:	d866      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	0800426d 	.word	0x0800426d
 8004194:	08004259 	.word	0x08004259
 8004198:	08004259 	.word	0x08004259
 800419c:	08004259 	.word	0x08004259
 80041a0:	08004259 	.word	0x08004259
 80041a4:	08004259 	.word	0x08004259
 80041a8:	08004259 	.word	0x08004259
 80041ac:	08004259 	.word	0x08004259
 80041b0:	08004235 	.word	0x08004235
 80041b4:	08004259 	.word	0x08004259
 80041b8:	08004259 	.word	0x08004259
 80041bc:	08004259 	.word	0x08004259
 80041c0:	08004259 	.word	0x08004259
 80041c4:	08004259 	.word	0x08004259
 80041c8:	08004259 	.word	0x08004259
 80041cc:	08004259 	.word	0x08004259
 80041d0:	08004247 	.word	0x08004247
 80041d4:	08004259 	.word	0x08004259
 80041d8:	08004259 	.word	0x08004259
 80041dc:	08004259 	.word	0x08004259
 80041e0:	08004259 	.word	0x08004259
 80041e4:	08004259 	.word	0x08004259
 80041e8:	08004259 	.word	0x08004259
 80041ec:	08004259 	.word	0x08004259
 80041f0:	0800426d 	.word	0x0800426d
 80041f4:	08004259 	.word	0x08004259
 80041f8:	08004259 	.word	0x08004259
 80041fc:	08004259 	.word	0x08004259
 8004200:	08004259 	.word	0x08004259
 8004204:	08004259 	.word	0x08004259
 8004208:	08004259 	.word	0x08004259
 800420c:	08004259 	.word	0x08004259
 8004210:	0800426d 	.word	0x0800426d
 8004214:	08004259 	.word	0x08004259
 8004218:	08004259 	.word	0x08004259
 800421c:	08004259 	.word	0x08004259
 8004220:	08004259 	.word	0x08004259
 8004224:	08004259 	.word	0x08004259
 8004228:	08004259 	.word	0x08004259
 800422c:	08004259 	.word	0x08004259
 8004230:	0800426d 	.word	0x0800426d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fdfa 	bl	8004e34 <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004244:	e013      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3324      	adds	r3, #36	; 0x24
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fea3 	bl	8004f98 <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004256:	e00a      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	e007      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
 8004264:	58024800 	.word	0x58024800
 8004268:	00ffffcf 	.word	0x00ffffcf
      break;
 800426c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004274:	4b96      	ldr	r3, [pc, #600]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004280:	4993      	ldr	r1, [pc, #588]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	654b      	str	r3, [r1, #84]	; 0x54
 8004286:	e001      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d038      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429c:	2b05      	cmp	r3, #5
 800429e:	d821      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042eb 	.word	0x080042eb
 80042ac:	080042c1 	.word	0x080042c1
 80042b0:	080042d3 	.word	0x080042d3
 80042b4:	080042eb 	.word	0x080042eb
 80042b8:	080042eb 	.word	0x080042eb
 80042bc:	080042eb 	.word	0x080042eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fdb4 	bl	8004e34 <RCCEx_PLL2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042d0:	e00c      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3324      	adds	r3, #36	; 0x24
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fe5d 	bl	8004f98 <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042e2:	e003      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
      break;
 80042e8:	e000      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80042ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042f2:	4b77      	ldr	r3, [pc, #476]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fe:	4974      	ldr	r1, [pc, #464]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	654b      	str	r3, [r1, #84]	; 0x54
 8004304:	e001      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	2b05      	cmp	r3, #5
 800431e:	d821      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	0800436b 	.word	0x0800436b
 800432c:	08004341 	.word	0x08004341
 8004330:	08004353 	.word	0x08004353
 8004334:	0800436b 	.word	0x0800436b
 8004338:	0800436b 	.word	0x0800436b
 800433c:	0800436b 	.word	0x0800436b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fd74 	bl	8004e34 <RCCEx_PLL2_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004350:	e00c      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3324      	adds	r3, #36	; 0x24
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fe1d 	bl	8004f98 <RCCEx_PLL3_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004362:	e003      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
      break;
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800436a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436c:	7dfb      	ldrb	r3, [r7, #23]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004372:	4b57      	ldr	r3, [pc, #348]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	f023 0207 	bic.w	r2, r3, #7
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	4953      	ldr	r1, [pc, #332]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	658b      	str	r3, [r1, #88]	; 0x58
 8004386:	e001      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	7dfb      	ldrb	r3, [r7, #23]
 800438a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d04b      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a2:	d02e      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80043a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043a8:	d828      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d02a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b4:	d822      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80043b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043ba:	d026      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80043bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043c0:	d81c      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80043c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c6:	d010      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80043c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043cc:	d816      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01d      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80043d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d6:	d111      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	2100      	movs	r1, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd28 	bl	8004e34 <RCCEx_PLL2_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043e8:	e012      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3324      	adds	r3, #36	; 0x24
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fdd1 	bl	8004f98 <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80043fa:	e009      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004400:	e006      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004402:	bf00      	nop
 8004404:	e004      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004406:	bf00      	nop
 8004408:	e002      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800440e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004416:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004424:	492a      	ldr	r1, [pc, #168]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	654b      	str	r3, [r1, #84]	; 0x54
 800442a:	e001      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d04d      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004442:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004446:	d02e      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004448:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800444c:	d828      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004452:	d02a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d822      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800445a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800445e:	d026      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004464:	d81c      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446a:	d010      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800446c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004470:	d816      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01d      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d111      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fcd6 	bl	8004e34 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800448c:	e012      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3324      	adds	r3, #36	; 0x24
 8004492:	2102      	movs	r1, #2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fd7f 	bl	8004f98 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800449e:	e009      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      break;
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80044a6:	bf00      	nop
 80044a8:	e004      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80044b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c8:	4901      	ldr	r1, [pc, #4]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	658b      	str	r3, [r1, #88]	; 0x58
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80044d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d04b      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044ee:	d02e      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80044f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80044f4:	d828      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80044f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fa:	d02a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80044fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004500:	d822      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004502:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004506:	d026      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004508:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800450c:	d81c      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800450e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004512:	d010      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004518:	d816      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01d      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800451e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004522:	d111      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fc82 	bl	8004e34 <RCCEx_PLL2_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004534:	e012      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3324      	adds	r3, #36	; 0x24
 800453a:	2102      	movs	r1, #2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fd2b 	bl	8004f98 <RCCEx_PLL3_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004546:	e009      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	75fb      	strb	r3, [r7, #23]
      break;
 800454c:	e006      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800454e:	bf00      	nop
 8004550:	e004      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800455a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004562:	4b9d      	ldr	r3, [pc, #628]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004570:	4999      	ldr	r1, [pc, #612]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004572:	4313      	orrs	r3, r2
 8004574:	658b      	str	r3, [r1, #88]	; 0x58
 8004576:	e001      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800458e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004592:	d10a      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3324      	adds	r3, #36	; 0x24
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fcfc 	bl	8004f98 <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045aa:	4b8b      	ldr	r3, [pc, #556]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b8:	4987      	ldr	r1, [pc, #540]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d10a      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3324      	adds	r3, #36	; 0x24
 80045da:	2102      	movs	r1, #2
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fcdb 	bl	8004f98 <RCCEx_PLL3_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ec:	4b7a      	ldr	r3, [pc, #488]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fa:	4977      	ldr	r1, [pc, #476]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d034      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004616:	d01d      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800461c:	d817      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004626:	d009      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004628:	e011      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fbff 	bl	8004e34 <RCCEx_PLL2_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800463a:	e00c      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3324      	adds	r3, #36	; 0x24
 8004640:	2102      	movs	r1, #2
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fca8 	bl	8004f98 <RCCEx_PLL3_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800464c:	e003      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	75fb      	strb	r3, [r7, #23]
      break;
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800465c:	4b5e      	ldr	r3, [pc, #376]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800466a:	495b      	ldr	r1, [pc, #364]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800466c:	4313      	orrs	r3, r2
 800466e:	658b      	str	r3, [r1, #88]	; 0x58
 8004670:	e001      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d033      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004688:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800468c:	d01c      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800468e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004692:	d816      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004698:	d003      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800469a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800469e:	d007      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80046a0:	e00f      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a2:	4b4d      	ldr	r3, [pc, #308]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	4a4c      	ldr	r2, [pc, #304]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80046ae:	e00c      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3324      	adds	r3, #36	; 0x24
 80046b4:	2101      	movs	r1, #1
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fc6e 	bl	8004f98 <RCCEx_PLL3_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80046c0:	e003      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
      break;
 80046c6:	e000      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80046c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046d0:	4b41      	ldr	r3, [pc, #260]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046de:	493e      	ldr	r1, [pc, #248]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	654b      	str	r3, [r1, #84]	; 0x54
 80046e4:	e001      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d029      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80046fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004702:	d007      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004704:	e00f      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004706:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	4a33      	ldr	r2, [pc, #204]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800470c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004710:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004712:	e00b      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	2102      	movs	r1, #2
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fb8a 	bl	8004e34 <RCCEx_PLL2_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004724:	e002      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
      break;
 800472a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004732:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004736:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473e:	4926      	ldr	r1, [pc, #152]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004740:	4313      	orrs	r3, r2
 8004742:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004744:	e001      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3324      	adds	r3, #36	; 0x24
 800475a:	2102      	movs	r1, #2
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fc1b 	bl	8004f98 <RCCEx_PLL3_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d033      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004780:	d017      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004786:	d811      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800478c:	d013      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800478e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004792:	d80b      	bhi.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d010      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479c:	d106      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	4a0d      	ldr	r2, [pc, #52]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80047aa:	e007      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	75fb      	strb	r3, [r7, #23]
      break;
 80047b0:	e004      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80047b2:	bf00      	nop
 80047b4:	e002      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80047b6:	bf00      	nop
 80047b8:	e000      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80047ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ce:	4902      	ldr	r1, [pc, #8]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	654b      	str	r3, [r1, #84]	; 0x54
 80047d4:	e004      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80047d6:	bf00      	nop
 80047d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047ec:	4b31      	ldr	r3, [pc, #196]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	492e      	ldr	r1, [pc, #184]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800480a:	4b2a      	ldr	r3, [pc, #168]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004818:	4926      	ldr	r1, [pc, #152]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800481a:	4313      	orrs	r3, r2
 800481c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d008      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800482a:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004836:	491f      	ldr	r1, [pc, #124]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004838:	4313      	orrs	r3, r2
 800483a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00d      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800484e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004852:	6113      	str	r3, [r2, #16]
 8004854:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800485e:	4915      	ldr	r1, [pc, #84]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004860:	4313      	orrs	r3, r2
 8004862:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	da08      	bge.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800486e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004870:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004878:	490e      	ldr	r1, [pc, #56]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800487a:	4313      	orrs	r3, r2
 800487c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	4906      	ldr	r1, [pc, #24]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800489a:	4313      	orrs	r3, r2
 800489c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800489e:	7dbb      	ldrb	r3, [r7, #22]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400

080048b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048bc:	f7ff f85a 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	; (80048e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	58024400 	.word	0x58024400
 80048e0:	08008b18 	.word	0x08008b18

080048e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048ec:	4ba1      	ldr	r3, [pc, #644]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80048f6:	4b9f      	ldr	r3, [pc, #636]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	0b1b      	lsrs	r3, r3, #12
 80048fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004900:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004902:	4b9c      	ldr	r3, [pc, #624]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800490e:	4b99      	ldr	r3, [pc, #612]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	08db      	lsrs	r3, r3, #3
 8004914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8111 	beq.w	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b02      	cmp	r3, #2
 8004936:	f000 8083 	beq.w	8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b02      	cmp	r3, #2
 800493e:	f200 80a1 	bhi.w	8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d056      	beq.n	80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800494e:	e099      	b.n	8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004950:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02d      	beq.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800495c:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	08db      	lsrs	r3, r3, #3
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	4a84      	ldr	r2, [pc, #528]	; (8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004986:	4b7b      	ldr	r3, [pc, #492]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004996:	ed97 6a03 	vldr	s12, [r7, #12]
 800499a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800499e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049b6:	e087      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ca:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049da:	ed97 6a03 	vldr	s12, [r7, #12]
 80049de:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049fa:	e065      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a3e:	e043      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b48      	ldr	r3, [pc, #288]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a82:	e021      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ac6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	0a5b      	lsrs	r3, r3, #9
 8004ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aee:	ee17 2a90 	vmov	r2, s15
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	0c1b      	lsrs	r3, r3, #16
 8004afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1c:	ee17 2a90 	vmov	r2, s15
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004b24:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b4a:	ee17 2a90 	vmov	r2, s15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b52:	e008      	b.n	8004b66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
}
 8004b66:	bf00      	nop
 8004b68:	3724      	adds	r7, #36	; 0x24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
 8004b78:	03d09000 	.word	0x03d09000
 8004b7c:	46000000 	.word	0x46000000
 8004b80:	4c742400 	.word	0x4c742400
 8004b84:	4a742400 	.word	0x4a742400
 8004b88:	4af42400 	.word	0x4af42400

08004b8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b94:	4ba1      	ldr	r3, [pc, #644]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004b9e:	4b9f      	ldr	r3, [pc, #636]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	0d1b      	lsrs	r3, r3, #20
 8004ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004baa:	4b9c      	ldr	r3, [pc, #624]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004bb6:	4b99      	ldr	r3, [pc, #612]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8111 	beq.w	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	f000 8083 	beq.w	8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f200 80a1 	bhi.w	8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d056      	beq.n	8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bf6:	e099      	b.n	8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf8:	4b88      	ldr	r3, [pc, #544]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02d      	beq.n	8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c04:	4b85      	ldr	r3, [pc, #532]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	08db      	lsrs	r3, r3, #3
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	4a84      	ldr	r2, [pc, #528]	; (8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
 8004c14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2e:	4b7b      	ldr	r3, [pc, #492]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c5e:	e087      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c72:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ca2:	e065      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb6:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ce6:	e043      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfa:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d2a:	e021      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3e:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004d70:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	0a5b      	lsrs	r3, r3, #9
 8004d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d96:	ee17 2a90 	vmov	r2, s15
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004d9e:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004db4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc4:	ee17 2a90 	vmov	r2, s15
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	0e1b      	lsrs	r3, r3, #24
 8004dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df2:	ee17 2a90 	vmov	r2, s15
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dfa:	e008      	b.n	8004e0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
}
 8004e0e:	bf00      	nop
 8004e10:	3724      	adds	r7, #36	; 0x24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	03d09000 	.word	0x03d09000
 8004e24:	46000000 	.word	0x46000000
 8004e28:	4c742400 	.word	0x4c742400
 8004e2c:	4a742400 	.word	0x4a742400
 8004e30:	4af42400 	.word	0x4af42400

08004e34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e42:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d101      	bne.n	8004e52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e099      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e52:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a4e      	ldr	r2, [pc, #312]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fd fab9 	bl	80023d4 <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e64:	e008      	b.n	8004e78 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e66:	f7fd fab5 	bl	80023d4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e086      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e78:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e84:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	493f      	ldr	r1, [pc, #252]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	628b      	str	r3, [r1, #40]	; 0x28
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	025b      	lsls	r3, r3, #9
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ec8:	4931      	ldr	r1, [pc, #196]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ece:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	492d      	ldr	r1, [pc, #180]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	f023 0220 	bic.w	r2, r3, #32
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	4928      	ldr	r1, [pc, #160]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ef2:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	f023 0310 	bic.w	r3, r3, #16
 8004efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <RCCEx_PLL2_Config+0x160>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	69d2      	ldr	r2, [r2, #28]
 8004f0a:	00d2      	lsls	r2, r2, #3
 8004f0c:	4920      	ldr	r1, [pc, #128]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f12:	4b1f      	ldr	r3, [pc, #124]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	f043 0310 	orr.w	r3, r3, #16
 8004f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f30:	e00f      	b.n	8004f52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f44:	e005      	b.n	8004f52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f52:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fd fa39 	bl	80023d4 <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f64:	e008      	b.n	8004f78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f66:	f7fd fa35 	bl	80023d4 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e006      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	58024400 	.word	0x58024400
 8004f94:	ffff0007 	.word	0xffff0007

08004f98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fa6:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d101      	bne.n	8004fb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e099      	b.n	80050ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fb6:	4b4f      	ldr	r3, [pc, #316]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a4e      	ldr	r2, [pc, #312]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fd fa07 	bl	80023d4 <HAL_GetTick>
 8004fc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fc8:	e008      	b.n	8004fdc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fca:	f7fd fa03 	bl	80023d4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e086      	b.n	80050ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fdc:	4b45      	ldr	r3, [pc, #276]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	051b      	lsls	r3, r3, #20
 8004ff6:	493f      	ldr	r1, [pc, #252]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	628b      	str	r3, [r1, #40]	; 0x28
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	3b01      	subs	r3, #1
 8005002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	3b01      	subs	r3, #1
 800500c:	025b      	lsls	r3, r3, #9
 800500e:	b29b      	uxth	r3, r3
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	3b01      	subs	r3, #1
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800502c:	4931      	ldr	r1, [pc, #196]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005032:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	492d      	ldr	r1, [pc, #180]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005044:	4b2b      	ldr	r3, [pc, #172]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	4928      	ldr	r1, [pc, #160]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005056:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800505c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <RCCEx_PLL3_Config+0x160>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	69d2      	ldr	r2, [r2, #28]
 800506e:	00d2      	lsls	r2, r2, #3
 8005070:	4920      	ldr	r1, [pc, #128]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800508e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005094:	e00f      	b.n	80050b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800509c:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050a8:	e005      	b.n	80050b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fd f987 	bl	80023d4 <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050c8:	e008      	b.n	80050dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80050ca:	f7fd f983 	bl	80023d4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e006      	b.n	80050ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
 80050f8:	ffff0007 	.word	0xffff0007

080050fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e0f1      	b.n	80052f2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a78      	ldr	r2, [pc, #480]	; (80052fc <HAL_SPI_Init+0x200>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00f      	beq.n	800513e <HAL_SPI_Init+0x42>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a77      	ldr	r2, [pc, #476]	; (8005300 <HAL_SPI_Init+0x204>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00a      	beq.n	800513e <HAL_SPI_Init+0x42>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a75      	ldr	r2, [pc, #468]	; (8005304 <HAL_SPI_Init+0x208>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d005      	beq.n	800513e <HAL_SPI_Init+0x42>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b0f      	cmp	r3, #15
 8005138:	d901      	bls.n	800513e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0d9      	b.n	80052f2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 ff66 	bl	8006010 <SPI_GetPacketSize>
 8005144:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a6c      	ldr	r2, [pc, #432]	; (80052fc <HAL_SPI_Init+0x200>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00c      	beq.n	800516a <HAL_SPI_Init+0x6e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a6a      	ldr	r2, [pc, #424]	; (8005300 <HAL_SPI_Init+0x204>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <HAL_SPI_Init+0x6e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a69      	ldr	r2, [pc, #420]	; (8005304 <HAL_SPI_Init+0x208>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d002      	beq.n	800516a <HAL_SPI_Init+0x6e>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b08      	cmp	r3, #8
 8005168:	d811      	bhi.n	800518e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800516e:	4a63      	ldr	r2, [pc, #396]	; (80052fc <HAL_SPI_Init+0x200>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a61      	ldr	r2, [pc, #388]	; (8005300 <HAL_SPI_Init+0x204>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_SPI_Init+0x8c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a60      	ldr	r2, [pc, #384]	; (8005304 <HAL_SPI_Init+0x208>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d104      	bne.n	8005192 <HAL_SPI_Init+0x96>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b10      	cmp	r3, #16
 800518c:	d901      	bls.n	8005192 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0af      	b.n	80052f2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc feca 	bl	8001f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80051ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051d8:	d119      	bne.n	800520e <HAL_SPI_Init+0x112>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e2:	d103      	bne.n	80051ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10c      	bne.n	800520e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80051f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051fc:	d107      	bne.n	800520e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800520c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	431a      	orrs	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005220:	ea42 0103 	orr.w	r1, r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526e:	ea42 0103 	orr.w	r1, r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d113      	bne.n	80052ae <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005298:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40013000 	.word	0x40013000
 8005300:	40003800 	.word	0x40003800
 8005304:	40003c00 	.word	0x40003c00

08005308 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3320      	adds	r3, #32
 800531e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_SPI_Transmit+0x2a>
 800532e:	2302      	movs	r3, #2
 8005330:	e1d7      	b.n	80056e2 <HAL_SPI_Transmit+0x3da>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800533a:	f7fd f84b 	bl	80023d4 <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d007      	beq.n	800535c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800534c:	2302      	movs	r3, #2
 800534e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005358:	7efb      	ldrb	r3, [r7, #27]
 800535a:	e1c2      	b.n	80056e2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_SPI_Transmit+0x60>
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d107      	bne.n	8005378 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005374:	7efb      	ldrb	r3, [r7, #27]
 8005376:	e1b4      	b.n	80056e2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2203      	movs	r2, #3
 800537c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80053c8:	d107      	bne.n	80053da <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	4b96      	ldr	r3, [pc, #600]	; (800563c <HAL_SPI_Transmit+0x334>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	88f9      	ldrh	r1, [r7, #6]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0201 	orr.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005406:	d107      	bne.n	8005418 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b0f      	cmp	r3, #15
 800541e:	d947      	bls.n	80054b0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005420:	e03f      	b.n	80054a2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b02      	cmp	r3, #2
 800542e:	d114      	bne.n	800545a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005458:	e023      	b.n	80054a2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800545a:	f7fc ffbb 	bl	80023d4 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d803      	bhi.n	8005472 <HAL_SPI_Transmit+0x16a>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d102      	bne.n	8005478 <HAL_SPI_Transmit+0x170>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d114      	bne.n	80054a2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fcfb 	bl	8005e74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e11f      	b.n	80056e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1b9      	bne.n	8005422 <HAL_SPI_Transmit+0x11a>
 80054ae:	e0f2      	b.n	8005696 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	2b07      	cmp	r3, #7
 80054b6:	f240 80e7 	bls.w	8005688 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80054ba:	e05d      	b.n	8005578 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d132      	bne.n	8005530 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d918      	bls.n	8005508 <HAL_SPI_Transmit+0x200>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d014      	beq.n	8005508 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	1d1a      	adds	r2, r3, #4
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b02      	subs	r3, #2
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005506:	e037      	b.n	8005578 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550c:	881a      	ldrh	r2, [r3, #0]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005516:	1c9a      	adds	r2, r3, #2
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800552e:	e023      	b.n	8005578 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005530:	f7fc ff50 	bl	80023d4 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d803      	bhi.n	8005548 <HAL_SPI_Transmit+0x240>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d102      	bne.n	800554e <HAL_SPI_Transmit+0x246>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d114      	bne.n	8005578 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fc90 	bl	8005e74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005562:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e0b4      	b.n	80056e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d19b      	bne.n	80054bc <HAL_SPI_Transmit+0x1b4>
 8005584:	e087      	b.n	8005696 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b02      	cmp	r3, #2
 8005592:	d155      	bne.n	8005640 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b03      	cmp	r3, #3
 800559e:	d918      	bls.n	80055d2 <HAL_SPI_Transmit+0x2ca>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d914      	bls.n	80055d2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b04      	subs	r3, #4
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80055d0:	e05a      	b.n	8005688 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d917      	bls.n	800560e <HAL_SPI_Transmit+0x306>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d013      	beq.n	800560e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ea:	881a      	ldrh	r2, [r3, #0]
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b02      	subs	r3, #2
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800560c:	e03c      	b.n	8005688 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3320      	adds	r3, #32
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005638:	e026      	b.n	8005688 <HAL_SPI_Transmit+0x380>
 800563a:	bf00      	nop
 800563c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005640:	f7fc fec8 	bl	80023d4 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d803      	bhi.n	8005658 <HAL_SPI_Transmit+0x350>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d102      	bne.n	800565e <HAL_SPI_Transmit+0x356>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d114      	bne.n	8005688 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fc08 	bl	8005e74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e02c      	b.n	80056e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f af78 	bne.w	8005586 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	2108      	movs	r1, #8
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fc87 	bl	8005fb4 <SPI_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b2:	f043 0220 	orr.w	r2, r3, #32
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fbd9 	bl	8005e74 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80056e0:	7efb      	ldrb	r3, [r7, #27]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop

080056ec <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	; 0x28
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3330      	adds	r3, #48	; 0x30
 8005706:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005710:	d112      	bne.n	8005738 <HAL_SPI_Receive+0x4c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10e      	bne.n	8005738 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2204      	movs	r2, #4
 800571e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f978 	bl	8005a24 <HAL_SPI_TransmitReceive>
 8005734:	4603      	mov	r3, r0
 8005736:	e16f      	b.n	8005a18 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_SPI_Receive+0x5a>
 8005742:	2302      	movs	r3, #2
 8005744:	e168      	b.n	8005a18 <HAL_SPI_Receive+0x32c>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800574e:	f7fc fe41 	bl	80023d4 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d007      	beq.n	8005770 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005760:	2302      	movs	r3, #2
 8005762:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800576c:	7ffb      	ldrb	r3, [r7, #31]
 800576e:	e153      	b.n	8005a18 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Receive+0x90>
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005788:	7ffb      	ldrb	r3, [r7, #31]
 800578a:	e145      	b.n	8005a18 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2204      	movs	r2, #4
 8005790:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80057dc:	d107      	bne.n	80057ee <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	4b8a      	ldr	r3, [pc, #552]	; (8005a20 <HAL_SPI_Receive+0x334>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	88f9      	ldrh	r1, [r7, #6]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	430b      	orrs	r3, r1
 8005800:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800581a:	d107      	bne.n	800582c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2b0f      	cmp	r3, #15
 8005832:	d948      	bls.n	80058c6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005834:	e040      	b.n	80058b8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	f248 0308 	movw	r3, #32776	; 0x8008
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d014      	beq.n	8005870 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800584e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005850:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005856:	1d1a      	adds	r2, r3, #4
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800586e:	e023      	b.n	80058b8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005870:	f7fc fdb0 	bl	80023d4 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d803      	bhi.n	8005888 <HAL_SPI_Receive+0x19c>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d102      	bne.n	800588e <HAL_SPI_Receive+0x1a2>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d114      	bne.n	80058b8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 faf0 	bl	8005e74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e0af      	b.n	8005a18 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1b8      	bne.n	8005836 <HAL_SPI_Receive+0x14a>
 80058c4:	e095      	b.n	80059f2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b07      	cmp	r3, #7
 80058cc:	f240 808b 	bls.w	80059e6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80058d0:	e03f      	b.n	8005952 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d114      	bne.n	800590a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	8812      	ldrh	r2, [r2, #0]
 80058e8:	b292      	uxth	r2, r2
 80058ea:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005908:	e023      	b.n	8005952 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800590a:	f7fc fd63 	bl	80023d4 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d803      	bhi.n	8005922 <HAL_SPI_Receive+0x236>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d102      	bne.n	8005928 <HAL_SPI_Receive+0x23c>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d114      	bne.n	8005952 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 faa3 	bl	8005e74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800593c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e062      	b.n	8005a18 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1b9      	bne.n	80058d2 <HAL_SPI_Receive+0x1e6>
 800595e:	e048      	b.n	80059f2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d117      	bne.n	800599e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597a:	7812      	ldrb	r2, [r2, #0]
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800599c:	e023      	b.n	80059e6 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599e:	f7fc fd19 	bl	80023d4 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d803      	bhi.n	80059b6 <HAL_SPI_Receive+0x2ca>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_Receive+0x2d0>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d114      	bne.n	80059e6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fa59 	bl	8005e74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e018      	b.n	8005a18 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1b6      	bne.n	8005960 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fa3e 	bl	8005e74 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005a16:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	ffff0000 	.word	0xffff0000

08005a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08e      	sub	sp, #56	; 0x38
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3320      	adds	r3, #32
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3330      	adds	r3, #48	; 0x30
 8005a46:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x32>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e209      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x446>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a5e:	f7fc fcb9 	bl	80023d4 <HAL_GetTick>
 8005a62:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005a68:	887b      	ldrh	r3, [r7, #2]
 8005a6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a72:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a7a:	7efb      	ldrb	r3, [r7, #27]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d014      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x86>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a86:	d106      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005a90:	7efb      	ldrb	r3, [r7, #27]
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d009      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
 8005a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aa8:	e1df      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x98>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x98>
 8005ab6:	887b      	ldrh	r3, [r7, #2]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d109      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005aca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ace:	e1cc      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d003      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	887a      	ldrh	r2, [r7, #2]
 8005af6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	887a      	ldrh	r2, [r7, #2]
 8005afe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	887a      	ldrh	r2, [r7, #2]
 8005b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	887a      	ldrh	r2, [r7, #2]
 8005b14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	4b82      	ldr	r3, [pc, #520]	; (8005d34 <HAL_SPI_TransmitReceive+0x310>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	8879      	ldrh	r1, [r7, #2]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b50:	d107      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d970      	bls.n	8005c4c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b6a:	e068      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d11a      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x18c>
 8005b7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d017      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bae:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	f248 0308 	movw	r3, #32776	; 0x8008
 8005bba:	4013      	ands	r3, r2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01a      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x1d2>
 8005bc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d017      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bd0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd6:	1d1a      	adds	r2, r3, #4
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005bf4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf6:	f7fc fbed 	bl	80023d4 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d803      	bhi.n	8005c0e <HAL_SPI_TransmitReceive+0x1ea>
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d102      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x1f0>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d114      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f92d 	bl	8005e74 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e115      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d193      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x148>
 8005c44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d190      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x148>
 8005c4a:	e0e7      	b.n	8005e1c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	f240 80dd 	bls.w	8005e10 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005c56:	e066      	b.n	8005d26 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d119      	bne.n	8005c9a <HAL_SPI_TransmitReceive+0x276>
 8005c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d016      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c70:	881a      	ldrh	r2, [r3, #0]
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005c98:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d11a      	bne.n	8005cde <HAL_SPI_TransmitReceive+0x2ba>
 8005ca8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d017      	beq.n	8005cde <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cb2:	6a3a      	ldr	r2, [r7, #32]
 8005cb4:	8812      	ldrh	r2, [r2, #0]
 8005cb6:	b292      	uxth	r2, r2
 8005cb8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cbe:	1c9a      	adds	r2, r3, #2
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005cdc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cde:	f7fc fb79 	bl	80023d4 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d803      	bhi.n	8005cf6 <HAL_SPI_TransmitReceive+0x2d2>
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d102      	bne.n	8005cfc <HAL_SPI_TransmitReceive+0x2d8>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d114      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f8b9 	bl	8005e74 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e0a1      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d195      	bne.n	8005c58 <HAL_SPI_TransmitReceive+0x234>
 8005d2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d192      	bne.n	8005c58 <HAL_SPI_TransmitReceive+0x234>
 8005d32:	e073      	b.n	8005e1c <HAL_SPI_TransmitReceive+0x3f8>
 8005d34:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d11b      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x35a>
 8005d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d018      	beq.n	8005d7e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3320      	adds	r3, #32
 8005d56:	7812      	ldrb	r2, [r2, #0]
 8005d58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d11d      	bne.n	8005dc8 <HAL_SPI_TransmitReceive+0x3a4>
 8005d8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01a      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d9e:	7812      	ldrb	r2, [r2, #0]
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005dc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc8:	f7fc fb04 	bl	80023d4 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d803      	bhi.n	8005de0 <HAL_SPI_TransmitReceive+0x3bc>
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d102      	bne.n	8005de6 <HAL_SPI_TransmitReceive+0x3c2>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d114      	bne.n	8005e10 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f844 	bl	8005e74 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e02c      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005e10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d190      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x314>
 8005e16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d18d      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	2200      	movs	r2, #0
 8005e24:	2108      	movs	r1, #8
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f8c4 	bl	8005fb4 <SPI_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f816 	bl	8005e74 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e001      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8005e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3730      	adds	r7, #48	; 0x30
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop

08005e74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0208 	orr.w	r2, r2, #8
 8005e92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0210 	orr.w	r2, r2, #16
 8005ea2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0201 	bic.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6919      	ldr	r1, [r3, #16]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <SPI_CloseTransfer+0x13c>)
 8005ec0:	400b      	ands	r3, r1
 8005ec2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005ed2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d014      	beq.n	8005f0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00f      	beq.n	8005f0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0220 	orr.w	r2, r2, #32
 8005f08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d014      	beq.n	8005f40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00f      	beq.n	8005f40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f26:	f043 0204 	orr.w	r2, r3, #4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00f      	beq.n	8005f6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f50:	f043 0201 	orr.w	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699a      	ldr	r2, [r3, #24]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00f      	beq.n	8005f94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7a:	f043 0208 	orr.w	r2, r3, #8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	fffffc90 	.word	0xfffffc90

08005fb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005fc4:	e010      	b.n	8005fe8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc6:	f7fc fa05 	bl	80023d4 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d803      	bhi.n	8005fde <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fdc:	d102      	bne.n	8005fe4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e00f      	b.n	8006008 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2301      	moveq	r3, #1
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	429a      	cmp	r2, r3
 8006004:	d0df      	beq.n	8005fc6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3307      	adds	r3, #7
 800602e:	08db      	lsrs	r3, r3, #3
 8006030:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	fb02 f303 	mul.w	r3, r2, r3
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e042      	b.n	80060de <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fb ffce 	bl	800200c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2224      	movs	r2, #36	; 0x24
 8006074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f8c3 	bl	8006214 <UART_SetConfig>
 800608e:	4603      	mov	r3, r0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e022      	b.n	80060de <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fe1f 	bl	8006ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fea6 	bl	8006e28 <UART_CheckIdleState>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b08a      	sub	sp, #40	; 0x28
 80060ea:	af02      	add	r7, sp, #8
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	f040 8083 	bne.w	8006208 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <HAL_UART_Transmit+0x28>
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e07b      	b.n	800620a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_UART_Transmit+0x3a>
 800611c:	2302      	movs	r3, #2
 800611e:	e074      	b.n	800620a <HAL_UART_Transmit+0x124>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2221      	movs	r2, #33	; 0x21
 8006134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006138:	f7fc f94c 	bl	80023d4 <HAL_GetTick>
 800613c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	88fa      	ldrh	r2, [r7, #6]
 800614a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	d108      	bne.n	800616a <HAL_UART_Transmit+0x84>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e003      	b.n	8006172 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800617a:	e02c      	b.n	80061d6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2200      	movs	r2, #0
 8006184:	2180      	movs	r1, #128	; 0x80
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fe99 	bl	8006ebe <UART_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e039      	b.n	800620a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	3302      	adds	r3, #2
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	e007      	b.n	80061c4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	781a      	ldrb	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	3301      	adds	r3, #1
 80061c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1cc      	bne.n	800617c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2140      	movs	r1, #64	; 0x40
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 fe66 	bl	8006ebe <UART_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e006      	b.n	800620a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e000      	b.n	800620a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006208:	2302      	movs	r3, #2
  }
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b092      	sub	sp, #72	; 0x48
 800621a:	af00      	add	r7, sp, #0
 800621c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4bbe      	ldr	r3, [pc, #760]	; (800653c <UART_SetConfig+0x328>)
 8006244:	4013      	ands	r3, r2
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800624c:	430b      	orrs	r3, r1
 800624e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4ab3      	ldr	r2, [pc, #716]	; (8006540 <UART_SetConfig+0x32c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800627c:	4313      	orrs	r3, r2
 800627e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	4baf      	ldr	r3, [pc, #700]	; (8006544 <UART_SetConfig+0x330>)
 8006288:	4013      	ands	r3, r2
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006290:	430b      	orrs	r3, r1
 8006292:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	f023 010f 	bic.w	r1, r3, #15
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4aa6      	ldr	r2, [pc, #664]	; (8006548 <UART_SetConfig+0x334>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d177      	bne.n	80063a4 <UART_SetConfig+0x190>
 80062b4:	4ba5      	ldr	r3, [pc, #660]	; (800654c <UART_SetConfig+0x338>)
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062bc:	2b28      	cmp	r3, #40	; 0x28
 80062be:	d86d      	bhi.n	800639c <UART_SetConfig+0x188>
 80062c0:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <UART_SetConfig+0xb4>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	0800636d 	.word	0x0800636d
 80062cc:	0800639d 	.word	0x0800639d
 80062d0:	0800639d 	.word	0x0800639d
 80062d4:	0800639d 	.word	0x0800639d
 80062d8:	0800639d 	.word	0x0800639d
 80062dc:	0800639d 	.word	0x0800639d
 80062e0:	0800639d 	.word	0x0800639d
 80062e4:	0800639d 	.word	0x0800639d
 80062e8:	08006375 	.word	0x08006375
 80062ec:	0800639d 	.word	0x0800639d
 80062f0:	0800639d 	.word	0x0800639d
 80062f4:	0800639d 	.word	0x0800639d
 80062f8:	0800639d 	.word	0x0800639d
 80062fc:	0800639d 	.word	0x0800639d
 8006300:	0800639d 	.word	0x0800639d
 8006304:	0800639d 	.word	0x0800639d
 8006308:	0800637d 	.word	0x0800637d
 800630c:	0800639d 	.word	0x0800639d
 8006310:	0800639d 	.word	0x0800639d
 8006314:	0800639d 	.word	0x0800639d
 8006318:	0800639d 	.word	0x0800639d
 800631c:	0800639d 	.word	0x0800639d
 8006320:	0800639d 	.word	0x0800639d
 8006324:	0800639d 	.word	0x0800639d
 8006328:	08006385 	.word	0x08006385
 800632c:	0800639d 	.word	0x0800639d
 8006330:	0800639d 	.word	0x0800639d
 8006334:	0800639d 	.word	0x0800639d
 8006338:	0800639d 	.word	0x0800639d
 800633c:	0800639d 	.word	0x0800639d
 8006340:	0800639d 	.word	0x0800639d
 8006344:	0800639d 	.word	0x0800639d
 8006348:	0800638d 	.word	0x0800638d
 800634c:	0800639d 	.word	0x0800639d
 8006350:	0800639d 	.word	0x0800639d
 8006354:	0800639d 	.word	0x0800639d
 8006358:	0800639d 	.word	0x0800639d
 800635c:	0800639d 	.word	0x0800639d
 8006360:	0800639d 	.word	0x0800639d
 8006364:	0800639d 	.word	0x0800639d
 8006368:	08006395 	.word	0x08006395
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e222      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e21e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e21a      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e216      	b.n	80067ba <UART_SetConfig+0x5a6>
 800638c:	2320      	movs	r3, #32
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e212      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006394:	2340      	movs	r3, #64	; 0x40
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639a:	e20e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a2:	e20a      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a69      	ldr	r2, [pc, #420]	; (8006550 <UART_SetConfig+0x33c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d130      	bne.n	8006410 <UART_SetConfig+0x1fc>
 80063ae:	4b67      	ldr	r3, [pc, #412]	; (800654c <UART_SetConfig+0x338>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d826      	bhi.n	8006408 <UART_SetConfig+0x1f4>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <UART_SetConfig+0x1ac>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d9 	.word	0x080063d9
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	080063e9 	.word	0x080063e9
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f9 	.word	0x080063f9
 80063d4:	08006401 	.word	0x08006401
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e1ec      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e1e8      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ee:	e1e4      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e1e0      	b.n	80067ba <UART_SetConfig+0x5a6>
 80063f8:	2320      	movs	r3, #32
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e1dc      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e1d8      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e1d4      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a4f      	ldr	r2, [pc, #316]	; (8006554 <UART_SetConfig+0x340>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d130      	bne.n	800647c <UART_SetConfig+0x268>
 800641a:	4b4c      	ldr	r3, [pc, #304]	; (800654c <UART_SetConfig+0x338>)
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	2b05      	cmp	r3, #5
 8006424:	d826      	bhi.n	8006474 <UART_SetConfig+0x260>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <UART_SetConfig+0x218>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006445 	.word	0x08006445
 8006430:	0800644d 	.word	0x0800644d
 8006434:	08006455 	.word	0x08006455
 8006438:	0800645d 	.word	0x0800645d
 800643c:	08006465 	.word	0x08006465
 8006440:	0800646d 	.word	0x0800646d
 8006444:	2300      	movs	r3, #0
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e1b6      	b.n	80067ba <UART_SetConfig+0x5a6>
 800644c:	2304      	movs	r3, #4
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e1b2      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006454:	2308      	movs	r3, #8
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e1ae      	b.n	80067ba <UART_SetConfig+0x5a6>
 800645c:	2310      	movs	r3, #16
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e1aa      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006464:	2320      	movs	r3, #32
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e1a6      	b.n	80067ba <UART_SetConfig+0x5a6>
 800646c:	2340      	movs	r3, #64	; 0x40
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e1a2      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e19e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a35      	ldr	r2, [pc, #212]	; (8006558 <UART_SetConfig+0x344>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d130      	bne.n	80064e8 <UART_SetConfig+0x2d4>
 8006486:	4b31      	ldr	r3, [pc, #196]	; (800654c <UART_SetConfig+0x338>)
 8006488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b05      	cmp	r3, #5
 8006490:	d826      	bhi.n	80064e0 <UART_SetConfig+0x2cc>
 8006492:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <UART_SetConfig+0x284>)
 8006494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006498:	080064b1 	.word	0x080064b1
 800649c:	080064b9 	.word	0x080064b9
 80064a0:	080064c1 	.word	0x080064c1
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064d9 	.word	0x080064d9
 80064b0:	2300      	movs	r3, #0
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e180      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064b8:	2304      	movs	r3, #4
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e17c      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064c0:	2308      	movs	r3, #8
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e178      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064c8:	2310      	movs	r3, #16
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e174      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064d0:	2320      	movs	r3, #32
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e170      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064d8:	2340      	movs	r3, #64	; 0x40
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e16c      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e168      	b.n	80067ba <UART_SetConfig+0x5a6>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1b      	ldr	r2, [pc, #108]	; (800655c <UART_SetConfig+0x348>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d142      	bne.n	8006578 <UART_SetConfig+0x364>
 80064f2:	4b16      	ldr	r3, [pc, #88]	; (800654c <UART_SetConfig+0x338>)
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	2b05      	cmp	r3, #5
 80064fc:	d838      	bhi.n	8006570 <UART_SetConfig+0x35c>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <UART_SetConfig+0x2f0>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	0800651d 	.word	0x0800651d
 8006508:	08006525 	.word	0x08006525
 800650c:	0800652d 	.word	0x0800652d
 8006510:	08006535 	.word	0x08006535
 8006514:	08006561 	.word	0x08006561
 8006518:	08006569 	.word	0x08006569
 800651c:	2300      	movs	r3, #0
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e14a      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006524:	2304      	movs	r3, #4
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e146      	b.n	80067ba <UART_SetConfig+0x5a6>
 800652c:	2308      	movs	r3, #8
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e142      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006534:	2310      	movs	r3, #16
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653a:	e13e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800653c:	cfff69f3 	.word	0xcfff69f3
 8006540:	58000c00 	.word	0x58000c00
 8006544:	11fff4ff 	.word	0x11fff4ff
 8006548:	40011000 	.word	0x40011000
 800654c:	58024400 	.word	0x58024400
 8006550:	40004400 	.word	0x40004400
 8006554:	40004800 	.word	0x40004800
 8006558:	40004c00 	.word	0x40004c00
 800655c:	40005000 	.word	0x40005000
 8006560:	2320      	movs	r3, #32
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e128      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006568:	2340      	movs	r3, #64	; 0x40
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e124      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e120      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4acb      	ldr	r2, [pc, #812]	; (80068ac <UART_SetConfig+0x698>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d176      	bne.n	8006670 <UART_SetConfig+0x45c>
 8006582:	4bcb      	ldr	r3, [pc, #812]	; (80068b0 <UART_SetConfig+0x69c>)
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800658a:	2b28      	cmp	r3, #40	; 0x28
 800658c:	d86c      	bhi.n	8006668 <UART_SetConfig+0x454>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x380>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	08006639 	.word	0x08006639
 8006598:	08006669 	.word	0x08006669
 800659c:	08006669 	.word	0x08006669
 80065a0:	08006669 	.word	0x08006669
 80065a4:	08006669 	.word	0x08006669
 80065a8:	08006669 	.word	0x08006669
 80065ac:	08006669 	.word	0x08006669
 80065b0:	08006669 	.word	0x08006669
 80065b4:	08006641 	.word	0x08006641
 80065b8:	08006669 	.word	0x08006669
 80065bc:	08006669 	.word	0x08006669
 80065c0:	08006669 	.word	0x08006669
 80065c4:	08006669 	.word	0x08006669
 80065c8:	08006669 	.word	0x08006669
 80065cc:	08006669 	.word	0x08006669
 80065d0:	08006669 	.word	0x08006669
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006669 	.word	0x08006669
 80065dc:	08006669 	.word	0x08006669
 80065e0:	08006669 	.word	0x08006669
 80065e4:	08006669 	.word	0x08006669
 80065e8:	08006669 	.word	0x08006669
 80065ec:	08006669 	.word	0x08006669
 80065f0:	08006669 	.word	0x08006669
 80065f4:	08006651 	.word	0x08006651
 80065f8:	08006669 	.word	0x08006669
 80065fc:	08006669 	.word	0x08006669
 8006600:	08006669 	.word	0x08006669
 8006604:	08006669 	.word	0x08006669
 8006608:	08006669 	.word	0x08006669
 800660c:	08006669 	.word	0x08006669
 8006610:	08006669 	.word	0x08006669
 8006614:	08006659 	.word	0x08006659
 8006618:	08006669 	.word	0x08006669
 800661c:	08006669 	.word	0x08006669
 8006620:	08006669 	.word	0x08006669
 8006624:	08006669 	.word	0x08006669
 8006628:	08006669 	.word	0x08006669
 800662c:	08006669 	.word	0x08006669
 8006630:	08006669 	.word	0x08006669
 8006634:	08006661 	.word	0x08006661
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e0bc      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006640:	2304      	movs	r3, #4
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e0b8      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006648:	2308      	movs	r3, #8
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664e:	e0b4      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006650:	2310      	movs	r3, #16
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e0b0      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006658:	2320      	movs	r3, #32
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e0ac      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e0a8      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e0a4      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a8f      	ldr	r2, [pc, #572]	; (80068b4 <UART_SetConfig+0x6a0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d130      	bne.n	80066dc <UART_SetConfig+0x4c8>
 800667a:	4b8d      	ldr	r3, [pc, #564]	; (80068b0 <UART_SetConfig+0x69c>)
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	2b05      	cmp	r3, #5
 8006684:	d826      	bhi.n	80066d4 <UART_SetConfig+0x4c0>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0x478>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	080066a5 	.word	0x080066a5
 8006690:	080066ad 	.word	0x080066ad
 8006694:	080066b5 	.word	0x080066b5
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066c5 	.word	0x080066c5
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	2300      	movs	r3, #0
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066aa:	e086      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066ac:	2304      	movs	r3, #4
 80066ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b2:	e082      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066b4:	2308      	movs	r3, #8
 80066b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ba:	e07e      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c2:	e07a      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066c4:	2320      	movs	r3, #32
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ca:	e076      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d2:	e072      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e06e      	b.n	80067ba <UART_SetConfig+0x5a6>
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a75      	ldr	r2, [pc, #468]	; (80068b8 <UART_SetConfig+0x6a4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d130      	bne.n	8006748 <UART_SetConfig+0x534>
 80066e6:	4b72      	ldr	r3, [pc, #456]	; (80068b0 <UART_SetConfig+0x69c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d826      	bhi.n	8006740 <UART_SetConfig+0x52c>
 80066f2:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0x4e4>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006711 	.word	0x08006711
 80066fc:	08006719 	.word	0x08006719
 8006700:	08006721 	.word	0x08006721
 8006704:	08006729 	.word	0x08006729
 8006708:	08006731 	.word	0x08006731
 800670c:	08006739 	.word	0x08006739
 8006710:	2300      	movs	r3, #0
 8006712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006716:	e050      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006718:	2304      	movs	r3, #4
 800671a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800671e:	e04c      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006720:	2308      	movs	r3, #8
 8006722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006726:	e048      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006728:	2310      	movs	r3, #16
 800672a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672e:	e044      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006730:	2320      	movs	r3, #32
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006736:	e040      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006738:	2340      	movs	r3, #64	; 0x40
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673e:	e03c      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006740:	2380      	movs	r3, #128	; 0x80
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006746:	e038      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a5b      	ldr	r2, [pc, #364]	; (80068bc <UART_SetConfig+0x6a8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d130      	bne.n	80067b4 <UART_SetConfig+0x5a0>
 8006752:	4b57      	ldr	r3, [pc, #348]	; (80068b0 <UART_SetConfig+0x69c>)
 8006754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	2b05      	cmp	r3, #5
 800675c:	d826      	bhi.n	80067ac <UART_SetConfig+0x598>
 800675e:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <UART_SetConfig+0x550>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	0800677d 	.word	0x0800677d
 8006768:	08006785 	.word	0x08006785
 800676c:	0800678d 	.word	0x0800678d
 8006770:	08006795 	.word	0x08006795
 8006774:	0800679d 	.word	0x0800679d
 8006778:	080067a5 	.word	0x080067a5
 800677c:	2302      	movs	r3, #2
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e01a      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006784:	2304      	movs	r3, #4
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e016      	b.n	80067ba <UART_SetConfig+0x5a6>
 800678c:	2308      	movs	r3, #8
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e012      	b.n	80067ba <UART_SetConfig+0x5a6>
 8006794:	2310      	movs	r3, #16
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e00e      	b.n	80067ba <UART_SetConfig+0x5a6>
 800679c:	2320      	movs	r3, #32
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e00a      	b.n	80067ba <UART_SetConfig+0x5a6>
 80067a4:	2340      	movs	r3, #64	; 0x40
 80067a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067aa:	e006      	b.n	80067ba <UART_SetConfig+0x5a6>
 80067ac:	2380      	movs	r3, #128	; 0x80
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e002      	b.n	80067ba <UART_SetConfig+0x5a6>
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a3f      	ldr	r2, [pc, #252]	; (80068bc <UART_SetConfig+0x6a8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	f040 80f8 	bne.w	80069b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	dc46      	bgt.n	800685c <UART_SetConfig+0x648>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	f2c0 8082 	blt.w	80068d8 <UART_SetConfig+0x6c4>
 80067d4:	3b02      	subs	r3, #2
 80067d6:	2b1e      	cmp	r3, #30
 80067d8:	d87e      	bhi.n	80068d8 <UART_SetConfig+0x6c4>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <UART_SetConfig+0x5cc>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006863 	.word	0x08006863
 80067e4:	080068d9 	.word	0x080068d9
 80067e8:	0800686b 	.word	0x0800686b
 80067ec:	080068d9 	.word	0x080068d9
 80067f0:	080068d9 	.word	0x080068d9
 80067f4:	080068d9 	.word	0x080068d9
 80067f8:	0800687b 	.word	0x0800687b
 80067fc:	080068d9 	.word	0x080068d9
 8006800:	080068d9 	.word	0x080068d9
 8006804:	080068d9 	.word	0x080068d9
 8006808:	080068d9 	.word	0x080068d9
 800680c:	080068d9 	.word	0x080068d9
 8006810:	080068d9 	.word	0x080068d9
 8006814:	080068d9 	.word	0x080068d9
 8006818:	0800688b 	.word	0x0800688b
 800681c:	080068d9 	.word	0x080068d9
 8006820:	080068d9 	.word	0x080068d9
 8006824:	080068d9 	.word	0x080068d9
 8006828:	080068d9 	.word	0x080068d9
 800682c:	080068d9 	.word	0x080068d9
 8006830:	080068d9 	.word	0x080068d9
 8006834:	080068d9 	.word	0x080068d9
 8006838:	080068d9 	.word	0x080068d9
 800683c:	080068d9 	.word	0x080068d9
 8006840:	080068d9 	.word	0x080068d9
 8006844:	080068d9 	.word	0x080068d9
 8006848:	080068d9 	.word	0x080068d9
 800684c:	080068d9 	.word	0x080068d9
 8006850:	080068d9 	.word	0x080068d9
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068cb 	.word	0x080068cb
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d037      	beq.n	80068d0 <UART_SetConfig+0x6bc>
 8006860:	e03a      	b.n	80068d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006862:	f7fe f829 	bl	80048b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006868:	e03c      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800686a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe f838 	bl	80048e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006878:	e034      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800687a:	f107 0318 	add.w	r3, r7, #24
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe f984 	bl	8004b8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006888:	e02c      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <UART_SetConfig+0x69c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006896:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <UART_SetConfig+0x69c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	08db      	lsrs	r3, r3, #3
 800689c:	f003 0303 	and.w	r3, r3, #3
 80068a0:	4a07      	ldr	r2, [pc, #28]	; (80068c0 <UART_SetConfig+0x6ac>)
 80068a2:	fa22 f303 	lsr.w	r3, r2, r3
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068a8:	e01c      	b.n	80068e4 <UART_SetConfig+0x6d0>
 80068aa:	bf00      	nop
 80068ac:	40011400 	.word	0x40011400
 80068b0:	58024400 	.word	0x58024400
 80068b4:	40007800 	.word	0x40007800
 80068b8:	40007c00 	.word	0x40007c00
 80068bc:	58000c00 	.word	0x58000c00
 80068c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80068c4:	4b9d      	ldr	r3, [pc, #628]	; (8006b3c <UART_SetConfig+0x928>)
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c8:	e00c      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068ca:	4b9d      	ldr	r3, [pc, #628]	; (8006b40 <UART_SetConfig+0x92c>)
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ce:	e009      	b.n	80068e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d6:	e005      	b.n	80068e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80068e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 81de 	beq.w	8006ca8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	4a94      	ldr	r2, [pc, #592]	; (8006b44 <UART_SetConfig+0x930>)
 80068f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	4413      	add	r3, r2
 800690a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690c:	429a      	cmp	r2, r3
 800690e:	d305      	bcc.n	800691c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006918:	429a      	cmp	r2, r3
 800691a:	d903      	bls.n	8006924 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006922:	e1c1      	b.n	8006ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	2200      	movs	r2, #0
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	60fa      	str	r2, [r7, #12]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	4a84      	ldr	r2, [pc, #528]	; (8006b44 <UART_SetConfig+0x930>)
 8006932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006936:	b29b      	uxth	r3, r3
 8006938:	2200      	movs	r2, #0
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006946:	f7f9 fd23 	bl	8000390 <__aeabi_uldivmod>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	020b      	lsls	r3, r1, #8
 800695c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006960:	0202      	lsls	r2, r0, #8
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	6849      	ldr	r1, [r1, #4]
 8006966:	0849      	lsrs	r1, r1, #1
 8006968:	2000      	movs	r0, #0
 800696a:	460c      	mov	r4, r1
 800696c:	4605      	mov	r5, r0
 800696e:	eb12 0804 	adds.w	r8, r2, r4
 8006972:	eb43 0905 	adc.w	r9, r3, r5
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	469a      	mov	sl, r3
 800697e:	4693      	mov	fp, r2
 8006980:	4652      	mov	r2, sl
 8006982:	465b      	mov	r3, fp
 8006984:	4640      	mov	r0, r8
 8006986:	4649      	mov	r1, r9
 8006988:	f7f9 fd02 	bl	8000390 <__aeabi_uldivmod>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4613      	mov	r3, r2
 8006992:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800699a:	d308      	bcc.n	80069ae <UART_SetConfig+0x79a>
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a2:	d204      	bcs.n	80069ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069aa:	60da      	str	r2, [r3, #12]
 80069ac:	e17c      	b.n	8006ca8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069b4:	e178      	b.n	8006ca8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069be:	f040 80c5 	bne.w	8006b4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80069c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	dc48      	bgt.n	8006a5c <UART_SetConfig+0x848>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	db7b      	blt.n	8006ac6 <UART_SetConfig+0x8b2>
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d879      	bhi.n	8006ac6 <UART_SetConfig+0x8b2>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <UART_SetConfig+0x7c4>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a63 	.word	0x08006a63
 80069dc:	08006a6b 	.word	0x08006a6b
 80069e0:	08006ac7 	.word	0x08006ac7
 80069e4:	08006ac7 	.word	0x08006ac7
 80069e8:	08006a73 	.word	0x08006a73
 80069ec:	08006ac7 	.word	0x08006ac7
 80069f0:	08006ac7 	.word	0x08006ac7
 80069f4:	08006ac7 	.word	0x08006ac7
 80069f8:	08006a83 	.word	0x08006a83
 80069fc:	08006ac7 	.word	0x08006ac7
 8006a00:	08006ac7 	.word	0x08006ac7
 8006a04:	08006ac7 	.word	0x08006ac7
 8006a08:	08006ac7 	.word	0x08006ac7
 8006a0c:	08006ac7 	.word	0x08006ac7
 8006a10:	08006ac7 	.word	0x08006ac7
 8006a14:	08006ac7 	.word	0x08006ac7
 8006a18:	08006a93 	.word	0x08006a93
 8006a1c:	08006ac7 	.word	0x08006ac7
 8006a20:	08006ac7 	.word	0x08006ac7
 8006a24:	08006ac7 	.word	0x08006ac7
 8006a28:	08006ac7 	.word	0x08006ac7
 8006a2c:	08006ac7 	.word	0x08006ac7
 8006a30:	08006ac7 	.word	0x08006ac7
 8006a34:	08006ac7 	.word	0x08006ac7
 8006a38:	08006ac7 	.word	0x08006ac7
 8006a3c:	08006ac7 	.word	0x08006ac7
 8006a40:	08006ac7 	.word	0x08006ac7
 8006a44:	08006ac7 	.word	0x08006ac7
 8006a48:	08006ac7 	.word	0x08006ac7
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006ac7 	.word	0x08006ac7
 8006a54:	08006ac7 	.word	0x08006ac7
 8006a58:	08006ab9 	.word	0x08006ab9
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	d02e      	beq.n	8006abe <UART_SetConfig+0x8aa>
 8006a60:	e031      	b.n	8006ac6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a62:	f7fc ffb7 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8006a66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a68:	e033      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a6a:	f7fc ffc9 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8006a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006a70:	e02f      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fd ff34 	bl	80048e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a80:	e027      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a82:	f107 0318 	add.w	r3, r7, #24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe f880 	bl	8004b8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a90:	e01f      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a92:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <UART_SetConfig+0x934>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a9e:	4b2a      	ldr	r3, [pc, #168]	; (8006b48 <UART_SetConfig+0x934>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	08db      	lsrs	r3, r3, #3
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	4a24      	ldr	r2, [pc, #144]	; (8006b3c <UART_SetConfig+0x928>)
 8006aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ab0:	e00f      	b.n	8006ad2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006ab2:	4b22      	ldr	r3, [pc, #136]	; (8006b3c <UART_SetConfig+0x928>)
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab6:	e00c      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ab8:	4b21      	ldr	r3, [pc, #132]	; (8006b40 <UART_SetConfig+0x92c>)
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006abc:	e009      	b.n	8006ad2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac4:	e005      	b.n	8006ad2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80e7 	beq.w	8006ca8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	4a19      	ldr	r2, [pc, #100]	; (8006b44 <UART_SetConfig+0x930>)
 8006ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aec:	005a      	lsls	r2, r3, #1
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	441a      	add	r2, r3
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d916      	bls.n	8006b34 <UART_SetConfig+0x920>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0c:	d212      	bcs.n	8006b34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f023 030f 	bic.w	r3, r3, #15
 8006b16:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b26:	4313      	orrs	r3, r2
 8006b28:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b30:	60da      	str	r2, [r3, #12]
 8006b32:	e0b9      	b.n	8006ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b3a:	e0b5      	b.n	8006ca8 <UART_SetConfig+0xa94>
 8006b3c:	03d09000 	.word	0x03d09000
 8006b40:	003d0900 	.word	0x003d0900
 8006b44:	08008b38 	.word	0x08008b38
 8006b48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	dc49      	bgt.n	8006be8 <UART_SetConfig+0x9d4>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	db7c      	blt.n	8006c52 <UART_SetConfig+0xa3e>
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d87a      	bhi.n	8006c52 <UART_SetConfig+0xa3e>
 8006b5c:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <UART_SetConfig+0x950>)
 8006b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b62:	bf00      	nop
 8006b64:	08006bef 	.word	0x08006bef
 8006b68:	08006bf7 	.word	0x08006bf7
 8006b6c:	08006c53 	.word	0x08006c53
 8006b70:	08006c53 	.word	0x08006c53
 8006b74:	08006bff 	.word	0x08006bff
 8006b78:	08006c53 	.word	0x08006c53
 8006b7c:	08006c53 	.word	0x08006c53
 8006b80:	08006c53 	.word	0x08006c53
 8006b84:	08006c0f 	.word	0x08006c0f
 8006b88:	08006c53 	.word	0x08006c53
 8006b8c:	08006c53 	.word	0x08006c53
 8006b90:	08006c53 	.word	0x08006c53
 8006b94:	08006c53 	.word	0x08006c53
 8006b98:	08006c53 	.word	0x08006c53
 8006b9c:	08006c53 	.word	0x08006c53
 8006ba0:	08006c53 	.word	0x08006c53
 8006ba4:	08006c1f 	.word	0x08006c1f
 8006ba8:	08006c53 	.word	0x08006c53
 8006bac:	08006c53 	.word	0x08006c53
 8006bb0:	08006c53 	.word	0x08006c53
 8006bb4:	08006c53 	.word	0x08006c53
 8006bb8:	08006c53 	.word	0x08006c53
 8006bbc:	08006c53 	.word	0x08006c53
 8006bc0:	08006c53 	.word	0x08006c53
 8006bc4:	08006c53 	.word	0x08006c53
 8006bc8:	08006c53 	.word	0x08006c53
 8006bcc:	08006c53 	.word	0x08006c53
 8006bd0:	08006c53 	.word	0x08006c53
 8006bd4:	08006c53 	.word	0x08006c53
 8006bd8:	08006c53 	.word	0x08006c53
 8006bdc:	08006c53 	.word	0x08006c53
 8006be0:	08006c53 	.word	0x08006c53
 8006be4:	08006c45 	.word	0x08006c45
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d02e      	beq.n	8006c4a <UART_SetConfig+0xa36>
 8006bec:	e031      	b.n	8006c52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bee:	f7fc fef1 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8006bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bf4:	e033      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf6:	f7fc ff03 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8006bfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bfc:	e02f      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fd fe6e 	bl	80048e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0c:	e027      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c0e:	f107 0318 	add.w	r3, r7, #24
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fd ffba 	bl	8004b8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1c:	e01f      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c1e:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <UART_SetConfig+0xac0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c2a:	4b2a      	ldr	r3, [pc, #168]	; (8006cd4 <UART_SetConfig+0xac0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	08db      	lsrs	r3, r3, #3
 8006c30:	f003 0303 	and.w	r3, r3, #3
 8006c34:	4a28      	ldr	r2, [pc, #160]	; (8006cd8 <UART_SetConfig+0xac4>)
 8006c36:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c3c:	e00f      	b.n	8006c5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006c3e:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <UART_SetConfig+0xac4>)
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c42:	e00c      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c44:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <UART_SetConfig+0xac8>)
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c48:	e009      	b.n	8006c5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c50:	e005      	b.n	8006c5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c5c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d021      	beq.n	8006ca8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	4a1d      	ldr	r2, [pc, #116]	; (8006ce0 <UART_SetConfig+0xacc>)
 8006c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	441a      	add	r2, r3
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	2b0f      	cmp	r3, #15
 8006c8c:	d909      	bls.n	8006ca2 <UART_SetConfig+0xa8e>
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c94:	d205      	bcs.n	8006ca2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60da      	str	r2, [r3, #12]
 8006ca0:	e002      	b.n	8006ca8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006cc4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3748      	adds	r7, #72	; 0x48
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cd2:	bf00      	nop
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	03d09000 	.word	0x03d09000
 8006cdc:	003d0900 	.word	0x003d0900
 8006ce0:	08008b38 	.word	0x08008b38

08006ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006de2:	d10a      	bne.n	8006dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e38:	f7fb facc 	bl	80023d4 <HAL_GetTick>
 8006e3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d10e      	bne.n	8006e6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f82f 	bl	8006ebe <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e025      	b.n	8006eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d10e      	bne.n	8006e96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f819 	bl	8006ebe <UART_WaitOnFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e00f      	b.n	8006eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b09c      	sub	sp, #112	; 0x70
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	603b      	str	r3, [r7, #0]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ece:	e0a9      	b.n	8007024 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	f000 80a5 	beq.w	8007024 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eda:	f7fb fa7b 	bl	80023d4 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d302      	bcc.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d140      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f04:	667b      	str	r3, [r7, #100]	; 0x64
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e6      	bne.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	663b      	str	r3, [r7, #96]	; 0x60
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f42:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e5      	bne.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e069      	b.n	8007046 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d051      	beq.n	8007024 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8e:	d149      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e6      	bne.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	613b      	str	r3, [r7, #16]
   return(result);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fec:	623a      	str	r2, [r7, #32]
 8006fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	69f9      	ldr	r1, [r7, #28]
 8006ff2:	6a3a      	ldr	r2, [r7, #32]
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e5      	bne.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2220      	movs	r2, #32
 8007004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e010      	b.n	8007046 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69da      	ldr	r2, [r3, #28]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	429a      	cmp	r2, r3
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	429a      	cmp	r2, r3
 8007040:	f43f af46 	beq.w	8006ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3770      	adds	r7, #112	; 0x70
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_UARTEx_DisableFifoMode+0x16>
 8007060:	2302      	movs	r3, #2
 8007062:	e027      	b.n	80070b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2224      	movs	r2, #36	; 0x24
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007092:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e02d      	b.n	8007134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2224      	movs	r2, #36	; 0x24
 80070e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0201 	bic.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f84f 	bl	80071b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007150:	2302      	movs	r3, #2
 8007152:	e02d      	b.n	80071b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2224      	movs	r2, #36	; 0x24
 8007160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0201 	bic.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f811 	bl	80071b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d108      	bne.n	80071da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071d8:	e031      	b.n	800723e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071da:	2310      	movs	r3, #16
 80071dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071de:	2310      	movs	r3, #16
 80071e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	0e5b      	lsrs	r3, r3, #25
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	0f5b      	lsrs	r3, r3, #29
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	7b3a      	ldrb	r2, [r7, #12]
 8007206:	4911      	ldr	r1, [pc, #68]	; (800724c <UARTEx_SetNbDataToProcess+0x94>)
 8007208:	5c8a      	ldrb	r2, [r1, r2]
 800720a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800720e:	7b3a      	ldrb	r2, [r7, #12]
 8007210:	490f      	ldr	r1, [pc, #60]	; (8007250 <UARTEx_SetNbDataToProcess+0x98>)
 8007212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007214:	fb93 f3f2 	sdiv	r3, r3, r2
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	7b7a      	ldrb	r2, [r7, #13]
 8007224:	4909      	ldr	r1, [pc, #36]	; (800724c <UARTEx_SetNbDataToProcess+0x94>)
 8007226:	5c8a      	ldrb	r2, [r1, r2]
 8007228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800722c:	7b7a      	ldrb	r2, [r7, #13]
 800722e:	4908      	ldr	r1, [pc, #32]	; (8007250 <UARTEx_SetNbDataToProcess+0x98>)
 8007230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007232:	fb93 f3f2 	sdiv	r3, r3, r2
 8007236:	b29a      	uxth	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	08008b50 	.word	0x08008b50
 8007250:	08008b58 	.word	0x08008b58

08007254 <__errno>:
 8007254:	4b01      	ldr	r3, [pc, #4]	; (800725c <__errno+0x8>)
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	24000018 	.word	0x24000018

08007260 <__libc_init_array>:
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	4d0d      	ldr	r5, [pc, #52]	; (8007298 <__libc_init_array+0x38>)
 8007264:	4c0d      	ldr	r4, [pc, #52]	; (800729c <__libc_init_array+0x3c>)
 8007266:	1b64      	subs	r4, r4, r5
 8007268:	10a4      	asrs	r4, r4, #2
 800726a:	2600      	movs	r6, #0
 800726c:	42a6      	cmp	r6, r4
 800726e:	d109      	bne.n	8007284 <__libc_init_array+0x24>
 8007270:	4d0b      	ldr	r5, [pc, #44]	; (80072a0 <__libc_init_array+0x40>)
 8007272:	4c0c      	ldr	r4, [pc, #48]	; (80072a4 <__libc_init_array+0x44>)
 8007274:	f001 f98a 	bl	800858c <_init>
 8007278:	1b64      	subs	r4, r4, r5
 800727a:	10a4      	asrs	r4, r4, #2
 800727c:	2600      	movs	r6, #0
 800727e:	42a6      	cmp	r6, r4
 8007280:	d105      	bne.n	800728e <__libc_init_array+0x2e>
 8007282:	bd70      	pop	{r4, r5, r6, pc}
 8007284:	f855 3b04 	ldr.w	r3, [r5], #4
 8007288:	4798      	blx	r3
 800728a:	3601      	adds	r6, #1
 800728c:	e7ee      	b.n	800726c <__libc_init_array+0xc>
 800728e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007292:	4798      	blx	r3
 8007294:	3601      	adds	r6, #1
 8007296:	e7f2      	b.n	800727e <__libc_init_array+0x1e>
 8007298:	08008c00 	.word	0x08008c00
 800729c:	08008c00 	.word	0x08008c00
 80072a0:	08008c00 	.word	0x08008c00
 80072a4:	08008c04 	.word	0x08008c04

080072a8 <memcpy>:
 80072a8:	440a      	add	r2, r1
 80072aa:	4291      	cmp	r1, r2
 80072ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80072b0:	d100      	bne.n	80072b4 <memcpy+0xc>
 80072b2:	4770      	bx	lr
 80072b4:	b510      	push	{r4, lr}
 80072b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072be:	4291      	cmp	r1, r2
 80072c0:	d1f9      	bne.n	80072b6 <memcpy+0xe>
 80072c2:	bd10      	pop	{r4, pc}

080072c4 <memset>:
 80072c4:	4402      	add	r2, r0
 80072c6:	4603      	mov	r3, r0
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d100      	bne.n	80072ce <memset+0xa>
 80072cc:	4770      	bx	lr
 80072ce:	f803 1b01 	strb.w	r1, [r3], #1
 80072d2:	e7f9      	b.n	80072c8 <memset+0x4>

080072d4 <iprintf>:
 80072d4:	b40f      	push	{r0, r1, r2, r3}
 80072d6:	4b0a      	ldr	r3, [pc, #40]	; (8007300 <iprintf+0x2c>)
 80072d8:	b513      	push	{r0, r1, r4, lr}
 80072da:	681c      	ldr	r4, [r3, #0]
 80072dc:	b124      	cbz	r4, 80072e8 <iprintf+0x14>
 80072de:	69a3      	ldr	r3, [r4, #24]
 80072e0:	b913      	cbnz	r3, 80072e8 <iprintf+0x14>
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 f886 	bl	80073f4 <__sinit>
 80072e8:	ab05      	add	r3, sp, #20
 80072ea:	9a04      	ldr	r2, [sp, #16]
 80072ec:	68a1      	ldr	r1, [r4, #8]
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 fb39 	bl	8007968 <_vfiprintf_r>
 80072f6:	b002      	add	sp, #8
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072fc:	b004      	add	sp, #16
 80072fe:	4770      	bx	lr
 8007300:	24000018 	.word	0x24000018

08007304 <siprintf>:
 8007304:	b40e      	push	{r1, r2, r3}
 8007306:	b500      	push	{lr}
 8007308:	b09c      	sub	sp, #112	; 0x70
 800730a:	ab1d      	add	r3, sp, #116	; 0x74
 800730c:	9002      	str	r0, [sp, #8]
 800730e:	9006      	str	r0, [sp, #24]
 8007310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007314:	4809      	ldr	r0, [pc, #36]	; (800733c <siprintf+0x38>)
 8007316:	9107      	str	r1, [sp, #28]
 8007318:	9104      	str	r1, [sp, #16]
 800731a:	4909      	ldr	r1, [pc, #36]	; (8007340 <siprintf+0x3c>)
 800731c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007320:	9105      	str	r1, [sp, #20]
 8007322:	6800      	ldr	r0, [r0, #0]
 8007324:	9301      	str	r3, [sp, #4]
 8007326:	a902      	add	r1, sp, #8
 8007328:	f000 f9f4 	bl	8007714 <_svfiprintf_r>
 800732c:	9b02      	ldr	r3, [sp, #8]
 800732e:	2200      	movs	r2, #0
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	b01c      	add	sp, #112	; 0x70
 8007334:	f85d eb04 	ldr.w	lr, [sp], #4
 8007338:	b003      	add	sp, #12
 800733a:	4770      	bx	lr
 800733c:	24000018 	.word	0x24000018
 8007340:	ffff0208 	.word	0xffff0208

08007344 <std>:
 8007344:	2300      	movs	r3, #0
 8007346:	b510      	push	{r4, lr}
 8007348:	4604      	mov	r4, r0
 800734a:	e9c0 3300 	strd	r3, r3, [r0]
 800734e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007352:	6083      	str	r3, [r0, #8]
 8007354:	8181      	strh	r1, [r0, #12]
 8007356:	6643      	str	r3, [r0, #100]	; 0x64
 8007358:	81c2      	strh	r2, [r0, #14]
 800735a:	6183      	str	r3, [r0, #24]
 800735c:	4619      	mov	r1, r3
 800735e:	2208      	movs	r2, #8
 8007360:	305c      	adds	r0, #92	; 0x5c
 8007362:	f7ff ffaf 	bl	80072c4 <memset>
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <std+0x38>)
 8007368:	6263      	str	r3, [r4, #36]	; 0x24
 800736a:	4b05      	ldr	r3, [pc, #20]	; (8007380 <std+0x3c>)
 800736c:	62a3      	str	r3, [r4, #40]	; 0x28
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <std+0x40>)
 8007370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <std+0x44>)
 8007374:	6224      	str	r4, [r4, #32]
 8007376:	6323      	str	r3, [r4, #48]	; 0x30
 8007378:	bd10      	pop	{r4, pc}
 800737a:	bf00      	nop
 800737c:	08007f11 	.word	0x08007f11
 8007380:	08007f33 	.word	0x08007f33
 8007384:	08007f6b 	.word	0x08007f6b
 8007388:	08007f8f 	.word	0x08007f8f

0800738c <_cleanup_r>:
 800738c:	4901      	ldr	r1, [pc, #4]	; (8007394 <_cleanup_r+0x8>)
 800738e:	f000 b8af 	b.w	80074f0 <_fwalk_reent>
 8007392:	bf00      	nop
 8007394:	08008269 	.word	0x08008269

08007398 <__sfmoreglue>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	2268      	movs	r2, #104	; 0x68
 800739c:	1e4d      	subs	r5, r1, #1
 800739e:	4355      	muls	r5, r2
 80073a0:	460e      	mov	r6, r1
 80073a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073a6:	f000 f8e5 	bl	8007574 <_malloc_r>
 80073aa:	4604      	mov	r4, r0
 80073ac:	b140      	cbz	r0, 80073c0 <__sfmoreglue+0x28>
 80073ae:	2100      	movs	r1, #0
 80073b0:	e9c0 1600 	strd	r1, r6, [r0]
 80073b4:	300c      	adds	r0, #12
 80073b6:	60a0      	str	r0, [r4, #8]
 80073b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073bc:	f7ff ff82 	bl	80072c4 <memset>
 80073c0:	4620      	mov	r0, r4
 80073c2:	bd70      	pop	{r4, r5, r6, pc}

080073c4 <__sfp_lock_acquire>:
 80073c4:	4801      	ldr	r0, [pc, #4]	; (80073cc <__sfp_lock_acquire+0x8>)
 80073c6:	f000 b8b3 	b.w	8007530 <__retarget_lock_acquire_recursive>
 80073ca:	bf00      	nop
 80073cc:	24000325 	.word	0x24000325

080073d0 <__sfp_lock_release>:
 80073d0:	4801      	ldr	r0, [pc, #4]	; (80073d8 <__sfp_lock_release+0x8>)
 80073d2:	f000 b8ae 	b.w	8007532 <__retarget_lock_release_recursive>
 80073d6:	bf00      	nop
 80073d8:	24000325 	.word	0x24000325

080073dc <__sinit_lock_acquire>:
 80073dc:	4801      	ldr	r0, [pc, #4]	; (80073e4 <__sinit_lock_acquire+0x8>)
 80073de:	f000 b8a7 	b.w	8007530 <__retarget_lock_acquire_recursive>
 80073e2:	bf00      	nop
 80073e4:	24000326 	.word	0x24000326

080073e8 <__sinit_lock_release>:
 80073e8:	4801      	ldr	r0, [pc, #4]	; (80073f0 <__sinit_lock_release+0x8>)
 80073ea:	f000 b8a2 	b.w	8007532 <__retarget_lock_release_recursive>
 80073ee:	bf00      	nop
 80073f0:	24000326 	.word	0x24000326

080073f4 <__sinit>:
 80073f4:	b510      	push	{r4, lr}
 80073f6:	4604      	mov	r4, r0
 80073f8:	f7ff fff0 	bl	80073dc <__sinit_lock_acquire>
 80073fc:	69a3      	ldr	r3, [r4, #24]
 80073fe:	b11b      	cbz	r3, 8007408 <__sinit+0x14>
 8007400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007404:	f7ff bff0 	b.w	80073e8 <__sinit_lock_release>
 8007408:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800740c:	6523      	str	r3, [r4, #80]	; 0x50
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <__sinit+0x68>)
 8007410:	4a13      	ldr	r2, [pc, #76]	; (8007460 <__sinit+0x6c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	62a2      	str	r2, [r4, #40]	; 0x28
 8007416:	42a3      	cmp	r3, r4
 8007418:	bf04      	itt	eq
 800741a:	2301      	moveq	r3, #1
 800741c:	61a3      	streq	r3, [r4, #24]
 800741e:	4620      	mov	r0, r4
 8007420:	f000 f820 	bl	8007464 <__sfp>
 8007424:	6060      	str	r0, [r4, #4]
 8007426:	4620      	mov	r0, r4
 8007428:	f000 f81c 	bl	8007464 <__sfp>
 800742c:	60a0      	str	r0, [r4, #8]
 800742e:	4620      	mov	r0, r4
 8007430:	f000 f818 	bl	8007464 <__sfp>
 8007434:	2200      	movs	r2, #0
 8007436:	60e0      	str	r0, [r4, #12]
 8007438:	2104      	movs	r1, #4
 800743a:	6860      	ldr	r0, [r4, #4]
 800743c:	f7ff ff82 	bl	8007344 <std>
 8007440:	68a0      	ldr	r0, [r4, #8]
 8007442:	2201      	movs	r2, #1
 8007444:	2109      	movs	r1, #9
 8007446:	f7ff ff7d 	bl	8007344 <std>
 800744a:	68e0      	ldr	r0, [r4, #12]
 800744c:	2202      	movs	r2, #2
 800744e:	2112      	movs	r1, #18
 8007450:	f7ff ff78 	bl	8007344 <std>
 8007454:	2301      	movs	r3, #1
 8007456:	61a3      	str	r3, [r4, #24]
 8007458:	e7d2      	b.n	8007400 <__sinit+0xc>
 800745a:	bf00      	nop
 800745c:	08008b60 	.word	0x08008b60
 8007460:	0800738d 	.word	0x0800738d

08007464 <__sfp>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	4607      	mov	r7, r0
 8007468:	f7ff ffac 	bl	80073c4 <__sfp_lock_acquire>
 800746c:	4b1e      	ldr	r3, [pc, #120]	; (80074e8 <__sfp+0x84>)
 800746e:	681e      	ldr	r6, [r3, #0]
 8007470:	69b3      	ldr	r3, [r6, #24]
 8007472:	b913      	cbnz	r3, 800747a <__sfp+0x16>
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff ffbd 	bl	80073f4 <__sinit>
 800747a:	3648      	adds	r6, #72	; 0x48
 800747c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007480:	3b01      	subs	r3, #1
 8007482:	d503      	bpl.n	800748c <__sfp+0x28>
 8007484:	6833      	ldr	r3, [r6, #0]
 8007486:	b30b      	cbz	r3, 80074cc <__sfp+0x68>
 8007488:	6836      	ldr	r6, [r6, #0]
 800748a:	e7f7      	b.n	800747c <__sfp+0x18>
 800748c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007490:	b9d5      	cbnz	r5, 80074c8 <__sfp+0x64>
 8007492:	4b16      	ldr	r3, [pc, #88]	; (80074ec <__sfp+0x88>)
 8007494:	60e3      	str	r3, [r4, #12]
 8007496:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800749a:	6665      	str	r5, [r4, #100]	; 0x64
 800749c:	f000 f847 	bl	800752e <__retarget_lock_init_recursive>
 80074a0:	f7ff ff96 	bl	80073d0 <__sfp_lock_release>
 80074a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074ac:	6025      	str	r5, [r4, #0]
 80074ae:	61a5      	str	r5, [r4, #24]
 80074b0:	2208      	movs	r2, #8
 80074b2:	4629      	mov	r1, r5
 80074b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074b8:	f7ff ff04 	bl	80072c4 <memset>
 80074bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074c4:	4620      	mov	r0, r4
 80074c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074c8:	3468      	adds	r4, #104	; 0x68
 80074ca:	e7d9      	b.n	8007480 <__sfp+0x1c>
 80074cc:	2104      	movs	r1, #4
 80074ce:	4638      	mov	r0, r7
 80074d0:	f7ff ff62 	bl	8007398 <__sfmoreglue>
 80074d4:	4604      	mov	r4, r0
 80074d6:	6030      	str	r0, [r6, #0]
 80074d8:	2800      	cmp	r0, #0
 80074da:	d1d5      	bne.n	8007488 <__sfp+0x24>
 80074dc:	f7ff ff78 	bl	80073d0 <__sfp_lock_release>
 80074e0:	230c      	movs	r3, #12
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	e7ee      	b.n	80074c4 <__sfp+0x60>
 80074e6:	bf00      	nop
 80074e8:	08008b60 	.word	0x08008b60
 80074ec:	ffff0001 	.word	0xffff0001

080074f0 <_fwalk_reent>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	4606      	mov	r6, r0
 80074f6:	4688      	mov	r8, r1
 80074f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074fc:	2700      	movs	r7, #0
 80074fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007502:	f1b9 0901 	subs.w	r9, r9, #1
 8007506:	d505      	bpl.n	8007514 <_fwalk_reent+0x24>
 8007508:	6824      	ldr	r4, [r4, #0]
 800750a:	2c00      	cmp	r4, #0
 800750c:	d1f7      	bne.n	80074fe <_fwalk_reent+0xe>
 800750e:	4638      	mov	r0, r7
 8007510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007514:	89ab      	ldrh	r3, [r5, #12]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d907      	bls.n	800752a <_fwalk_reent+0x3a>
 800751a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800751e:	3301      	adds	r3, #1
 8007520:	d003      	beq.n	800752a <_fwalk_reent+0x3a>
 8007522:	4629      	mov	r1, r5
 8007524:	4630      	mov	r0, r6
 8007526:	47c0      	blx	r8
 8007528:	4307      	orrs	r7, r0
 800752a:	3568      	adds	r5, #104	; 0x68
 800752c:	e7e9      	b.n	8007502 <_fwalk_reent+0x12>

0800752e <__retarget_lock_init_recursive>:
 800752e:	4770      	bx	lr

08007530 <__retarget_lock_acquire_recursive>:
 8007530:	4770      	bx	lr

08007532 <__retarget_lock_release_recursive>:
 8007532:	4770      	bx	lr

08007534 <sbrk_aligned>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	4e0e      	ldr	r6, [pc, #56]	; (8007570 <sbrk_aligned+0x3c>)
 8007538:	460c      	mov	r4, r1
 800753a:	6831      	ldr	r1, [r6, #0]
 800753c:	4605      	mov	r5, r0
 800753e:	b911      	cbnz	r1, 8007546 <sbrk_aligned+0x12>
 8007540:	f000 fcd6 	bl	8007ef0 <_sbrk_r>
 8007544:	6030      	str	r0, [r6, #0]
 8007546:	4621      	mov	r1, r4
 8007548:	4628      	mov	r0, r5
 800754a:	f000 fcd1 	bl	8007ef0 <_sbrk_r>
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	d00a      	beq.n	8007568 <sbrk_aligned+0x34>
 8007552:	1cc4      	adds	r4, r0, #3
 8007554:	f024 0403 	bic.w	r4, r4, #3
 8007558:	42a0      	cmp	r0, r4
 800755a:	d007      	beq.n	800756c <sbrk_aligned+0x38>
 800755c:	1a21      	subs	r1, r4, r0
 800755e:	4628      	mov	r0, r5
 8007560:	f000 fcc6 	bl	8007ef0 <_sbrk_r>
 8007564:	3001      	adds	r0, #1
 8007566:	d101      	bne.n	800756c <sbrk_aligned+0x38>
 8007568:	f04f 34ff 	mov.w	r4, #4294967295
 800756c:	4620      	mov	r0, r4
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	2400032c 	.word	0x2400032c

08007574 <_malloc_r>:
 8007574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007578:	1ccd      	adds	r5, r1, #3
 800757a:	f025 0503 	bic.w	r5, r5, #3
 800757e:	3508      	adds	r5, #8
 8007580:	2d0c      	cmp	r5, #12
 8007582:	bf38      	it	cc
 8007584:	250c      	movcc	r5, #12
 8007586:	2d00      	cmp	r5, #0
 8007588:	4607      	mov	r7, r0
 800758a:	db01      	blt.n	8007590 <_malloc_r+0x1c>
 800758c:	42a9      	cmp	r1, r5
 800758e:	d905      	bls.n	800759c <_malloc_r+0x28>
 8007590:	230c      	movs	r3, #12
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	2600      	movs	r6, #0
 8007596:	4630      	mov	r0, r6
 8007598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800759c:	4e2e      	ldr	r6, [pc, #184]	; (8007658 <_malloc_r+0xe4>)
 800759e:	f000 ff31 	bl	8008404 <__malloc_lock>
 80075a2:	6833      	ldr	r3, [r6, #0]
 80075a4:	461c      	mov	r4, r3
 80075a6:	bb34      	cbnz	r4, 80075f6 <_malloc_r+0x82>
 80075a8:	4629      	mov	r1, r5
 80075aa:	4638      	mov	r0, r7
 80075ac:	f7ff ffc2 	bl	8007534 <sbrk_aligned>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	4604      	mov	r4, r0
 80075b4:	d14d      	bne.n	8007652 <_malloc_r+0xde>
 80075b6:	6834      	ldr	r4, [r6, #0]
 80075b8:	4626      	mov	r6, r4
 80075ba:	2e00      	cmp	r6, #0
 80075bc:	d140      	bne.n	8007640 <_malloc_r+0xcc>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	4631      	mov	r1, r6
 80075c2:	4638      	mov	r0, r7
 80075c4:	eb04 0803 	add.w	r8, r4, r3
 80075c8:	f000 fc92 	bl	8007ef0 <_sbrk_r>
 80075cc:	4580      	cmp	r8, r0
 80075ce:	d13a      	bne.n	8007646 <_malloc_r+0xd2>
 80075d0:	6821      	ldr	r1, [r4, #0]
 80075d2:	3503      	adds	r5, #3
 80075d4:	1a6d      	subs	r5, r5, r1
 80075d6:	f025 0503 	bic.w	r5, r5, #3
 80075da:	3508      	adds	r5, #8
 80075dc:	2d0c      	cmp	r5, #12
 80075de:	bf38      	it	cc
 80075e0:	250c      	movcc	r5, #12
 80075e2:	4629      	mov	r1, r5
 80075e4:	4638      	mov	r0, r7
 80075e6:	f7ff ffa5 	bl	8007534 <sbrk_aligned>
 80075ea:	3001      	adds	r0, #1
 80075ec:	d02b      	beq.n	8007646 <_malloc_r+0xd2>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	442b      	add	r3, r5
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	e00e      	b.n	8007614 <_malloc_r+0xa0>
 80075f6:	6822      	ldr	r2, [r4, #0]
 80075f8:	1b52      	subs	r2, r2, r5
 80075fa:	d41e      	bmi.n	800763a <_malloc_r+0xc6>
 80075fc:	2a0b      	cmp	r2, #11
 80075fe:	d916      	bls.n	800762e <_malloc_r+0xba>
 8007600:	1961      	adds	r1, r4, r5
 8007602:	42a3      	cmp	r3, r4
 8007604:	6025      	str	r5, [r4, #0]
 8007606:	bf18      	it	ne
 8007608:	6059      	strne	r1, [r3, #4]
 800760a:	6863      	ldr	r3, [r4, #4]
 800760c:	bf08      	it	eq
 800760e:	6031      	streq	r1, [r6, #0]
 8007610:	5162      	str	r2, [r4, r5]
 8007612:	604b      	str	r3, [r1, #4]
 8007614:	4638      	mov	r0, r7
 8007616:	f104 060b 	add.w	r6, r4, #11
 800761a:	f000 fef9 	bl	8008410 <__malloc_unlock>
 800761e:	f026 0607 	bic.w	r6, r6, #7
 8007622:	1d23      	adds	r3, r4, #4
 8007624:	1af2      	subs	r2, r6, r3
 8007626:	d0b6      	beq.n	8007596 <_malloc_r+0x22>
 8007628:	1b9b      	subs	r3, r3, r6
 800762a:	50a3      	str	r3, [r4, r2]
 800762c:	e7b3      	b.n	8007596 <_malloc_r+0x22>
 800762e:	6862      	ldr	r2, [r4, #4]
 8007630:	42a3      	cmp	r3, r4
 8007632:	bf0c      	ite	eq
 8007634:	6032      	streq	r2, [r6, #0]
 8007636:	605a      	strne	r2, [r3, #4]
 8007638:	e7ec      	b.n	8007614 <_malloc_r+0xa0>
 800763a:	4623      	mov	r3, r4
 800763c:	6864      	ldr	r4, [r4, #4]
 800763e:	e7b2      	b.n	80075a6 <_malloc_r+0x32>
 8007640:	4634      	mov	r4, r6
 8007642:	6876      	ldr	r6, [r6, #4]
 8007644:	e7b9      	b.n	80075ba <_malloc_r+0x46>
 8007646:	230c      	movs	r3, #12
 8007648:	603b      	str	r3, [r7, #0]
 800764a:	4638      	mov	r0, r7
 800764c:	f000 fee0 	bl	8008410 <__malloc_unlock>
 8007650:	e7a1      	b.n	8007596 <_malloc_r+0x22>
 8007652:	6025      	str	r5, [r4, #0]
 8007654:	e7de      	b.n	8007614 <_malloc_r+0xa0>
 8007656:	bf00      	nop
 8007658:	24000328 	.word	0x24000328

0800765c <__ssputs_r>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	688e      	ldr	r6, [r1, #8]
 8007662:	429e      	cmp	r6, r3
 8007664:	4682      	mov	sl, r0
 8007666:	460c      	mov	r4, r1
 8007668:	4690      	mov	r8, r2
 800766a:	461f      	mov	r7, r3
 800766c:	d838      	bhi.n	80076e0 <__ssputs_r+0x84>
 800766e:	898a      	ldrh	r2, [r1, #12]
 8007670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007674:	d032      	beq.n	80076dc <__ssputs_r+0x80>
 8007676:	6825      	ldr	r5, [r4, #0]
 8007678:	6909      	ldr	r1, [r1, #16]
 800767a:	eba5 0901 	sub.w	r9, r5, r1
 800767e:	6965      	ldr	r5, [r4, #20]
 8007680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007688:	3301      	adds	r3, #1
 800768a:	444b      	add	r3, r9
 800768c:	106d      	asrs	r5, r5, #1
 800768e:	429d      	cmp	r5, r3
 8007690:	bf38      	it	cc
 8007692:	461d      	movcc	r5, r3
 8007694:	0553      	lsls	r3, r2, #21
 8007696:	d531      	bpl.n	80076fc <__ssputs_r+0xa0>
 8007698:	4629      	mov	r1, r5
 800769a:	f7ff ff6b 	bl	8007574 <_malloc_r>
 800769e:	4606      	mov	r6, r0
 80076a0:	b950      	cbnz	r0, 80076b8 <__ssputs_r+0x5c>
 80076a2:	230c      	movs	r3, #12
 80076a4:	f8ca 3000 	str.w	r3, [sl]
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b8:	6921      	ldr	r1, [r4, #16]
 80076ba:	464a      	mov	r2, r9
 80076bc:	f7ff fdf4 	bl	80072a8 <memcpy>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	6126      	str	r6, [r4, #16]
 80076ce:	6165      	str	r5, [r4, #20]
 80076d0:	444e      	add	r6, r9
 80076d2:	eba5 0509 	sub.w	r5, r5, r9
 80076d6:	6026      	str	r6, [r4, #0]
 80076d8:	60a5      	str	r5, [r4, #8]
 80076da:	463e      	mov	r6, r7
 80076dc:	42be      	cmp	r6, r7
 80076de:	d900      	bls.n	80076e2 <__ssputs_r+0x86>
 80076e0:	463e      	mov	r6, r7
 80076e2:	6820      	ldr	r0, [r4, #0]
 80076e4:	4632      	mov	r2, r6
 80076e6:	4641      	mov	r1, r8
 80076e8:	f000 fe72 	bl	80083d0 <memmove>
 80076ec:	68a3      	ldr	r3, [r4, #8]
 80076ee:	1b9b      	subs	r3, r3, r6
 80076f0:	60a3      	str	r3, [r4, #8]
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	4433      	add	r3, r6
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7db      	b.n	80076b4 <__ssputs_r+0x58>
 80076fc:	462a      	mov	r2, r5
 80076fe:	f000 fed9 	bl	80084b4 <_realloc_r>
 8007702:	4606      	mov	r6, r0
 8007704:	2800      	cmp	r0, #0
 8007706:	d1e1      	bne.n	80076cc <__ssputs_r+0x70>
 8007708:	6921      	ldr	r1, [r4, #16]
 800770a:	4650      	mov	r0, sl
 800770c:	f000 fe86 	bl	800841c <_free_r>
 8007710:	e7c7      	b.n	80076a2 <__ssputs_r+0x46>
	...

08007714 <_svfiprintf_r>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	4698      	mov	r8, r3
 800771a:	898b      	ldrh	r3, [r1, #12]
 800771c:	061b      	lsls	r3, r3, #24
 800771e:	b09d      	sub	sp, #116	; 0x74
 8007720:	4607      	mov	r7, r0
 8007722:	460d      	mov	r5, r1
 8007724:	4614      	mov	r4, r2
 8007726:	d50e      	bpl.n	8007746 <_svfiprintf_r+0x32>
 8007728:	690b      	ldr	r3, [r1, #16]
 800772a:	b963      	cbnz	r3, 8007746 <_svfiprintf_r+0x32>
 800772c:	2140      	movs	r1, #64	; 0x40
 800772e:	f7ff ff21 	bl	8007574 <_malloc_r>
 8007732:	6028      	str	r0, [r5, #0]
 8007734:	6128      	str	r0, [r5, #16]
 8007736:	b920      	cbnz	r0, 8007742 <_svfiprintf_r+0x2e>
 8007738:	230c      	movs	r3, #12
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	e0d1      	b.n	80078e6 <_svfiprintf_r+0x1d2>
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	616b      	str	r3, [r5, #20]
 8007746:	2300      	movs	r3, #0
 8007748:	9309      	str	r3, [sp, #36]	; 0x24
 800774a:	2320      	movs	r3, #32
 800774c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007750:	f8cd 800c 	str.w	r8, [sp, #12]
 8007754:	2330      	movs	r3, #48	; 0x30
 8007756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007900 <_svfiprintf_r+0x1ec>
 800775a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800775e:	f04f 0901 	mov.w	r9, #1
 8007762:	4623      	mov	r3, r4
 8007764:	469a      	mov	sl, r3
 8007766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800776a:	b10a      	cbz	r2, 8007770 <_svfiprintf_r+0x5c>
 800776c:	2a25      	cmp	r2, #37	; 0x25
 800776e:	d1f9      	bne.n	8007764 <_svfiprintf_r+0x50>
 8007770:	ebba 0b04 	subs.w	fp, sl, r4
 8007774:	d00b      	beq.n	800778e <_svfiprintf_r+0x7a>
 8007776:	465b      	mov	r3, fp
 8007778:	4622      	mov	r2, r4
 800777a:	4629      	mov	r1, r5
 800777c:	4638      	mov	r0, r7
 800777e:	f7ff ff6d 	bl	800765c <__ssputs_r>
 8007782:	3001      	adds	r0, #1
 8007784:	f000 80aa 	beq.w	80078dc <_svfiprintf_r+0x1c8>
 8007788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800778a:	445a      	add	r2, fp
 800778c:	9209      	str	r2, [sp, #36]	; 0x24
 800778e:	f89a 3000 	ldrb.w	r3, [sl]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80a2 	beq.w	80078dc <_svfiprintf_r+0x1c8>
 8007798:	2300      	movs	r3, #0
 800779a:	f04f 32ff 	mov.w	r2, #4294967295
 800779e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a2:	f10a 0a01 	add.w	sl, sl, #1
 80077a6:	9304      	str	r3, [sp, #16]
 80077a8:	9307      	str	r3, [sp, #28]
 80077aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ae:	931a      	str	r3, [sp, #104]	; 0x68
 80077b0:	4654      	mov	r4, sl
 80077b2:	2205      	movs	r2, #5
 80077b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b8:	4851      	ldr	r0, [pc, #324]	; (8007900 <_svfiprintf_r+0x1ec>)
 80077ba:	f7f8 fd99 	bl	80002f0 <memchr>
 80077be:	9a04      	ldr	r2, [sp, #16]
 80077c0:	b9d8      	cbnz	r0, 80077fa <_svfiprintf_r+0xe6>
 80077c2:	06d0      	lsls	r0, r2, #27
 80077c4:	bf44      	itt	mi
 80077c6:	2320      	movmi	r3, #32
 80077c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077cc:	0711      	lsls	r1, r2, #28
 80077ce:	bf44      	itt	mi
 80077d0:	232b      	movmi	r3, #43	; 0x2b
 80077d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d6:	f89a 3000 	ldrb.w	r3, [sl]
 80077da:	2b2a      	cmp	r3, #42	; 0x2a
 80077dc:	d015      	beq.n	800780a <_svfiprintf_r+0xf6>
 80077de:	9a07      	ldr	r2, [sp, #28]
 80077e0:	4654      	mov	r4, sl
 80077e2:	2000      	movs	r0, #0
 80077e4:	f04f 0c0a 	mov.w	ip, #10
 80077e8:	4621      	mov	r1, r4
 80077ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ee:	3b30      	subs	r3, #48	; 0x30
 80077f0:	2b09      	cmp	r3, #9
 80077f2:	d94e      	bls.n	8007892 <_svfiprintf_r+0x17e>
 80077f4:	b1b0      	cbz	r0, 8007824 <_svfiprintf_r+0x110>
 80077f6:	9207      	str	r2, [sp, #28]
 80077f8:	e014      	b.n	8007824 <_svfiprintf_r+0x110>
 80077fa:	eba0 0308 	sub.w	r3, r0, r8
 80077fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007802:	4313      	orrs	r3, r2
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	46a2      	mov	sl, r4
 8007808:	e7d2      	b.n	80077b0 <_svfiprintf_r+0x9c>
 800780a:	9b03      	ldr	r3, [sp, #12]
 800780c:	1d19      	adds	r1, r3, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	9103      	str	r1, [sp, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfbb      	ittet	lt
 8007816:	425b      	neglt	r3, r3
 8007818:	f042 0202 	orrlt.w	r2, r2, #2
 800781c:	9307      	strge	r3, [sp, #28]
 800781e:	9307      	strlt	r3, [sp, #28]
 8007820:	bfb8      	it	lt
 8007822:	9204      	strlt	r2, [sp, #16]
 8007824:	7823      	ldrb	r3, [r4, #0]
 8007826:	2b2e      	cmp	r3, #46	; 0x2e
 8007828:	d10c      	bne.n	8007844 <_svfiprintf_r+0x130>
 800782a:	7863      	ldrb	r3, [r4, #1]
 800782c:	2b2a      	cmp	r3, #42	; 0x2a
 800782e:	d135      	bne.n	800789c <_svfiprintf_r+0x188>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	9203      	str	r2, [sp, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	bfb8      	it	lt
 800783c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007840:	3402      	adds	r4, #2
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007910 <_svfiprintf_r+0x1fc>
 8007848:	7821      	ldrb	r1, [r4, #0]
 800784a:	2203      	movs	r2, #3
 800784c:	4650      	mov	r0, sl
 800784e:	f7f8 fd4f 	bl	80002f0 <memchr>
 8007852:	b140      	cbz	r0, 8007866 <_svfiprintf_r+0x152>
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	eba0 000a 	sub.w	r0, r0, sl
 800785a:	fa03 f000 	lsl.w	r0, r3, r0
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	4303      	orrs	r3, r0
 8007862:	3401      	adds	r4, #1
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786a:	4826      	ldr	r0, [pc, #152]	; (8007904 <_svfiprintf_r+0x1f0>)
 800786c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007870:	2206      	movs	r2, #6
 8007872:	f7f8 fd3d 	bl	80002f0 <memchr>
 8007876:	2800      	cmp	r0, #0
 8007878:	d038      	beq.n	80078ec <_svfiprintf_r+0x1d8>
 800787a:	4b23      	ldr	r3, [pc, #140]	; (8007908 <_svfiprintf_r+0x1f4>)
 800787c:	bb1b      	cbnz	r3, 80078c6 <_svfiprintf_r+0x1b2>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	3307      	adds	r3, #7
 8007882:	f023 0307 	bic.w	r3, r3, #7
 8007886:	3308      	adds	r3, #8
 8007888:	9303      	str	r3, [sp, #12]
 800788a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788c:	4433      	add	r3, r6
 800788e:	9309      	str	r3, [sp, #36]	; 0x24
 8007890:	e767      	b.n	8007762 <_svfiprintf_r+0x4e>
 8007892:	fb0c 3202 	mla	r2, ip, r2, r3
 8007896:	460c      	mov	r4, r1
 8007898:	2001      	movs	r0, #1
 800789a:	e7a5      	b.n	80077e8 <_svfiprintf_r+0xd4>
 800789c:	2300      	movs	r3, #0
 800789e:	3401      	adds	r4, #1
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	4619      	mov	r1, r3
 80078a4:	f04f 0c0a 	mov.w	ip, #10
 80078a8:	4620      	mov	r0, r4
 80078aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ae:	3a30      	subs	r2, #48	; 0x30
 80078b0:	2a09      	cmp	r2, #9
 80078b2:	d903      	bls.n	80078bc <_svfiprintf_r+0x1a8>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0c5      	beq.n	8007844 <_svfiprintf_r+0x130>
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	e7c3      	b.n	8007844 <_svfiprintf_r+0x130>
 80078bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c0:	4604      	mov	r4, r0
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7f0      	b.n	80078a8 <_svfiprintf_r+0x194>
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	462a      	mov	r2, r5
 80078cc:	4b0f      	ldr	r3, [pc, #60]	; (800790c <_svfiprintf_r+0x1f8>)
 80078ce:	a904      	add	r1, sp, #16
 80078d0:	4638      	mov	r0, r7
 80078d2:	f3af 8000 	nop.w
 80078d6:	1c42      	adds	r2, r0, #1
 80078d8:	4606      	mov	r6, r0
 80078da:	d1d6      	bne.n	800788a <_svfiprintf_r+0x176>
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	065b      	lsls	r3, r3, #25
 80078e0:	f53f af2c 	bmi.w	800773c <_svfiprintf_r+0x28>
 80078e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e6:	b01d      	add	sp, #116	; 0x74
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	ab03      	add	r3, sp, #12
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	462a      	mov	r2, r5
 80078f2:	4b06      	ldr	r3, [pc, #24]	; (800790c <_svfiprintf_r+0x1f8>)
 80078f4:	a904      	add	r1, sp, #16
 80078f6:	4638      	mov	r0, r7
 80078f8:	f000 f9d4 	bl	8007ca4 <_printf_i>
 80078fc:	e7eb      	b.n	80078d6 <_svfiprintf_r+0x1c2>
 80078fe:	bf00      	nop
 8007900:	08008bc4 	.word	0x08008bc4
 8007904:	08008bce 	.word	0x08008bce
 8007908:	00000000 	.word	0x00000000
 800790c:	0800765d 	.word	0x0800765d
 8007910:	08008bca 	.word	0x08008bca

08007914 <__sfputc_r>:
 8007914:	6893      	ldr	r3, [r2, #8]
 8007916:	3b01      	subs	r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	b410      	push	{r4}
 800791c:	6093      	str	r3, [r2, #8]
 800791e:	da08      	bge.n	8007932 <__sfputc_r+0x1e>
 8007920:	6994      	ldr	r4, [r2, #24]
 8007922:	42a3      	cmp	r3, r4
 8007924:	db01      	blt.n	800792a <__sfputc_r+0x16>
 8007926:	290a      	cmp	r1, #10
 8007928:	d103      	bne.n	8007932 <__sfputc_r+0x1e>
 800792a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800792e:	f000 bb33 	b.w	8007f98 <__swbuf_r>
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	1c58      	adds	r0, r3, #1
 8007936:	6010      	str	r0, [r2, #0]
 8007938:	7019      	strb	r1, [r3, #0]
 800793a:	4608      	mov	r0, r1
 800793c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007940:	4770      	bx	lr

08007942 <__sfputs_r>:
 8007942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007944:	4606      	mov	r6, r0
 8007946:	460f      	mov	r7, r1
 8007948:	4614      	mov	r4, r2
 800794a:	18d5      	adds	r5, r2, r3
 800794c:	42ac      	cmp	r4, r5
 800794e:	d101      	bne.n	8007954 <__sfputs_r+0x12>
 8007950:	2000      	movs	r0, #0
 8007952:	e007      	b.n	8007964 <__sfputs_r+0x22>
 8007954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007958:	463a      	mov	r2, r7
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ffda 	bl	8007914 <__sfputc_r>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d1f3      	bne.n	800794c <__sfputs_r+0xa>
 8007964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007968 <_vfiprintf_r>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	460d      	mov	r5, r1
 800796e:	b09d      	sub	sp, #116	; 0x74
 8007970:	4614      	mov	r4, r2
 8007972:	4698      	mov	r8, r3
 8007974:	4606      	mov	r6, r0
 8007976:	b118      	cbz	r0, 8007980 <_vfiprintf_r+0x18>
 8007978:	6983      	ldr	r3, [r0, #24]
 800797a:	b90b      	cbnz	r3, 8007980 <_vfiprintf_r+0x18>
 800797c:	f7ff fd3a 	bl	80073f4 <__sinit>
 8007980:	4b89      	ldr	r3, [pc, #548]	; (8007ba8 <_vfiprintf_r+0x240>)
 8007982:	429d      	cmp	r5, r3
 8007984:	d11b      	bne.n	80079be <_vfiprintf_r+0x56>
 8007986:	6875      	ldr	r5, [r6, #4]
 8007988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800798a:	07d9      	lsls	r1, r3, #31
 800798c:	d405      	bmi.n	800799a <_vfiprintf_r+0x32>
 800798e:	89ab      	ldrh	r3, [r5, #12]
 8007990:	059a      	lsls	r2, r3, #22
 8007992:	d402      	bmi.n	800799a <_vfiprintf_r+0x32>
 8007994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007996:	f7ff fdcb 	bl	8007530 <__retarget_lock_acquire_recursive>
 800799a:	89ab      	ldrh	r3, [r5, #12]
 800799c:	071b      	lsls	r3, r3, #28
 800799e:	d501      	bpl.n	80079a4 <_vfiprintf_r+0x3c>
 80079a0:	692b      	ldr	r3, [r5, #16]
 80079a2:	b9eb      	cbnz	r3, 80079e0 <_vfiprintf_r+0x78>
 80079a4:	4629      	mov	r1, r5
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 fb5a 	bl	8008060 <__swsetup_r>
 80079ac:	b1c0      	cbz	r0, 80079e0 <_vfiprintf_r+0x78>
 80079ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079b0:	07dc      	lsls	r4, r3, #31
 80079b2:	d50e      	bpl.n	80079d2 <_vfiprintf_r+0x6a>
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	b01d      	add	sp, #116	; 0x74
 80079ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079be:	4b7b      	ldr	r3, [pc, #492]	; (8007bac <_vfiprintf_r+0x244>)
 80079c0:	429d      	cmp	r5, r3
 80079c2:	d101      	bne.n	80079c8 <_vfiprintf_r+0x60>
 80079c4:	68b5      	ldr	r5, [r6, #8]
 80079c6:	e7df      	b.n	8007988 <_vfiprintf_r+0x20>
 80079c8:	4b79      	ldr	r3, [pc, #484]	; (8007bb0 <_vfiprintf_r+0x248>)
 80079ca:	429d      	cmp	r5, r3
 80079cc:	bf08      	it	eq
 80079ce:	68f5      	ldreq	r5, [r6, #12]
 80079d0:	e7da      	b.n	8007988 <_vfiprintf_r+0x20>
 80079d2:	89ab      	ldrh	r3, [r5, #12]
 80079d4:	0598      	lsls	r0, r3, #22
 80079d6:	d4ed      	bmi.n	80079b4 <_vfiprintf_r+0x4c>
 80079d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079da:	f7ff fdaa 	bl	8007532 <__retarget_lock_release_recursive>
 80079de:	e7e9      	b.n	80079b4 <_vfiprintf_r+0x4c>
 80079e0:	2300      	movs	r3, #0
 80079e2:	9309      	str	r3, [sp, #36]	; 0x24
 80079e4:	2320      	movs	r3, #32
 80079e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ee:	2330      	movs	r3, #48	; 0x30
 80079f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bb4 <_vfiprintf_r+0x24c>
 80079f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079f8:	f04f 0901 	mov.w	r9, #1
 80079fc:	4623      	mov	r3, r4
 80079fe:	469a      	mov	sl, r3
 8007a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a04:	b10a      	cbz	r2, 8007a0a <_vfiprintf_r+0xa2>
 8007a06:	2a25      	cmp	r2, #37	; 0x25
 8007a08:	d1f9      	bne.n	80079fe <_vfiprintf_r+0x96>
 8007a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a0e:	d00b      	beq.n	8007a28 <_vfiprintf_r+0xc0>
 8007a10:	465b      	mov	r3, fp
 8007a12:	4622      	mov	r2, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff ff93 	bl	8007942 <__sfputs_r>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f000 80aa 	beq.w	8007b76 <_vfiprintf_r+0x20e>
 8007a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a24:	445a      	add	r2, fp
 8007a26:	9209      	str	r2, [sp, #36]	; 0x24
 8007a28:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80a2 	beq.w	8007b76 <_vfiprintf_r+0x20e>
 8007a32:	2300      	movs	r3, #0
 8007a34:	f04f 32ff 	mov.w	r2, #4294967295
 8007a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a3c:	f10a 0a01 	add.w	sl, sl, #1
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a48:	931a      	str	r3, [sp, #104]	; 0x68
 8007a4a:	4654      	mov	r4, sl
 8007a4c:	2205      	movs	r2, #5
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	4858      	ldr	r0, [pc, #352]	; (8007bb4 <_vfiprintf_r+0x24c>)
 8007a54:	f7f8 fc4c 	bl	80002f0 <memchr>
 8007a58:	9a04      	ldr	r2, [sp, #16]
 8007a5a:	b9d8      	cbnz	r0, 8007a94 <_vfiprintf_r+0x12c>
 8007a5c:	06d1      	lsls	r1, r2, #27
 8007a5e:	bf44      	itt	mi
 8007a60:	2320      	movmi	r3, #32
 8007a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a66:	0713      	lsls	r3, r2, #28
 8007a68:	bf44      	itt	mi
 8007a6a:	232b      	movmi	r3, #43	; 0x2b
 8007a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a70:	f89a 3000 	ldrb.w	r3, [sl]
 8007a74:	2b2a      	cmp	r3, #42	; 0x2a
 8007a76:	d015      	beq.n	8007aa4 <_vfiprintf_r+0x13c>
 8007a78:	9a07      	ldr	r2, [sp, #28]
 8007a7a:	4654      	mov	r4, sl
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f04f 0c0a 	mov.w	ip, #10
 8007a82:	4621      	mov	r1, r4
 8007a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a88:	3b30      	subs	r3, #48	; 0x30
 8007a8a:	2b09      	cmp	r3, #9
 8007a8c:	d94e      	bls.n	8007b2c <_vfiprintf_r+0x1c4>
 8007a8e:	b1b0      	cbz	r0, 8007abe <_vfiprintf_r+0x156>
 8007a90:	9207      	str	r2, [sp, #28]
 8007a92:	e014      	b.n	8007abe <_vfiprintf_r+0x156>
 8007a94:	eba0 0308 	sub.w	r3, r0, r8
 8007a98:	fa09 f303 	lsl.w	r3, r9, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	46a2      	mov	sl, r4
 8007aa2:	e7d2      	b.n	8007a4a <_vfiprintf_r+0xe2>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	1d19      	adds	r1, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	9103      	str	r1, [sp, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bfbb      	ittet	lt
 8007ab0:	425b      	neglt	r3, r3
 8007ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ab6:	9307      	strge	r3, [sp, #28]
 8007ab8:	9307      	strlt	r3, [sp, #28]
 8007aba:	bfb8      	it	lt
 8007abc:	9204      	strlt	r2, [sp, #16]
 8007abe:	7823      	ldrb	r3, [r4, #0]
 8007ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ac2:	d10c      	bne.n	8007ade <_vfiprintf_r+0x176>
 8007ac4:	7863      	ldrb	r3, [r4, #1]
 8007ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac8:	d135      	bne.n	8007b36 <_vfiprintf_r+0x1ce>
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	1d1a      	adds	r2, r3, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	9203      	str	r2, [sp, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bfb8      	it	lt
 8007ad6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ada:	3402      	adds	r4, #2
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bc4 <_vfiprintf_r+0x25c>
 8007ae2:	7821      	ldrb	r1, [r4, #0]
 8007ae4:	2203      	movs	r2, #3
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	f7f8 fc02 	bl	80002f0 <memchr>
 8007aec:	b140      	cbz	r0, 8007b00 <_vfiprintf_r+0x198>
 8007aee:	2340      	movs	r3, #64	; 0x40
 8007af0:	eba0 000a 	sub.w	r0, r0, sl
 8007af4:	fa03 f000 	lsl.w	r0, r3, r0
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	4303      	orrs	r3, r0
 8007afc:	3401      	adds	r4, #1
 8007afe:	9304      	str	r3, [sp, #16]
 8007b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b04:	482c      	ldr	r0, [pc, #176]	; (8007bb8 <_vfiprintf_r+0x250>)
 8007b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b0a:	2206      	movs	r2, #6
 8007b0c:	f7f8 fbf0 	bl	80002f0 <memchr>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d03f      	beq.n	8007b94 <_vfiprintf_r+0x22c>
 8007b14:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <_vfiprintf_r+0x254>)
 8007b16:	bb1b      	cbnz	r3, 8007b60 <_vfiprintf_r+0x1f8>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	3307      	adds	r3, #7
 8007b1c:	f023 0307 	bic.w	r3, r3, #7
 8007b20:	3308      	adds	r3, #8
 8007b22:	9303      	str	r3, [sp, #12]
 8007b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b26:	443b      	add	r3, r7
 8007b28:	9309      	str	r3, [sp, #36]	; 0x24
 8007b2a:	e767      	b.n	80079fc <_vfiprintf_r+0x94>
 8007b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b30:	460c      	mov	r4, r1
 8007b32:	2001      	movs	r0, #1
 8007b34:	e7a5      	b.n	8007a82 <_vfiprintf_r+0x11a>
 8007b36:	2300      	movs	r3, #0
 8007b38:	3401      	adds	r4, #1
 8007b3a:	9305      	str	r3, [sp, #20]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f04f 0c0a 	mov.w	ip, #10
 8007b42:	4620      	mov	r0, r4
 8007b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b48:	3a30      	subs	r2, #48	; 0x30
 8007b4a:	2a09      	cmp	r2, #9
 8007b4c:	d903      	bls.n	8007b56 <_vfiprintf_r+0x1ee>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0c5      	beq.n	8007ade <_vfiprintf_r+0x176>
 8007b52:	9105      	str	r1, [sp, #20]
 8007b54:	e7c3      	b.n	8007ade <_vfiprintf_r+0x176>
 8007b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e7f0      	b.n	8007b42 <_vfiprintf_r+0x1da>
 8007b60:	ab03      	add	r3, sp, #12
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	462a      	mov	r2, r5
 8007b66:	4b16      	ldr	r3, [pc, #88]	; (8007bc0 <_vfiprintf_r+0x258>)
 8007b68:	a904      	add	r1, sp, #16
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f3af 8000 	nop.w
 8007b70:	4607      	mov	r7, r0
 8007b72:	1c78      	adds	r0, r7, #1
 8007b74:	d1d6      	bne.n	8007b24 <_vfiprintf_r+0x1bc>
 8007b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b78:	07d9      	lsls	r1, r3, #31
 8007b7a:	d405      	bmi.n	8007b88 <_vfiprintf_r+0x220>
 8007b7c:	89ab      	ldrh	r3, [r5, #12]
 8007b7e:	059a      	lsls	r2, r3, #22
 8007b80:	d402      	bmi.n	8007b88 <_vfiprintf_r+0x220>
 8007b82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b84:	f7ff fcd5 	bl	8007532 <__retarget_lock_release_recursive>
 8007b88:	89ab      	ldrh	r3, [r5, #12]
 8007b8a:	065b      	lsls	r3, r3, #25
 8007b8c:	f53f af12 	bmi.w	80079b4 <_vfiprintf_r+0x4c>
 8007b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b92:	e711      	b.n	80079b8 <_vfiprintf_r+0x50>
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <_vfiprintf_r+0x258>)
 8007b9c:	a904      	add	r1, sp, #16
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f000 f880 	bl	8007ca4 <_printf_i>
 8007ba4:	e7e4      	b.n	8007b70 <_vfiprintf_r+0x208>
 8007ba6:	bf00      	nop
 8007ba8:	08008b84 	.word	0x08008b84
 8007bac:	08008ba4 	.word	0x08008ba4
 8007bb0:	08008b64 	.word	0x08008b64
 8007bb4:	08008bc4 	.word	0x08008bc4
 8007bb8:	08008bce 	.word	0x08008bce
 8007bbc:	00000000 	.word	0x00000000
 8007bc0:	08007943 	.word	0x08007943
 8007bc4:	08008bca 	.word	0x08008bca

08007bc8 <_printf_common>:
 8007bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bcc:	4616      	mov	r6, r2
 8007bce:	4699      	mov	r9, r3
 8007bd0:	688a      	ldr	r2, [r1, #8]
 8007bd2:	690b      	ldr	r3, [r1, #16]
 8007bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	bfb8      	it	lt
 8007bdc:	4613      	movlt	r3, r2
 8007bde:	6033      	str	r3, [r6, #0]
 8007be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007be4:	4607      	mov	r7, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	b10a      	cbz	r2, 8007bee <_printf_common+0x26>
 8007bea:	3301      	adds	r3, #1
 8007bec:	6033      	str	r3, [r6, #0]
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	0699      	lsls	r1, r3, #26
 8007bf2:	bf42      	ittt	mi
 8007bf4:	6833      	ldrmi	r3, [r6, #0]
 8007bf6:	3302      	addmi	r3, #2
 8007bf8:	6033      	strmi	r3, [r6, #0]
 8007bfa:	6825      	ldr	r5, [r4, #0]
 8007bfc:	f015 0506 	ands.w	r5, r5, #6
 8007c00:	d106      	bne.n	8007c10 <_printf_common+0x48>
 8007c02:	f104 0a19 	add.w	sl, r4, #25
 8007c06:	68e3      	ldr	r3, [r4, #12]
 8007c08:	6832      	ldr	r2, [r6, #0]
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	42ab      	cmp	r3, r5
 8007c0e:	dc26      	bgt.n	8007c5e <_printf_common+0x96>
 8007c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c14:	1e13      	subs	r3, r2, #0
 8007c16:	6822      	ldr	r2, [r4, #0]
 8007c18:	bf18      	it	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	0692      	lsls	r2, r2, #26
 8007c1e:	d42b      	bmi.n	8007c78 <_printf_common+0xb0>
 8007c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c24:	4649      	mov	r1, r9
 8007c26:	4638      	mov	r0, r7
 8007c28:	47c0      	blx	r8
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d01e      	beq.n	8007c6c <_printf_common+0xa4>
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	68e5      	ldr	r5, [r4, #12]
 8007c32:	6832      	ldr	r2, [r6, #0]
 8007c34:	f003 0306 	and.w	r3, r3, #6
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	bf08      	it	eq
 8007c3c:	1aad      	subeq	r5, r5, r2
 8007c3e:	68a3      	ldr	r3, [r4, #8]
 8007c40:	6922      	ldr	r2, [r4, #16]
 8007c42:	bf0c      	ite	eq
 8007c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c48:	2500      	movne	r5, #0
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	bfc4      	itt	gt
 8007c4e:	1a9b      	subgt	r3, r3, r2
 8007c50:	18ed      	addgt	r5, r5, r3
 8007c52:	2600      	movs	r6, #0
 8007c54:	341a      	adds	r4, #26
 8007c56:	42b5      	cmp	r5, r6
 8007c58:	d11a      	bne.n	8007c90 <_printf_common+0xc8>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e008      	b.n	8007c70 <_printf_common+0xa8>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	4652      	mov	r2, sl
 8007c62:	4649      	mov	r1, r9
 8007c64:	4638      	mov	r0, r7
 8007c66:	47c0      	blx	r8
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d103      	bne.n	8007c74 <_printf_common+0xac>
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c74:	3501      	adds	r5, #1
 8007c76:	e7c6      	b.n	8007c06 <_printf_common+0x3e>
 8007c78:	18e1      	adds	r1, r4, r3
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	2030      	movs	r0, #48	; 0x30
 8007c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c82:	4422      	add	r2, r4
 8007c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c8c:	3302      	adds	r3, #2
 8007c8e:	e7c7      	b.n	8007c20 <_printf_common+0x58>
 8007c90:	2301      	movs	r3, #1
 8007c92:	4622      	mov	r2, r4
 8007c94:	4649      	mov	r1, r9
 8007c96:	4638      	mov	r0, r7
 8007c98:	47c0      	blx	r8
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	d0e6      	beq.n	8007c6c <_printf_common+0xa4>
 8007c9e:	3601      	adds	r6, #1
 8007ca0:	e7d9      	b.n	8007c56 <_printf_common+0x8e>
	...

08007ca4 <_printf_i>:
 8007ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	7e0f      	ldrb	r7, [r1, #24]
 8007caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cac:	2f78      	cmp	r7, #120	; 0x78
 8007cae:	4691      	mov	r9, r2
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	469a      	mov	sl, r3
 8007cb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cba:	d807      	bhi.n	8007ccc <_printf_i+0x28>
 8007cbc:	2f62      	cmp	r7, #98	; 0x62
 8007cbe:	d80a      	bhi.n	8007cd6 <_printf_i+0x32>
 8007cc0:	2f00      	cmp	r7, #0
 8007cc2:	f000 80d8 	beq.w	8007e76 <_printf_i+0x1d2>
 8007cc6:	2f58      	cmp	r7, #88	; 0x58
 8007cc8:	f000 80a3 	beq.w	8007e12 <_printf_i+0x16e>
 8007ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cd4:	e03a      	b.n	8007d4c <_printf_i+0xa8>
 8007cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cda:	2b15      	cmp	r3, #21
 8007cdc:	d8f6      	bhi.n	8007ccc <_printf_i+0x28>
 8007cde:	a101      	add	r1, pc, #4	; (adr r1, 8007ce4 <_printf_i+0x40>)
 8007ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ce4:	08007d3d 	.word	0x08007d3d
 8007ce8:	08007d51 	.word	0x08007d51
 8007cec:	08007ccd 	.word	0x08007ccd
 8007cf0:	08007ccd 	.word	0x08007ccd
 8007cf4:	08007ccd 	.word	0x08007ccd
 8007cf8:	08007ccd 	.word	0x08007ccd
 8007cfc:	08007d51 	.word	0x08007d51
 8007d00:	08007ccd 	.word	0x08007ccd
 8007d04:	08007ccd 	.word	0x08007ccd
 8007d08:	08007ccd 	.word	0x08007ccd
 8007d0c:	08007ccd 	.word	0x08007ccd
 8007d10:	08007e5d 	.word	0x08007e5d
 8007d14:	08007d81 	.word	0x08007d81
 8007d18:	08007e3f 	.word	0x08007e3f
 8007d1c:	08007ccd 	.word	0x08007ccd
 8007d20:	08007ccd 	.word	0x08007ccd
 8007d24:	08007e7f 	.word	0x08007e7f
 8007d28:	08007ccd 	.word	0x08007ccd
 8007d2c:	08007d81 	.word	0x08007d81
 8007d30:	08007ccd 	.word	0x08007ccd
 8007d34:	08007ccd 	.word	0x08007ccd
 8007d38:	08007e47 	.word	0x08007e47
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	1d1a      	adds	r2, r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	602a      	str	r2, [r5, #0]
 8007d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e0a3      	b.n	8007e98 <_printf_i+0x1f4>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	6829      	ldr	r1, [r5, #0]
 8007d54:	0606      	lsls	r6, r0, #24
 8007d56:	f101 0304 	add.w	r3, r1, #4
 8007d5a:	d50a      	bpl.n	8007d72 <_printf_i+0xce>
 8007d5c:	680e      	ldr	r6, [r1, #0]
 8007d5e:	602b      	str	r3, [r5, #0]
 8007d60:	2e00      	cmp	r6, #0
 8007d62:	da03      	bge.n	8007d6c <_printf_i+0xc8>
 8007d64:	232d      	movs	r3, #45	; 0x2d
 8007d66:	4276      	negs	r6, r6
 8007d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6c:	485e      	ldr	r0, [pc, #376]	; (8007ee8 <_printf_i+0x244>)
 8007d6e:	230a      	movs	r3, #10
 8007d70:	e019      	b.n	8007da6 <_printf_i+0x102>
 8007d72:	680e      	ldr	r6, [r1, #0]
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d7a:	bf18      	it	ne
 8007d7c:	b236      	sxthne	r6, r6
 8007d7e:	e7ef      	b.n	8007d60 <_printf_i+0xbc>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	6820      	ldr	r0, [r4, #0]
 8007d84:	1d19      	adds	r1, r3, #4
 8007d86:	6029      	str	r1, [r5, #0]
 8007d88:	0601      	lsls	r1, r0, #24
 8007d8a:	d501      	bpl.n	8007d90 <_printf_i+0xec>
 8007d8c:	681e      	ldr	r6, [r3, #0]
 8007d8e:	e002      	b.n	8007d96 <_printf_i+0xf2>
 8007d90:	0646      	lsls	r6, r0, #25
 8007d92:	d5fb      	bpl.n	8007d8c <_printf_i+0xe8>
 8007d94:	881e      	ldrh	r6, [r3, #0]
 8007d96:	4854      	ldr	r0, [pc, #336]	; (8007ee8 <_printf_i+0x244>)
 8007d98:	2f6f      	cmp	r7, #111	; 0x6f
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2308      	moveq	r3, #8
 8007d9e:	230a      	movne	r3, #10
 8007da0:	2100      	movs	r1, #0
 8007da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007da6:	6865      	ldr	r5, [r4, #4]
 8007da8:	60a5      	str	r5, [r4, #8]
 8007daa:	2d00      	cmp	r5, #0
 8007dac:	bfa2      	ittt	ge
 8007dae:	6821      	ldrge	r1, [r4, #0]
 8007db0:	f021 0104 	bicge.w	r1, r1, #4
 8007db4:	6021      	strge	r1, [r4, #0]
 8007db6:	b90e      	cbnz	r6, 8007dbc <_printf_i+0x118>
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	d04d      	beq.n	8007e58 <_printf_i+0x1b4>
 8007dbc:	4615      	mov	r5, r2
 8007dbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dc2:	fb03 6711 	mls	r7, r3, r1, r6
 8007dc6:	5dc7      	ldrb	r7, [r0, r7]
 8007dc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007dcc:	4637      	mov	r7, r6
 8007dce:	42bb      	cmp	r3, r7
 8007dd0:	460e      	mov	r6, r1
 8007dd2:	d9f4      	bls.n	8007dbe <_printf_i+0x11a>
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d10b      	bne.n	8007df0 <_printf_i+0x14c>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	07de      	lsls	r6, r3, #31
 8007ddc:	d508      	bpl.n	8007df0 <_printf_i+0x14c>
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	6861      	ldr	r1, [r4, #4]
 8007de2:	4299      	cmp	r1, r3
 8007de4:	bfde      	ittt	le
 8007de6:	2330      	movle	r3, #48	; 0x30
 8007de8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007df0:	1b52      	subs	r2, r2, r5
 8007df2:	6122      	str	r2, [r4, #16]
 8007df4:	f8cd a000 	str.w	sl, [sp]
 8007df8:	464b      	mov	r3, r9
 8007dfa:	aa03      	add	r2, sp, #12
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4640      	mov	r0, r8
 8007e00:	f7ff fee2 	bl	8007bc8 <_printf_common>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d14c      	bne.n	8007ea2 <_printf_i+0x1fe>
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0c:	b004      	add	sp, #16
 8007e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e12:	4835      	ldr	r0, [pc, #212]	; (8007ee8 <_printf_i+0x244>)
 8007e14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e18:	6829      	ldr	r1, [r5, #0]
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e20:	6029      	str	r1, [r5, #0]
 8007e22:	061d      	lsls	r5, r3, #24
 8007e24:	d514      	bpl.n	8007e50 <_printf_i+0x1ac>
 8007e26:	07df      	lsls	r7, r3, #31
 8007e28:	bf44      	itt	mi
 8007e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e2e:	6023      	strmi	r3, [r4, #0]
 8007e30:	b91e      	cbnz	r6, 8007e3a <_printf_i+0x196>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	f023 0320 	bic.w	r3, r3, #32
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	2310      	movs	r3, #16
 8007e3c:	e7b0      	b.n	8007da0 <_printf_i+0xfc>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	f043 0320 	orr.w	r3, r3, #32
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	2378      	movs	r3, #120	; 0x78
 8007e48:	4828      	ldr	r0, [pc, #160]	; (8007eec <_printf_i+0x248>)
 8007e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e4e:	e7e3      	b.n	8007e18 <_printf_i+0x174>
 8007e50:	0659      	lsls	r1, r3, #25
 8007e52:	bf48      	it	mi
 8007e54:	b2b6      	uxthmi	r6, r6
 8007e56:	e7e6      	b.n	8007e26 <_printf_i+0x182>
 8007e58:	4615      	mov	r5, r2
 8007e5a:	e7bb      	b.n	8007dd4 <_printf_i+0x130>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	6826      	ldr	r6, [r4, #0]
 8007e60:	6961      	ldr	r1, [r4, #20]
 8007e62:	1d18      	adds	r0, r3, #4
 8007e64:	6028      	str	r0, [r5, #0]
 8007e66:	0635      	lsls	r5, r6, #24
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	d501      	bpl.n	8007e70 <_printf_i+0x1cc>
 8007e6c:	6019      	str	r1, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <_printf_i+0x1d2>
 8007e70:	0670      	lsls	r0, r6, #25
 8007e72:	d5fb      	bpl.n	8007e6c <_printf_i+0x1c8>
 8007e74:	8019      	strh	r1, [r3, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	6123      	str	r3, [r4, #16]
 8007e7a:	4615      	mov	r5, r2
 8007e7c:	e7ba      	b.n	8007df4 <_printf_i+0x150>
 8007e7e:	682b      	ldr	r3, [r5, #0]
 8007e80:	1d1a      	adds	r2, r3, #4
 8007e82:	602a      	str	r2, [r5, #0]
 8007e84:	681d      	ldr	r5, [r3, #0]
 8007e86:	6862      	ldr	r2, [r4, #4]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7f8 fa30 	bl	80002f0 <memchr>
 8007e90:	b108      	cbz	r0, 8007e96 <_printf_i+0x1f2>
 8007e92:	1b40      	subs	r0, r0, r5
 8007e94:	6060      	str	r0, [r4, #4]
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea0:	e7a8      	b.n	8007df4 <_printf_i+0x150>
 8007ea2:	6923      	ldr	r3, [r4, #16]
 8007ea4:	462a      	mov	r2, r5
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	47d0      	blx	sl
 8007eac:	3001      	adds	r0, #1
 8007eae:	d0ab      	beq.n	8007e08 <_printf_i+0x164>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	079b      	lsls	r3, r3, #30
 8007eb4:	d413      	bmi.n	8007ede <_printf_i+0x23a>
 8007eb6:	68e0      	ldr	r0, [r4, #12]
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	4298      	cmp	r0, r3
 8007ebc:	bfb8      	it	lt
 8007ebe:	4618      	movlt	r0, r3
 8007ec0:	e7a4      	b.n	8007e0c <_printf_i+0x168>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	4640      	mov	r0, r8
 8007eca:	47d0      	blx	sl
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d09b      	beq.n	8007e08 <_printf_i+0x164>
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	68e3      	ldr	r3, [r4, #12]
 8007ed4:	9903      	ldr	r1, [sp, #12]
 8007ed6:	1a5b      	subs	r3, r3, r1
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	dcf2      	bgt.n	8007ec2 <_printf_i+0x21e>
 8007edc:	e7eb      	b.n	8007eb6 <_printf_i+0x212>
 8007ede:	2500      	movs	r5, #0
 8007ee0:	f104 0619 	add.w	r6, r4, #25
 8007ee4:	e7f5      	b.n	8007ed2 <_printf_i+0x22e>
 8007ee6:	bf00      	nop
 8007ee8:	08008bd5 	.word	0x08008bd5
 8007eec:	08008be6 	.word	0x08008be6

08007ef0 <_sbrk_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4d06      	ldr	r5, [pc, #24]	; (8007f0c <_sbrk_r+0x1c>)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	f7fa f984 	bl	8002208 <_sbrk>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_sbrk_r+0x1a>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_sbrk_r+0x1a>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	24000330 	.word	0x24000330

08007f10 <__sread>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	460c      	mov	r4, r1
 8007f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f18:	f000 fafc 	bl	8008514 <_read_r>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	bfab      	itete	ge
 8007f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f22:	89a3      	ldrhlt	r3, [r4, #12]
 8007f24:	181b      	addge	r3, r3, r0
 8007f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f2a:	bfac      	ite	ge
 8007f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f2e:	81a3      	strhlt	r3, [r4, #12]
 8007f30:	bd10      	pop	{r4, pc}

08007f32 <__swrite>:
 8007f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f36:	461f      	mov	r7, r3
 8007f38:	898b      	ldrh	r3, [r1, #12]
 8007f3a:	05db      	lsls	r3, r3, #23
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	4616      	mov	r6, r2
 8007f42:	d505      	bpl.n	8007f50 <__swrite+0x1e>
 8007f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f48:	2302      	movs	r3, #2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f000 f9c8 	bl	80082e0 <_lseek_r>
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f5a:	81a3      	strh	r3, [r4, #12]
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	463b      	mov	r3, r7
 8007f60:	4628      	mov	r0, r5
 8007f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f66:	f000 b869 	b.w	800803c <_write_r>

08007f6a <__sseek>:
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f72:	f000 f9b5 	bl	80082e0 <_lseek_r>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	bf15      	itete	ne
 8007f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f86:	81a3      	strheq	r3, [r4, #12]
 8007f88:	bf18      	it	ne
 8007f8a:	81a3      	strhne	r3, [r4, #12]
 8007f8c:	bd10      	pop	{r4, pc}

08007f8e <__sclose>:
 8007f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f92:	f000 b8d3 	b.w	800813c <_close_r>
	...

08007f98 <__swbuf_r>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	460e      	mov	r6, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	b118      	cbz	r0, 8007faa <__swbuf_r+0x12>
 8007fa2:	6983      	ldr	r3, [r0, #24]
 8007fa4:	b90b      	cbnz	r3, 8007faa <__swbuf_r+0x12>
 8007fa6:	f7ff fa25 	bl	80073f4 <__sinit>
 8007faa:	4b21      	ldr	r3, [pc, #132]	; (8008030 <__swbuf_r+0x98>)
 8007fac:	429c      	cmp	r4, r3
 8007fae:	d12b      	bne.n	8008008 <__swbuf_r+0x70>
 8007fb0:	686c      	ldr	r4, [r5, #4]
 8007fb2:	69a3      	ldr	r3, [r4, #24]
 8007fb4:	60a3      	str	r3, [r4, #8]
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	071a      	lsls	r2, r3, #28
 8007fba:	d52f      	bpl.n	800801c <__swbuf_r+0x84>
 8007fbc:	6923      	ldr	r3, [r4, #16]
 8007fbe:	b36b      	cbz	r3, 800801c <__swbuf_r+0x84>
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	6820      	ldr	r0, [r4, #0]
 8007fc4:	1ac0      	subs	r0, r0, r3
 8007fc6:	6963      	ldr	r3, [r4, #20]
 8007fc8:	b2f6      	uxtb	r6, r6
 8007fca:	4283      	cmp	r3, r0
 8007fcc:	4637      	mov	r7, r6
 8007fce:	dc04      	bgt.n	8007fda <__swbuf_r+0x42>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f948 	bl	8008268 <_fflush_r>
 8007fd8:	bb30      	cbnz	r0, 8008028 <__swbuf_r+0x90>
 8007fda:	68a3      	ldr	r3, [r4, #8]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	60a3      	str	r3, [r4, #8]
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	6022      	str	r2, [r4, #0]
 8007fe6:	701e      	strb	r6, [r3, #0]
 8007fe8:	6963      	ldr	r3, [r4, #20]
 8007fea:	3001      	adds	r0, #1
 8007fec:	4283      	cmp	r3, r0
 8007fee:	d004      	beq.n	8007ffa <__swbuf_r+0x62>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	07db      	lsls	r3, r3, #31
 8007ff4:	d506      	bpl.n	8008004 <__swbuf_r+0x6c>
 8007ff6:	2e0a      	cmp	r6, #10
 8007ff8:	d104      	bne.n	8008004 <__swbuf_r+0x6c>
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f933 	bl	8008268 <_fflush_r>
 8008002:	b988      	cbnz	r0, 8008028 <__swbuf_r+0x90>
 8008004:	4638      	mov	r0, r7
 8008006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <__swbuf_r+0x9c>)
 800800a:	429c      	cmp	r4, r3
 800800c:	d101      	bne.n	8008012 <__swbuf_r+0x7a>
 800800e:	68ac      	ldr	r4, [r5, #8]
 8008010:	e7cf      	b.n	8007fb2 <__swbuf_r+0x1a>
 8008012:	4b09      	ldr	r3, [pc, #36]	; (8008038 <__swbuf_r+0xa0>)
 8008014:	429c      	cmp	r4, r3
 8008016:	bf08      	it	eq
 8008018:	68ec      	ldreq	r4, [r5, #12]
 800801a:	e7ca      	b.n	8007fb2 <__swbuf_r+0x1a>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f000 f81e 	bl	8008060 <__swsetup_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0cb      	beq.n	8007fc0 <__swbuf_r+0x28>
 8008028:	f04f 37ff 	mov.w	r7, #4294967295
 800802c:	e7ea      	b.n	8008004 <__swbuf_r+0x6c>
 800802e:	bf00      	nop
 8008030:	08008b84 	.word	0x08008b84
 8008034:	08008ba4 	.word	0x08008ba4
 8008038:	08008b64 	.word	0x08008b64

0800803c <_write_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d07      	ldr	r5, [pc, #28]	; (800805c <_write_r+0x20>)
 8008040:	4604      	mov	r4, r0
 8008042:	4608      	mov	r0, r1
 8008044:	4611      	mov	r1, r2
 8008046:	2200      	movs	r2, #0
 8008048:	602a      	str	r2, [r5, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	f7fa f88b 	bl	8002166 <_write>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_write_r+0x1e>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_write_r+0x1e>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	24000330 	.word	0x24000330

08008060 <__swsetup_r>:
 8008060:	4b32      	ldr	r3, [pc, #200]	; (800812c <__swsetup_r+0xcc>)
 8008062:	b570      	push	{r4, r5, r6, lr}
 8008064:	681d      	ldr	r5, [r3, #0]
 8008066:	4606      	mov	r6, r0
 8008068:	460c      	mov	r4, r1
 800806a:	b125      	cbz	r5, 8008076 <__swsetup_r+0x16>
 800806c:	69ab      	ldr	r3, [r5, #24]
 800806e:	b913      	cbnz	r3, 8008076 <__swsetup_r+0x16>
 8008070:	4628      	mov	r0, r5
 8008072:	f7ff f9bf 	bl	80073f4 <__sinit>
 8008076:	4b2e      	ldr	r3, [pc, #184]	; (8008130 <__swsetup_r+0xd0>)
 8008078:	429c      	cmp	r4, r3
 800807a:	d10f      	bne.n	800809c <__swsetup_r+0x3c>
 800807c:	686c      	ldr	r4, [r5, #4]
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008084:	0719      	lsls	r1, r3, #28
 8008086:	d42c      	bmi.n	80080e2 <__swsetup_r+0x82>
 8008088:	06dd      	lsls	r5, r3, #27
 800808a:	d411      	bmi.n	80080b0 <__swsetup_r+0x50>
 800808c:	2309      	movs	r3, #9
 800808e:	6033      	str	r3, [r6, #0]
 8008090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	e03e      	b.n	800811a <__swsetup_r+0xba>
 800809c:	4b25      	ldr	r3, [pc, #148]	; (8008134 <__swsetup_r+0xd4>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d101      	bne.n	80080a6 <__swsetup_r+0x46>
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	e7eb      	b.n	800807e <__swsetup_r+0x1e>
 80080a6:	4b24      	ldr	r3, [pc, #144]	; (8008138 <__swsetup_r+0xd8>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	bf08      	it	eq
 80080ac:	68ec      	ldreq	r4, [r5, #12]
 80080ae:	e7e6      	b.n	800807e <__swsetup_r+0x1e>
 80080b0:	0758      	lsls	r0, r3, #29
 80080b2:	d512      	bpl.n	80080da <__swsetup_r+0x7a>
 80080b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080b6:	b141      	cbz	r1, 80080ca <__swsetup_r+0x6a>
 80080b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080bc:	4299      	cmp	r1, r3
 80080be:	d002      	beq.n	80080c6 <__swsetup_r+0x66>
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 f9ab 	bl	800841c <_free_r>
 80080c6:	2300      	movs	r3, #0
 80080c8:	6363      	str	r3, [r4, #52]	; 0x34
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	2300      	movs	r3, #0
 80080d4:	6063      	str	r3, [r4, #4]
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f043 0308 	orr.w	r3, r3, #8
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	b94b      	cbnz	r3, 80080fa <__swsetup_r+0x9a>
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f0:	d003      	beq.n	80080fa <__swsetup_r+0x9a>
 80080f2:	4621      	mov	r1, r4
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 f92b 	bl	8008350 <__smakebuf_r>
 80080fa:	89a0      	ldrh	r0, [r4, #12]
 80080fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008100:	f010 0301 	ands.w	r3, r0, #1
 8008104:	d00a      	beq.n	800811c <__swsetup_r+0xbc>
 8008106:	2300      	movs	r3, #0
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	6963      	ldr	r3, [r4, #20]
 800810c:	425b      	negs	r3, r3
 800810e:	61a3      	str	r3, [r4, #24]
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	b943      	cbnz	r3, 8008126 <__swsetup_r+0xc6>
 8008114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008118:	d1ba      	bne.n	8008090 <__swsetup_r+0x30>
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	0781      	lsls	r1, r0, #30
 800811e:	bf58      	it	pl
 8008120:	6963      	ldrpl	r3, [r4, #20]
 8008122:	60a3      	str	r3, [r4, #8]
 8008124:	e7f4      	b.n	8008110 <__swsetup_r+0xb0>
 8008126:	2000      	movs	r0, #0
 8008128:	e7f7      	b.n	800811a <__swsetup_r+0xba>
 800812a:	bf00      	nop
 800812c:	24000018 	.word	0x24000018
 8008130:	08008b84 	.word	0x08008b84
 8008134:	08008ba4 	.word	0x08008ba4
 8008138:	08008b64 	.word	0x08008b64

0800813c <_close_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d06      	ldr	r5, [pc, #24]	; (8008158 <_close_r+0x1c>)
 8008140:	2300      	movs	r3, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7fa f829 	bl	800219e <_close>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_close_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_close_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	24000330 	.word	0x24000330

0800815c <__sflush_r>:
 800815c:	898a      	ldrh	r2, [r1, #12]
 800815e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008162:	4605      	mov	r5, r0
 8008164:	0710      	lsls	r0, r2, #28
 8008166:	460c      	mov	r4, r1
 8008168:	d458      	bmi.n	800821c <__sflush_r+0xc0>
 800816a:	684b      	ldr	r3, [r1, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dc05      	bgt.n	800817c <__sflush_r+0x20>
 8008170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	dc02      	bgt.n	800817c <__sflush_r+0x20>
 8008176:	2000      	movs	r0, #0
 8008178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800817e:	2e00      	cmp	r6, #0
 8008180:	d0f9      	beq.n	8008176 <__sflush_r+0x1a>
 8008182:	2300      	movs	r3, #0
 8008184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008188:	682f      	ldr	r7, [r5, #0]
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	d032      	beq.n	80081f4 <__sflush_r+0x98>
 800818e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	075a      	lsls	r2, r3, #29
 8008194:	d505      	bpl.n	80081a2 <__sflush_r+0x46>
 8008196:	6863      	ldr	r3, [r4, #4]
 8008198:	1ac0      	subs	r0, r0, r3
 800819a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800819c:	b10b      	cbz	r3, 80081a2 <__sflush_r+0x46>
 800819e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081a0:	1ac0      	subs	r0, r0, r3
 80081a2:	2300      	movs	r3, #0
 80081a4:	4602      	mov	r2, r0
 80081a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a8:	6a21      	ldr	r1, [r4, #32]
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b0      	blx	r6
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	d106      	bne.n	80081c2 <__sflush_r+0x66>
 80081b4:	6829      	ldr	r1, [r5, #0]
 80081b6:	291d      	cmp	r1, #29
 80081b8:	d82c      	bhi.n	8008214 <__sflush_r+0xb8>
 80081ba:	4a2a      	ldr	r2, [pc, #168]	; (8008264 <__sflush_r+0x108>)
 80081bc:	40ca      	lsrs	r2, r1
 80081be:	07d6      	lsls	r6, r2, #31
 80081c0:	d528      	bpl.n	8008214 <__sflush_r+0xb8>
 80081c2:	2200      	movs	r2, #0
 80081c4:	6062      	str	r2, [r4, #4]
 80081c6:	04d9      	lsls	r1, r3, #19
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	6022      	str	r2, [r4, #0]
 80081cc:	d504      	bpl.n	80081d8 <__sflush_r+0x7c>
 80081ce:	1c42      	adds	r2, r0, #1
 80081d0:	d101      	bne.n	80081d6 <__sflush_r+0x7a>
 80081d2:	682b      	ldr	r3, [r5, #0]
 80081d4:	b903      	cbnz	r3, 80081d8 <__sflush_r+0x7c>
 80081d6:	6560      	str	r0, [r4, #84]	; 0x54
 80081d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081da:	602f      	str	r7, [r5, #0]
 80081dc:	2900      	cmp	r1, #0
 80081de:	d0ca      	beq.n	8008176 <__sflush_r+0x1a>
 80081e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e4:	4299      	cmp	r1, r3
 80081e6:	d002      	beq.n	80081ee <__sflush_r+0x92>
 80081e8:	4628      	mov	r0, r5
 80081ea:	f000 f917 	bl	800841c <_free_r>
 80081ee:	2000      	movs	r0, #0
 80081f0:	6360      	str	r0, [r4, #52]	; 0x34
 80081f2:	e7c1      	b.n	8008178 <__sflush_r+0x1c>
 80081f4:	6a21      	ldr	r1, [r4, #32]
 80081f6:	2301      	movs	r3, #1
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b0      	blx	r6
 80081fc:	1c41      	adds	r1, r0, #1
 80081fe:	d1c7      	bne.n	8008190 <__sflush_r+0x34>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0c4      	beq.n	8008190 <__sflush_r+0x34>
 8008206:	2b1d      	cmp	r3, #29
 8008208:	d001      	beq.n	800820e <__sflush_r+0xb2>
 800820a:	2b16      	cmp	r3, #22
 800820c:	d101      	bne.n	8008212 <__sflush_r+0xb6>
 800820e:	602f      	str	r7, [r5, #0]
 8008210:	e7b1      	b.n	8008176 <__sflush_r+0x1a>
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	e7ad      	b.n	8008178 <__sflush_r+0x1c>
 800821c:	690f      	ldr	r7, [r1, #16]
 800821e:	2f00      	cmp	r7, #0
 8008220:	d0a9      	beq.n	8008176 <__sflush_r+0x1a>
 8008222:	0793      	lsls	r3, r2, #30
 8008224:	680e      	ldr	r6, [r1, #0]
 8008226:	bf08      	it	eq
 8008228:	694b      	ldreq	r3, [r1, #20]
 800822a:	600f      	str	r7, [r1, #0]
 800822c:	bf18      	it	ne
 800822e:	2300      	movne	r3, #0
 8008230:	eba6 0807 	sub.w	r8, r6, r7
 8008234:	608b      	str	r3, [r1, #8]
 8008236:	f1b8 0f00 	cmp.w	r8, #0
 800823a:	dd9c      	ble.n	8008176 <__sflush_r+0x1a>
 800823c:	6a21      	ldr	r1, [r4, #32]
 800823e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008240:	4643      	mov	r3, r8
 8008242:	463a      	mov	r2, r7
 8008244:	4628      	mov	r0, r5
 8008246:	47b0      	blx	r6
 8008248:	2800      	cmp	r0, #0
 800824a:	dc06      	bgt.n	800825a <__sflush_r+0xfe>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	e78e      	b.n	8008178 <__sflush_r+0x1c>
 800825a:	4407      	add	r7, r0
 800825c:	eba8 0800 	sub.w	r8, r8, r0
 8008260:	e7e9      	b.n	8008236 <__sflush_r+0xda>
 8008262:	bf00      	nop
 8008264:	20400001 	.word	0x20400001

08008268 <_fflush_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	690b      	ldr	r3, [r1, #16]
 800826c:	4605      	mov	r5, r0
 800826e:	460c      	mov	r4, r1
 8008270:	b913      	cbnz	r3, 8008278 <_fflush_r+0x10>
 8008272:	2500      	movs	r5, #0
 8008274:	4628      	mov	r0, r5
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	b118      	cbz	r0, 8008282 <_fflush_r+0x1a>
 800827a:	6983      	ldr	r3, [r0, #24]
 800827c:	b90b      	cbnz	r3, 8008282 <_fflush_r+0x1a>
 800827e:	f7ff f8b9 	bl	80073f4 <__sinit>
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <_fflush_r+0x6c>)
 8008284:	429c      	cmp	r4, r3
 8008286:	d11b      	bne.n	80082c0 <_fflush_r+0x58>
 8008288:	686c      	ldr	r4, [r5, #4]
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0ef      	beq.n	8008272 <_fflush_r+0xa>
 8008292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008294:	07d0      	lsls	r0, r2, #31
 8008296:	d404      	bmi.n	80082a2 <_fflush_r+0x3a>
 8008298:	0599      	lsls	r1, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_fflush_r+0x3a>
 800829c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829e:	f7ff f947 	bl	8007530 <__retarget_lock_acquire_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7ff ff59 	bl	800815c <__sflush_r>
 80082aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	4605      	mov	r5, r0
 80082b0:	d4e0      	bmi.n	8008274 <_fflush_r+0xc>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4dd      	bmi.n	8008274 <_fflush_r+0xc>
 80082b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ba:	f7ff f93a 	bl	8007532 <__retarget_lock_release_recursive>
 80082be:	e7d9      	b.n	8008274 <_fflush_r+0xc>
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <_fflush_r+0x70>)
 80082c2:	429c      	cmp	r4, r3
 80082c4:	d101      	bne.n	80082ca <_fflush_r+0x62>
 80082c6:	68ac      	ldr	r4, [r5, #8]
 80082c8:	e7df      	b.n	800828a <_fflush_r+0x22>
 80082ca:	4b04      	ldr	r3, [pc, #16]	; (80082dc <_fflush_r+0x74>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	bf08      	it	eq
 80082d0:	68ec      	ldreq	r4, [r5, #12]
 80082d2:	e7da      	b.n	800828a <_fflush_r+0x22>
 80082d4:	08008b84 	.word	0x08008b84
 80082d8:	08008ba4 	.word	0x08008ba4
 80082dc:	08008b64 	.word	0x08008b64

080082e0 <_lseek_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <_lseek_r+0x20>)
 80082e4:	4604      	mov	r4, r0
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	602a      	str	r2, [r5, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f7f9 ff7c 	bl	80021ec <_lseek>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_lseek_r+0x1e>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_lseek_r+0x1e>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	24000330 	.word	0x24000330

08008304 <__swhatbuf_r>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	460e      	mov	r6, r1
 8008308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830c:	2900      	cmp	r1, #0
 800830e:	b096      	sub	sp, #88	; 0x58
 8008310:	4614      	mov	r4, r2
 8008312:	461d      	mov	r5, r3
 8008314:	da08      	bge.n	8008328 <__swhatbuf_r+0x24>
 8008316:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	602a      	str	r2, [r5, #0]
 800831e:	061a      	lsls	r2, r3, #24
 8008320:	d410      	bmi.n	8008344 <__swhatbuf_r+0x40>
 8008322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008326:	e00e      	b.n	8008346 <__swhatbuf_r+0x42>
 8008328:	466a      	mov	r2, sp
 800832a:	f000 f905 	bl	8008538 <_fstat_r>
 800832e:	2800      	cmp	r0, #0
 8008330:	dbf1      	blt.n	8008316 <__swhatbuf_r+0x12>
 8008332:	9a01      	ldr	r2, [sp, #4]
 8008334:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008338:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800833c:	425a      	negs	r2, r3
 800833e:	415a      	adcs	r2, r3
 8008340:	602a      	str	r2, [r5, #0]
 8008342:	e7ee      	b.n	8008322 <__swhatbuf_r+0x1e>
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	2000      	movs	r0, #0
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	b016      	add	sp, #88	; 0x58
 800834c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008350 <__smakebuf_r>:
 8008350:	898b      	ldrh	r3, [r1, #12]
 8008352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008354:	079d      	lsls	r5, r3, #30
 8008356:	4606      	mov	r6, r0
 8008358:	460c      	mov	r4, r1
 800835a:	d507      	bpl.n	800836c <__smakebuf_r+0x1c>
 800835c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	6123      	str	r3, [r4, #16]
 8008364:	2301      	movs	r3, #1
 8008366:	6163      	str	r3, [r4, #20]
 8008368:	b002      	add	sp, #8
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	ab01      	add	r3, sp, #4
 800836e:	466a      	mov	r2, sp
 8008370:	f7ff ffc8 	bl	8008304 <__swhatbuf_r>
 8008374:	9900      	ldr	r1, [sp, #0]
 8008376:	4605      	mov	r5, r0
 8008378:	4630      	mov	r0, r6
 800837a:	f7ff f8fb 	bl	8007574 <_malloc_r>
 800837e:	b948      	cbnz	r0, 8008394 <__smakebuf_r+0x44>
 8008380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008384:	059a      	lsls	r2, r3, #22
 8008386:	d4ef      	bmi.n	8008368 <__smakebuf_r+0x18>
 8008388:	f023 0303 	bic.w	r3, r3, #3
 800838c:	f043 0302 	orr.w	r3, r3, #2
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	e7e3      	b.n	800835c <__smakebuf_r+0xc>
 8008394:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <__smakebuf_r+0x7c>)
 8008396:	62b3      	str	r3, [r6, #40]	; 0x28
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	6020      	str	r0, [r4, #0]
 800839c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	9b00      	ldr	r3, [sp, #0]
 80083a4:	6163      	str	r3, [r4, #20]
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	6120      	str	r0, [r4, #16]
 80083aa:	b15b      	cbz	r3, 80083c4 <__smakebuf_r+0x74>
 80083ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 f8d3 	bl	800855c <_isatty_r>
 80083b6:	b128      	cbz	r0, 80083c4 <__smakebuf_r+0x74>
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	f023 0303 	bic.w	r3, r3, #3
 80083be:	f043 0301 	orr.w	r3, r3, #1
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	89a0      	ldrh	r0, [r4, #12]
 80083c6:	4305      	orrs	r5, r0
 80083c8:	81a5      	strh	r5, [r4, #12]
 80083ca:	e7cd      	b.n	8008368 <__smakebuf_r+0x18>
 80083cc:	0800738d 	.word	0x0800738d

080083d0 <memmove>:
 80083d0:	4288      	cmp	r0, r1
 80083d2:	b510      	push	{r4, lr}
 80083d4:	eb01 0402 	add.w	r4, r1, r2
 80083d8:	d902      	bls.n	80083e0 <memmove+0x10>
 80083da:	4284      	cmp	r4, r0
 80083dc:	4623      	mov	r3, r4
 80083de:	d807      	bhi.n	80083f0 <memmove+0x20>
 80083e0:	1e43      	subs	r3, r0, #1
 80083e2:	42a1      	cmp	r1, r4
 80083e4:	d008      	beq.n	80083f8 <memmove+0x28>
 80083e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083ee:	e7f8      	b.n	80083e2 <memmove+0x12>
 80083f0:	4402      	add	r2, r0
 80083f2:	4601      	mov	r1, r0
 80083f4:	428a      	cmp	r2, r1
 80083f6:	d100      	bne.n	80083fa <memmove+0x2a>
 80083f8:	bd10      	pop	{r4, pc}
 80083fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008402:	e7f7      	b.n	80083f4 <memmove+0x24>

08008404 <__malloc_lock>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__malloc_lock+0x8>)
 8008406:	f7ff b893 	b.w	8007530 <__retarget_lock_acquire_recursive>
 800840a:	bf00      	nop
 800840c:	24000324 	.word	0x24000324

08008410 <__malloc_unlock>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__malloc_unlock+0x8>)
 8008412:	f7ff b88e 	b.w	8007532 <__retarget_lock_release_recursive>
 8008416:	bf00      	nop
 8008418:	24000324 	.word	0x24000324

0800841c <_free_r>:
 800841c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800841e:	2900      	cmp	r1, #0
 8008420:	d044      	beq.n	80084ac <_free_r+0x90>
 8008422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008426:	9001      	str	r0, [sp, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	f1a1 0404 	sub.w	r4, r1, #4
 800842e:	bfb8      	it	lt
 8008430:	18e4      	addlt	r4, r4, r3
 8008432:	f7ff ffe7 	bl	8008404 <__malloc_lock>
 8008436:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <_free_r+0x94>)
 8008438:	9801      	ldr	r0, [sp, #4]
 800843a:	6813      	ldr	r3, [r2, #0]
 800843c:	b933      	cbnz	r3, 800844c <_free_r+0x30>
 800843e:	6063      	str	r3, [r4, #4]
 8008440:	6014      	str	r4, [r2, #0]
 8008442:	b003      	add	sp, #12
 8008444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008448:	f7ff bfe2 	b.w	8008410 <__malloc_unlock>
 800844c:	42a3      	cmp	r3, r4
 800844e:	d908      	bls.n	8008462 <_free_r+0x46>
 8008450:	6825      	ldr	r5, [r4, #0]
 8008452:	1961      	adds	r1, r4, r5
 8008454:	428b      	cmp	r3, r1
 8008456:	bf01      	itttt	eq
 8008458:	6819      	ldreq	r1, [r3, #0]
 800845a:	685b      	ldreq	r3, [r3, #4]
 800845c:	1949      	addeq	r1, r1, r5
 800845e:	6021      	streq	r1, [r4, #0]
 8008460:	e7ed      	b.n	800843e <_free_r+0x22>
 8008462:	461a      	mov	r2, r3
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	b10b      	cbz	r3, 800846c <_free_r+0x50>
 8008468:	42a3      	cmp	r3, r4
 800846a:	d9fa      	bls.n	8008462 <_free_r+0x46>
 800846c:	6811      	ldr	r1, [r2, #0]
 800846e:	1855      	adds	r5, r2, r1
 8008470:	42a5      	cmp	r5, r4
 8008472:	d10b      	bne.n	800848c <_free_r+0x70>
 8008474:	6824      	ldr	r4, [r4, #0]
 8008476:	4421      	add	r1, r4
 8008478:	1854      	adds	r4, r2, r1
 800847a:	42a3      	cmp	r3, r4
 800847c:	6011      	str	r1, [r2, #0]
 800847e:	d1e0      	bne.n	8008442 <_free_r+0x26>
 8008480:	681c      	ldr	r4, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	6053      	str	r3, [r2, #4]
 8008486:	4421      	add	r1, r4
 8008488:	6011      	str	r1, [r2, #0]
 800848a:	e7da      	b.n	8008442 <_free_r+0x26>
 800848c:	d902      	bls.n	8008494 <_free_r+0x78>
 800848e:	230c      	movs	r3, #12
 8008490:	6003      	str	r3, [r0, #0]
 8008492:	e7d6      	b.n	8008442 <_free_r+0x26>
 8008494:	6825      	ldr	r5, [r4, #0]
 8008496:	1961      	adds	r1, r4, r5
 8008498:	428b      	cmp	r3, r1
 800849a:	bf04      	itt	eq
 800849c:	6819      	ldreq	r1, [r3, #0]
 800849e:	685b      	ldreq	r3, [r3, #4]
 80084a0:	6063      	str	r3, [r4, #4]
 80084a2:	bf04      	itt	eq
 80084a4:	1949      	addeq	r1, r1, r5
 80084a6:	6021      	streq	r1, [r4, #0]
 80084a8:	6054      	str	r4, [r2, #4]
 80084aa:	e7ca      	b.n	8008442 <_free_r+0x26>
 80084ac:	b003      	add	sp, #12
 80084ae:	bd30      	pop	{r4, r5, pc}
 80084b0:	24000328 	.word	0x24000328

080084b4 <_realloc_r>:
 80084b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	4680      	mov	r8, r0
 80084ba:	4614      	mov	r4, r2
 80084bc:	460e      	mov	r6, r1
 80084be:	b921      	cbnz	r1, 80084ca <_realloc_r+0x16>
 80084c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	4611      	mov	r1, r2
 80084c6:	f7ff b855 	b.w	8007574 <_malloc_r>
 80084ca:	b92a      	cbnz	r2, 80084d8 <_realloc_r+0x24>
 80084cc:	f7ff ffa6 	bl	800841c <_free_r>
 80084d0:	4625      	mov	r5, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d8:	f000 f850 	bl	800857c <_malloc_usable_size_r>
 80084dc:	4284      	cmp	r4, r0
 80084de:	4607      	mov	r7, r0
 80084e0:	d802      	bhi.n	80084e8 <_realloc_r+0x34>
 80084e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084e6:	d812      	bhi.n	800850e <_realloc_r+0x5a>
 80084e8:	4621      	mov	r1, r4
 80084ea:	4640      	mov	r0, r8
 80084ec:	f7ff f842 	bl	8007574 <_malloc_r>
 80084f0:	4605      	mov	r5, r0
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d0ed      	beq.n	80084d2 <_realloc_r+0x1e>
 80084f6:	42bc      	cmp	r4, r7
 80084f8:	4622      	mov	r2, r4
 80084fa:	4631      	mov	r1, r6
 80084fc:	bf28      	it	cs
 80084fe:	463a      	movcs	r2, r7
 8008500:	f7fe fed2 	bl	80072a8 <memcpy>
 8008504:	4631      	mov	r1, r6
 8008506:	4640      	mov	r0, r8
 8008508:	f7ff ff88 	bl	800841c <_free_r>
 800850c:	e7e1      	b.n	80084d2 <_realloc_r+0x1e>
 800850e:	4635      	mov	r5, r6
 8008510:	e7df      	b.n	80084d2 <_realloc_r+0x1e>
	...

08008514 <_read_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d07      	ldr	r5, [pc, #28]	; (8008534 <_read_r+0x20>)
 8008518:	4604      	mov	r4, r0
 800851a:	4608      	mov	r0, r1
 800851c:	4611      	mov	r1, r2
 800851e:	2200      	movs	r2, #0
 8008520:	602a      	str	r2, [r5, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	f7f9 fe02 	bl	800212c <_read>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_read_r+0x1e>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_read_r+0x1e>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	24000330 	.word	0x24000330

08008538 <_fstat_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d07      	ldr	r5, [pc, #28]	; (8008558 <_fstat_r+0x20>)
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	f7f9 fe36 	bl	80021b6 <_fstat>
 800854a:	1c43      	adds	r3, r0, #1
 800854c:	d102      	bne.n	8008554 <_fstat_r+0x1c>
 800854e:	682b      	ldr	r3, [r5, #0]
 8008550:	b103      	cbz	r3, 8008554 <_fstat_r+0x1c>
 8008552:	6023      	str	r3, [r4, #0]
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	bf00      	nop
 8008558:	24000330 	.word	0x24000330

0800855c <_isatty_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d06      	ldr	r5, [pc, #24]	; (8008578 <_isatty_r+0x1c>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	602b      	str	r3, [r5, #0]
 8008568:	f7f9 fe35 	bl	80021d6 <_isatty>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_isatty_r+0x1a>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_isatty_r+0x1a>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	24000330 	.word	0x24000330

0800857c <_malloc_usable_size_r>:
 800857c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008580:	1f18      	subs	r0, r3, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	bfbc      	itt	lt
 8008586:	580b      	ldrlt	r3, [r1, r0]
 8008588:	18c0      	addlt	r0, r0, r3
 800858a:	4770      	bx	lr

0800858c <_init>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	bf00      	nop
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr

08008598 <_fini>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr
