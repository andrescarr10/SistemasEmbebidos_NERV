
QuickExperiment_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e88  08004e88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e88  08004e88  00014e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e90  08004e90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000010  08004ea8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c0  08004ea8  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010180  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9b  00000000  00000000  000301be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00031f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00032a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000390fd  00000000  00000000  00033488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e600  00000000  00000000  0006c585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017a93b  00000000  00000000  0007ab85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f54c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c70  00000000  00000000  001f5510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004e38 	.word	0x08004e38

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004e38 	.word	0x08004e38

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <main+0xc0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f987 	bl	8000a44 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fa5f 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f849 	bl	80007d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <main+0xc0>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a20      	ldr	r2, [pc, #128]	; (80007c8 <main+0xc0>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <main+0xc0>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fdbb 	bl	80012d8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fdd1 	bl	800130c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <main+0xc0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60fa      	str	r2, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f959 	bl	8000a44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f8e3 	bl	800095c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000796:	f000 f895 	bl	80008c4 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
 	uint8_t message;
 	HAL_UART_Receive(&huart3, &message, sizeof(message), HAL_MAX_DELAY);
 800079a:	1df9      	adds	r1, r7, #7
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	2201      	movs	r2, #1
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <main+0xc4>)
 80007a4:	f003 fa28 	bl	8003bf8 <HAL_UART_Receive>
 	message = message + 1 ;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	71fb      	strb	r3, [r7, #7]
 	HAL_UART_Transmit(&huart3, &message, sizeof(message), HAL_MAX_DELAY);
 80007b0:	1df9      	adds	r1, r7, #7
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	2201      	movs	r2, #1
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <main+0xc4>)
 80007ba:	f003 f987 	bl	8003acc <HAL_UART_Transmit>
 	HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f000 faac 	bl	8000d1c <HAL_Delay>
    {
 80007c4:	e7e9      	b.n	800079a <main+0x92>
 80007c6:	bf00      	nop
 80007c8:	58024400 	.word	0x58024400
 80007cc:	2400002c 	.word	0x2400002c

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09c      	sub	sp, #112	; 0x70
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	224c      	movs	r2, #76	; 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fb22 	bl	8004e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2220      	movs	r2, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fb1c 	bl	8004e28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f0:	2004      	movs	r0, #4
 80007f2:	f000 fd9f 	bl	8001334 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <SystemClock_Config+0xec>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a2f      	ldr	r2, [pc, #188]	; (80008bc <SystemClock_Config+0xec>)
 8000800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <SystemClock_Config+0xec>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <SystemClock_Config+0xf0>)
 8000812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000814:	4a2a      	ldr	r2, [pc, #168]	; (80008c0 <SystemClock_Config+0xf0>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <SystemClock_Config+0xf0>)
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000828:	bf00      	nop
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <SystemClock_Config+0xec>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000836:	d1f8      	bne.n	800082a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	2301      	movs	r3, #1
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800083c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	2302      	movs	r3, #2
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800084e:	23f0      	movs	r3, #240	; 0xf0
 8000850:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800085e:	2308      	movs	r3, #8
 8000860:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000862:	2300      	movs	r3, #0
 8000864:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fdba 	bl	80013e8 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800087a:	f000 f8e3 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	233f      	movs	r3, #63	; 0x3f
 8000880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2303      	movs	r3, #3
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800088a:	2308      	movs	r3, #8
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088e:	2340      	movs	r3, #64	; 0x40
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089c:	2340      	movs	r3, #64	; 0x40
 800089e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2104      	movs	r1, #4
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 f9cd 	bl	8001c44 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008b0:	f000 f8c8 	bl	8000a44 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3770      	adds	r7, #112	; 0x70
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58024800 	.word	0x58024800
 80008c0:	58000400 	.word	0x58000400

080008c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_USART3_UART_Init+0x94>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_USART3_UART_Init+0x90>)
 800090e:	f003 f88d 	bl	8003a2c <HAL_UART_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f894 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000920:	f004 f994 	bl	8004c4c <HAL_UARTEx_SetTxFifoThreshold>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800092a:	f000 f88b 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4808      	ldr	r0, [pc, #32]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000932:	f004 f9c9 	bl	8004cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800093c:	f000 f882 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000942:	f004 f94a 	bl	8004bda <HAL_UARTEx_DisableFifoMode>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800094c:	f000 f87a 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2400002c 	.word	0x2400002c
 8000958:	40004800 	.word	0x40004800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <MX_GPIO_Init+0xdc>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <MX_GPIO_Init+0xdc>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <MX_GPIO_Init+0xdc>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_GPIO_Init+0xdc>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xdc>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MX_GPIO_Init+0xdc>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_GPIO_Init+0xdc>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <MX_GPIO_Init+0xdc>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_GPIO_Init+0xdc>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_GPIO_Init+0xdc>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <MX_GPIO_Init+0xdc>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_GPIO_Init+0xdc>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f244 0101 	movw	r1, #16385	; 0x4001
 80009f0:	4812      	ldr	r0, [pc, #72]	; (8000a3c <MX_GPIO_Init+0xe0>)
 80009f2:	f000 fc57 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_GPIO_Init+0xe4>)
 8000a0c:	f000 fa9a 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a10:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0xe0>)
 8000a2a:	f000 fa8b 	bl	8000f44 <HAL_GPIO_Init>

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58020400 	.word	0x58020400
 8000a40:	58020800 	.word	0x58020800

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_MspInit+0x30>)
 8000a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x30>)
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x30>)
 8000a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	58024400 	.word	0x58024400

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0b8      	sub	sp, #224	; 0xe0
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	22bc      	movs	r2, #188	; 0xbc
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 f9bf 	bl	8004e28 <memset>
  if(huart->Instance==USART3)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <HAL_UART_MspInit+0xc0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d142      	bne.n	8000b3a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fc4a 	bl	800235c <HAL_RCCEx_PeriphCLKConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ace:	f7ff ffb9 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_UART_MspInit+0xc4>)
 8000ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <HAL_UART_MspInit+0xc4>)
 8000ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_UART_MspInit+0xc4>)
 8000ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_UART_MspInit+0xc4>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_UART_MspInit+0xc4>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_UART_MspInit+0xc4>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_UART_MspInit+0xc8>)
 8000b36:	f000 fa05 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	37e0      	adds	r7, #224	; 0xe0
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004800 	.word	0x40004800
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020c00 	.word	0x58020c00

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f89e 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba8:	f7ff fd18 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	; (8000be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	; (8000bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f004 f905 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fd97 	bl	8000708 <main>
  bx  lr
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000be0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000be4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000be8:	08004e98 	.word	0x08004e98
  ldr r2, =_sbss
 8000bec:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bf0:	240000c0 	.word	0x240000c0

08000bf4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC3_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f96e 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c04:	f001 f9d4 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_Init+0x68>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	4913      	ldr	r1, [pc, #76]	; (8000c64 <HAL_Init+0x6c>)
 8000c16:	5ccb      	ldrb	r3, [r1, r3]
 8000c18:	f003 031f 	and.w	r3, r3, #31
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_Init+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_Init+0x6c>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	f003 031f 	and.w	r3, r3, #31
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <HAL_Init+0x70>)
 8000c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_Init+0x74>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	200f      	movs	r0, #15
 8000c44:	f000 f814 	bl	8000c70 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e002      	b.n	8000c58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c52:	f7ff fefd 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58024400 	.word	0x58024400
 8000c64:	08004e50 	.word	0x08004e50
 8000c68:	24000004 	.word	0x24000004
 8000c6c:	24000000 	.word	0x24000000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_InitTick+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e021      	b.n	8000cc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_InitTick+0x64>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_InitTick+0x60>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f945 	bl	8000f2a <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f91d 	bl	8000ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x68>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2400000c 	.word	0x2400000c
 8000cd4:	24000000 	.word	0x24000000
 8000cd8:	24000008 	.word	0x24000008

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2400000c 	.word	0x2400000c
 8000d00:	240000bc 	.word	0x240000bc

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	240000bc 	.word	0x240000bc

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2400000c 	.word	0x2400000c

08000d64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetREVID+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	0c1b      	lsrs	r3, r3, #16
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	5c001000 	.word	0x5c001000

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <__NVIC_SetPriorityGrouping+0x40>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x40>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	05fa0000 	.word	0x05fa0000

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff8e 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff47 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff5e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff90 	bl	8000e34 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5f 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffb2 	bl	8000e9c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f52:	4b89      	ldr	r3, [pc, #548]	; (8001178 <HAL_GPIO_Init+0x234>)
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f56:	e194      	b.n	8001282 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8186 	beq.w	800127c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x44>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d017      	beq.n	8001026 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d123      	bne.n	800107a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691a      	ldr	r2, [r3, #16]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	69b9      	ldr	r1, [r7, #24]
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0203 	and.w	r2, r3, #3
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80e0 	beq.w	800127c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_GPIO_Init+0x238>)
 80010be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010c2:	4a2e      	ldr	r2, [pc, #184]	; (800117c <HAL_GPIO_Init+0x238>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_GPIO_Init+0x238>)
 80010ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a29      	ldr	r2, [pc, #164]	; (8001180 <HAL_GPIO_Init+0x23c>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a20      	ldr	r2, [pc, #128]	; (8001184 <HAL_GPIO_Init+0x240>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d052      	beq.n	80011ac <HAL_GPIO_Init+0x268>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <HAL_GPIO_Init+0x244>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d031      	beq.n	8001172 <HAL_GPIO_Init+0x22e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_GPIO_Init+0x248>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_GPIO_Init+0x22a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_GPIO_Init+0x24c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x226>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_GPIO_Init+0x250>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x222>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_GPIO_Init+0x254>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x21e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1a      	ldr	r2, [pc, #104]	; (800119c <HAL_GPIO_Init+0x258>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x21a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <HAL_GPIO_Init+0x25c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x216>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x260>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x212>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_GPIO_Init+0x264>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x20e>
 800114e:	2309      	movs	r3, #9
 8001150:	e02d      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 8001152:	230a      	movs	r3, #10
 8001154:	e02b      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 8001156:	2308      	movs	r3, #8
 8001158:	e029      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 800115a:	2307      	movs	r3, #7
 800115c:	e027      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 800115e:	2306      	movs	r3, #6
 8001160:	e025      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 8001162:	2305      	movs	r3, #5
 8001164:	e023      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 8001166:	2304      	movs	r3, #4
 8001168:	e021      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 800116a:	2303      	movs	r3, #3
 800116c:	e01f      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 800116e:	2302      	movs	r3, #2
 8001170:	e01d      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 8001172:	2301      	movs	r3, #1
 8001174:	e01b      	b.n	80011ae <HAL_GPIO_Init+0x26a>
 8001176:	bf00      	nop
 8001178:	58000080 	.word	0x58000080
 800117c:	58024400 	.word	0x58024400
 8001180:	58000400 	.word	0x58000400
 8001184:	58020000 	.word	0x58020000
 8001188:	58020400 	.word	0x58020400
 800118c:	58020800 	.word	0x58020800
 8001190:	58020c00 	.word	0x58020c00
 8001194:	58021000 	.word	0x58021000
 8001198:	58021400 	.word	0x58021400
 800119c:	58021800 	.word	0x58021800
 80011a0:	58021c00 	.word	0x58021c00
 80011a4:	58022000 	.word	0x58022000
 80011a8:	58022400 	.word	0x58022400
 80011ac:	2300      	movs	r3, #0
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011be:	4938      	ldr	r1, [pc, #224]	; (80012a0 <HAL_GPIO_Init+0x35c>)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	3301      	adds	r3, #1
 8001280:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f ae63 	bne.w	8000f58 <HAL_GPIO_Init+0x14>
  }
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3724      	adds	r7, #36	; 0x24
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	58000400 	.word	0x58000400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_HSEM_FastTake+0x2c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3320      	adds	r3, #32
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_HSEM_FastTake+0x30>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d101      	bne.n	80012f4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e000      	b.n	80012f6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	58026400 	.word	0x58026400
 8001308:	80000300 	.word	0x80000300

0800130c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001316:	4906      	ldr	r1, [pc, #24]	; (8001330 <HAL_HSEM_Release+0x24>)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	58026400 	.word	0x58026400

08001334 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	2b06      	cmp	r3, #6
 8001346:	d00a      	beq.n	800135e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e040      	b.n	80013dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e03e      	b.n	80013dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001366:	491f      	ldr	r1, [pc, #124]	; (80013e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4313      	orrs	r3, r2
 800136c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800136e:	f7ff fcc9 	bl	8000d04 <HAL_GetTick>
 8001372:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001374:	e009      	b.n	800138a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001376:	f7ff fcc5 	bl	8000d04 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001384:	d901      	bls.n	800138a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e028      	b.n	80013dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001396:	d1ee      	bne.n	8001376 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b1e      	cmp	r3, #30
 800139c:	d008      	beq.n	80013b0 <HAL_PWREx_ConfigSupply+0x7c>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b2e      	cmp	r3, #46	; 0x2e
 80013a2:	d005      	beq.n	80013b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b1d      	cmp	r3, #29
 80013a8:	d002      	beq.n	80013b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b2d      	cmp	r3, #45	; 0x2d
 80013ae:	d114      	bne.n	80013da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013b0:	f7ff fca8 	bl	8000d04 <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013b6:	e009      	b.n	80013cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013b8:	f7ff fca4 	bl	8000d04 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c6:	d901      	bls.n	80013cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e007      	b.n	80013dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d8:	d1ee      	bne.n	80013b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58024800 	.word	0x58024800

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	f000 bc1d 	b.w	8001c36 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 8087 	beq.w	8001518 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140a:	4b99      	ldr	r3, [pc, #612]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001414:	4b96      	ldr	r3, [pc, #600]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141c:	2b10      	cmp	r3, #16
 800141e:	d007      	beq.n	8001430 <HAL_RCC_OscConfig+0x48>
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	2b18      	cmp	r3, #24
 8001424:	d110      	bne.n	8001448 <HAL_RCC_OscConfig+0x60>
 8001426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d10b      	bne.n	8001448 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	4b8f      	ldr	r3, [pc, #572]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d06c      	beq.n	8001516 <HAL_RCC_OscConfig+0x12e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d168      	bne.n	8001516 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e3f6      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d106      	bne.n	8001460 <HAL_RCC_OscConfig+0x78>
 8001452:	4b87      	ldr	r3, [pc, #540]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a86      	ldr	r2, [pc, #536]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e02e      	b.n	80014be <HAL_RCC_OscConfig+0xd6>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x9a>
 8001468:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a80      	ldr	r2, [pc, #512]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a7d      	ldr	r2, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e01d      	b.n	80014be <HAL_RCC_OscConfig+0xd6>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800148a:	d10c      	bne.n	80014a6 <HAL_RCC_OscConfig+0xbe>
 800148c:	4b78      	ldr	r3, [pc, #480]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a77      	ldr	r2, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001492:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b75      	ldr	r3, [pc, #468]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a74      	ldr	r2, [pc, #464]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e00b      	b.n	80014be <HAL_RCC_OscConfig+0xd6>
 80014a6:	4b72      	ldr	r3, [pc, #456]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a71      	ldr	r2, [pc, #452]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80014ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6f      	ldr	r3, [pc, #444]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6e      	ldr	r2, [pc, #440]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80014b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d013      	beq.n	80014ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff fc1d 	bl	8000d04 <HAL_GetTick>
 80014ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ce:	f7ff fc19 	bl	8000d04 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b64      	cmp	r3, #100	; 0x64
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e3aa      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014e0:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0xe6>
 80014ec:	e014      	b.n	8001518 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc09 	bl	8000d04 <HAL_GetTick>
 80014f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f6:	f7ff fc05 	bl	8000d04 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b64      	cmp	r3, #100	; 0x64
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e396      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001508:	4b59      	ldr	r3, [pc, #356]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x10e>
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80cb 	beq.w	80016bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001526:	4b52      	ldr	r3, [pc, #328]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800152e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001530:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_RCC_OscConfig+0x164>
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	2b18      	cmp	r3, #24
 8001540:	d156      	bne.n	80015f0 <HAL_RCC_OscConfig+0x208>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d151      	bne.n	80015f0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154c:	4b48      	ldr	r3, [pc, #288]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x17c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e368      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001564:	4b42      	ldr	r3, [pc, #264]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 0219 	bic.w	r2, r3, #25
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	493f      	ldr	r1, [pc, #252]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001576:	f7ff fbc5 	bl	8000d04 <HAL_GetTick>
 800157a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff fbc1 	bl	8000d04 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e352      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001590:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159c:	f7ff fbe2 	bl	8000d64 <HAL_GetREVID>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d817      	bhi.n	80015da <HAL_RCC_OscConfig+0x1f2>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b40      	cmp	r3, #64	; 0x40
 80015b0:	d108      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1dc>
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c2:	e07b      	b.n	80016bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	031b      	lsls	r3, r3, #12
 80015d2:	4927      	ldr	r1, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d8:	e070      	b.n	80016bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	061b      	lsls	r3, r3, #24
 80015e8:	4921      	ldr	r1, [pc, #132]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ee:	e065      	b.n	80016bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d048      	beq.n	800168a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 0219 	bic.w	r2, r3, #25
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	491a      	ldr	r1, [pc, #104]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb7b 	bl	8000d04 <HAL_GetTick>
 800160e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb77 	bl	8000d04 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e308      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	f7ff fb98 	bl	8000d64 <HAL_GetREVID>
 8001634:	4603      	mov	r3, r0
 8001636:	f241 0203 	movw	r2, #4099	; 0x1003
 800163a:	4293      	cmp	r3, r2
 800163c:	d81a      	bhi.n	8001674 <HAL_RCC_OscConfig+0x28c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b40      	cmp	r3, #64	; 0x40
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x270>
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6053      	str	r3, [r2, #4]
 8001656:	e031      	b.n	80016bc <HAL_RCC_OscConfig+0x2d4>
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	031b      	lsls	r3, r3, #12
 8001666:	4902      	ldr	r1, [pc, #8]	; (8001670 <HAL_RCC_OscConfig+0x288>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
 800166c:	e026      	b.n	80016bc <HAL_RCC_OscConfig+0x2d4>
 800166e:	bf00      	nop
 8001670:	58024400 	.word	0x58024400
 8001674:	4b9a      	ldr	r3, [pc, #616]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	061b      	lsls	r3, r3, #24
 8001682:	4997      	ldr	r1, [pc, #604]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
 8001688:	e018      	b.n	80016bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168a:	4b95      	ldr	r3, [pc, #596]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a94      	ldr	r2, [pc, #592]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fb35 	bl	8000d04 <HAL_GetTick>
 800169a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fb31 	bl	8000d04 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e2c2      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016b0:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a9 	beq.w	800181c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4b85      	ldr	r3, [pc, #532]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016d4:	4b82      	ldr	r3, [pc, #520]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d007      	beq.n	80016f0 <HAL_RCC_OscConfig+0x308>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b18      	cmp	r3, #24
 80016e4:	d13a      	bne.n	800175c <HAL_RCC_OscConfig+0x374>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d135      	bne.n	800175c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016f0:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x320>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b80      	cmp	r3, #128	; 0x80
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e296      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001708:	f7ff fb2c 	bl	8000d64 <HAL_GetREVID>
 800170c:	4603      	mov	r3, r0
 800170e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001712:	4293      	cmp	r3, r2
 8001714:	d817      	bhi.n	8001746 <HAL_RCC_OscConfig+0x35e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	2b20      	cmp	r3, #32
 800171c:	d108      	bne.n	8001730 <HAL_RCC_OscConfig+0x348>
 800171e:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001726:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800172c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800172e:	e075      	b.n	800181c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	069b      	lsls	r3, r3, #26
 800173e:	4968      	ldr	r1, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001744:	e06a      	b.n	800181c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001746:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	061b      	lsls	r3, r3, #24
 8001754:	4962      	ldr	r1, [pc, #392]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001756:	4313      	orrs	r3, r2
 8001758:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800175a:	e05f      	b.n	800181c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d042      	beq.n	80017ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5d      	ldr	r2, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 800176a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fac8 	bl	8000d04 <HAL_GetTick>
 8001774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001778:	f7ff fac4 	bl	8000d04 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e255      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800178a:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001796:	f7ff fae5 	bl	8000d64 <HAL_GetREVID>
 800179a:	4603      	mov	r3, r0
 800179c:	f241 0203 	movw	r2, #4099	; 0x1003
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d817      	bhi.n	80017d4 <HAL_RCC_OscConfig+0x3ec>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d108      	bne.n	80017be <HAL_RCC_OscConfig+0x3d6>
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017b4:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017ba:	6053      	str	r3, [r2, #4]
 80017bc:	e02e      	b.n	800181c <HAL_RCC_OscConfig+0x434>
 80017be:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	069b      	lsls	r3, r3, #26
 80017cc:	4944      	ldr	r1, [pc, #272]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
 80017d2:	e023      	b.n	800181c <HAL_RCC_OscConfig+0x434>
 80017d4:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	061b      	lsls	r3, r3, #24
 80017e2:	493f      	ldr	r1, [pc, #252]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60cb      	str	r3, [r1, #12]
 80017e8:	e018      	b.n	800181c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a3c      	ldr	r2, [pc, #240]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80017f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff fa85 	bl	8000d04 <HAL_GetTick>
 80017fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017fe:	f7ff fa81 	bl	8000d04 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e212      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d036      	beq.n	8001896 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d019      	beq.n	8001864 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001834:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7ff fa62 	bl	8000d04 <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff fa5e 	bl	8000d04 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1ef      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x45c>
 8001862:	e018      	b.n	8001896 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 8001866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fa48 	bl	8000d04 <HAL_GetTick>
 8001874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff fa44 	bl	8000d04 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1d5      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 800188c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d039      	beq.n	8001916 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fa25 	bl	8000d04 <HAL_GetTick>
 80018ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018be:	f7ff fa21 	bl	8000d04 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e1b2      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x4d6>
 80018dc:	e01b      	b.n	8001916 <HAL_RCC_OscConfig+0x52e>
 80018de:	bf00      	nop
 80018e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018e4:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a9a      	ldr	r2, [pc, #616]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80018ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fa08 	bl	8000d04 <HAL_GetTick>
 80018f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018f8:	f7ff fa04 	bl	8000d04 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e195      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800190a:	4b92      	ldr	r3, [pc, #584]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8081 	beq.w	8001a26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001924:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <HAL_RCC_OscConfig+0x770>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a8b      	ldr	r2, [pc, #556]	; (8001b58 <HAL_RCC_OscConfig+0x770>)
 800192a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001930:	f7ff f9e8 	bl	8000d04 <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001938:	f7ff f9e4 	bl	8000d04 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e175      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800194a:	4b83      	ldr	r3, [pc, #524]	; (8001b58 <HAL_RCC_OscConfig+0x770>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d106      	bne.n	800196c <HAL_RCC_OscConfig+0x584>
 800195e:	4b7d      	ldr	r3, [pc, #500]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a7c      	ldr	r2, [pc, #496]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	e02d      	b.n	80019c8 <HAL_RCC_OscConfig+0x5e0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10c      	bne.n	800198e <HAL_RCC_OscConfig+0x5a6>
 8001974:	4b77      	ldr	r3, [pc, #476]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a76      	ldr	r2, [pc, #472]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	4b74      	ldr	r3, [pc, #464]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a73      	ldr	r2, [pc, #460]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001986:	f023 0304 	bic.w	r3, r3, #4
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x5e0>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x5c8>
 8001996:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a6e      	ldr	r2, [pc, #440]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	4b6c      	ldr	r3, [pc, #432]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a6b      	ldr	r2, [pc, #428]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x5e0>
 80019b0:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a67      	ldr	r2, [pc, #412]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
 80019bc:	4b65      	ldr	r3, [pc, #404]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a64      	ldr	r2, [pc, #400]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80019c2:	f023 0304 	bic.w	r3, r3, #4
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d015      	beq.n	80019fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f998 	bl	8000d04 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff f994 	bl	8000d04 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e123      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019ee:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0ee      	beq.n	80019d8 <HAL_RCC_OscConfig+0x5f0>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f982 	bl	8000d04 <HAL_GetTick>
 8001a00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff f97e 	bl	8000d04 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e10d      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a1a:	4b4e      	ldr	r3, [pc, #312]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ee      	bne.n	8001a04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8102 	beq.w	8001c34 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a30:	4b48      	ldr	r3, [pc, #288]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a38:	2b18      	cmp	r3, #24
 8001a3a:	f000 80bd 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	f040 809e 	bne.w	8001b84 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a41      	ldr	r2, [pc, #260]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff f956 	bl	8000d04 <HAL_GetTick>
 8001a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f952 	bl	8000d04 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0e3      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a6e:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_RCC_OscConfig+0x774>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	4931      	ldr	r1, [pc, #196]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	628b      	str	r3, [r1, #40]	; 0x28
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abc:	3b01      	subs	r3, #1
 8001abe:	061b      	lsls	r3, r3, #24
 8001ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ac4:	4923      	ldr	r1, [pc, #140]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ada:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_RCC_OscConfig+0x778>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ae2:	00d2      	lsls	r2, r2, #3
 8001ae4:	491b      	ldr	r1, [pc, #108]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	f023 020c 	bic.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4917      	ldr	r1, [pc, #92]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	f023 0202 	bic.w	r2, r3, #2
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	4912      	ldr	r1, [pc, #72]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_RCC_OscConfig+0x76c>)
 8001b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f8db 	bl	8000d04 <HAL_GetTick>
 8001b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b50:	e011      	b.n	8001b76 <HAL_RCC_OscConfig+0x78e>
 8001b52:	bf00      	nop
 8001b54:	58024400 	.word	0x58024400
 8001b58:	58024800 	.word	0x58024800
 8001b5c:	fffffc0c 	.word	0xfffffc0c
 8001b60:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f8ce 	bl	8000d04 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e05f      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_RCC_OscConfig+0x858>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x77c>
 8001b82:	e057      	b.n	8001c34 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_RCC_OscConfig+0x858>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2d      	ldr	r2, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x858>)
 8001b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff f8b8 	bl	8000d04 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f8b4 	bl	8000d04 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e045      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_RCC_OscConfig+0x858>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x7b0>
 8001bb6:	e03d      	b.n	8001c34 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x858>)
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_RCC_OscConfig+0x858>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d031      	beq.n	8001c30 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f003 0203 	and.w	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d12a      	bne.n	8001c30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d122      	bne.n	8001c30 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d11a      	bne.n	8001c30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	0a5b      	lsrs	r3, r3, #9
 8001bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d111      	bne.n	8001c30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d108      	bne.n	8001c30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	0e1b      	lsrs	r3, r3, #24
 8001c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3730      	adds	r7, #48	; 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	58024400 	.word	0x58024400

08001c44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e19c      	b.n	8001f92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b8a      	ldr	r3, [pc, #552]	; (8001e84 <HAL_RCC_ClockConfig+0x240>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d910      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b87      	ldr	r3, [pc, #540]	; (8001e84 <HAL_RCC_ClockConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 020f 	bic.w	r2, r3, #15
 8001c6e:	4985      	ldr	r1, [pc, #532]	; (8001e84 <HAL_RCC_ClockConfig+0x240>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b83      	ldr	r3, [pc, #524]	; (8001e84 <HAL_RCC_ClockConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e184      	b.n	8001f92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d908      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ca4:	4b78      	ldr	r3, [pc, #480]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4975      	ldr	r1, [pc, #468]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d010      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d908      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	496a      	ldr	r1, [pc, #424]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d908      	bls.n	8001d12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	495e      	ldr	r1, [pc, #376]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d010      	beq.n	8001d40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d2e:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4953      	ldr	r1, [pc, #332]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4b4d      	ldr	r3, [pc, #308]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d908      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f023 020f 	bic.w	r2, r3, #15
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4947      	ldr	r1, [pc, #284]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d055      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d7a:	4b43      	ldr	r3, [pc, #268]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4940      	ldr	r1, [pc, #256]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d94:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d121      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0f6      	b.n	8001f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d115      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0ea      	b.n	8001f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc4:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0de      	b.n	8001f92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0d6      	b.n	8001f92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f023 0207 	bic.w	r2, r3, #7
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4925      	ldr	r1, [pc, #148]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7fe ff85 	bl	8000d04 <HAL_GetTick>
 8001dfa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7fe ff81 	bl	8000d04 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0be      	b.n	8001f92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d1eb      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d208      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f023 020f 	bic.w	r2, r3, #15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_RCC_ClockConfig+0x244>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_ClockConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d214      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_RCC_ClockConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 020f 	bic.w	r2, r3, #15
 8001e6a:	4906      	ldr	r1, [pc, #24]	; (8001e84 <HAL_RCC_ClockConfig+0x240>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_RCC_ClockConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e086      	b.n	8001f92 <HAL_RCC_ClockConfig+0x34e>
 8001e84:	52002000 	.word	0x52002000
 8001e88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d208      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ea8:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	4939      	ldr	r1, [pc, #228]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d208      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	492e      	ldr	r1, [pc, #184]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d208      	bcs.n	8001f16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4922      	ldr	r1, [pc, #136]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d010      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d208      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4917      	ldr	r1, [pc, #92]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f44:	f000 f834 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	4912      	ldr	r1, [pc, #72]	; (8001fa0 <HAL_RCC_ClockConfig+0x35c>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_RCC_ClockConfig+0x358>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_RCC_ClockConfig+0x35c>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x360>)
 8001f7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x364>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x368>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fe72 	bl	8000c70 <HAL_InitTick>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	08004e50 	.word	0x08004e50
 8001fa4:	24000004 	.word	0x24000004
 8001fa8:	24000000 	.word	0x24000000
 8001fac:	24000008 	.word	0x24000008

08001fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb6:	4bb3      	ldr	r3, [pc, #716]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fbe:	2b18      	cmp	r3, #24
 8001fc0:	f200 8155 	bhi.w	800226e <HAL_RCC_GetSysClockFreq+0x2be>
 8001fc4:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08002031 	.word	0x08002031
 8001fd0:	0800226f 	.word	0x0800226f
 8001fd4:	0800226f 	.word	0x0800226f
 8001fd8:	0800226f 	.word	0x0800226f
 8001fdc:	0800226f 	.word	0x0800226f
 8001fe0:	0800226f 	.word	0x0800226f
 8001fe4:	0800226f 	.word	0x0800226f
 8001fe8:	0800226f 	.word	0x0800226f
 8001fec:	08002057 	.word	0x08002057
 8001ff0:	0800226f 	.word	0x0800226f
 8001ff4:	0800226f 	.word	0x0800226f
 8001ff8:	0800226f 	.word	0x0800226f
 8001ffc:	0800226f 	.word	0x0800226f
 8002000:	0800226f 	.word	0x0800226f
 8002004:	0800226f 	.word	0x0800226f
 8002008:	0800226f 	.word	0x0800226f
 800200c:	0800205d 	.word	0x0800205d
 8002010:	0800226f 	.word	0x0800226f
 8002014:	0800226f 	.word	0x0800226f
 8002018:	0800226f 	.word	0x0800226f
 800201c:	0800226f 	.word	0x0800226f
 8002020:	0800226f 	.word	0x0800226f
 8002024:	0800226f 	.word	0x0800226f
 8002028:	0800226f 	.word	0x0800226f
 800202c:	08002063 	.word	0x08002063
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002030:	4b94      	ldr	r3, [pc, #592]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800203c:	4b91      	ldr	r3, [pc, #580]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	08db      	lsrs	r3, r3, #3
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	4a90      	ldr	r2, [pc, #576]	; (8002288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800204e:	e111      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002050:	4b8d      	ldr	r3, [pc, #564]	; (8002288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002052:	61bb      	str	r3, [r7, #24]
    break;
 8002054:	e10e      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002056:	4b8d      	ldr	r3, [pc, #564]	; (800228c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002058:	61bb      	str	r3, [r7, #24]
    break;
 800205a:	e10b      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800205c:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800205e:	61bb      	str	r3, [r7, #24]
    break;
 8002060:	e108      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002062:	4b88      	ldr	r3, [pc, #544]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800206c:	4b85      	ldr	r3, [pc, #532]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002076:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002078:	4b82      	ldr	r3, [pc, #520]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002082:	4b80      	ldr	r3, [pc, #512]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	08db      	lsrs	r3, r3, #3
 8002088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80e1 	beq.w	8002268 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f000 8083 	beq.w	80021b4 <HAL_RCC_GetSysClockFreq+0x204>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	f200 80a1 	bhi.w	80021f8 <HAL_RCC_GetSysClockFreq+0x248>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x114>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d056      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020c2:	e099      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020c4:	4b6f      	ldr	r3, [pc, #444]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d02d      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80020d0:	4b6c      	ldr	r3, [pc, #432]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	4a6b      	ldr	r2, [pc, #428]	; (8002288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
 80020e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020fa:	4b62      	ldr	r3, [pc, #392]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800210a:	ed97 6a02 	vldr	s12, [r7, #8]
 800210e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800211a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800211e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800212a:	e087      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002136:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002298 <HAL_RCC_GetSysClockFreq+0x2e8>
 800213a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800213e:	4b51      	ldr	r3, [pc, #324]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800214e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002152:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800215a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800215e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800216e:	e065      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800229c <HAL_RCC_GetSysClockFreq+0x2ec>
 800217e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002182:	4b40      	ldr	r3, [pc, #256]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002192:	ed97 6a02 	vldr	s12, [r7, #8]
 8002196:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800219a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800219e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021b2:	e043      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002294 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021f6:	e021      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002202:	eddf 6a26 	vldr	s13, [pc, #152]	; 800229c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800221a:	ed97 6a02 	vldr	s12, [r7, #8]
 800221e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002294 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800222a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800222e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800223a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	0a5b      	lsrs	r3, r3, #9
 8002242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002246:	3301      	adds	r3, #1
 8002248:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002254:	edd7 6a07 	vldr	s13, [r7, #28]
 8002258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002260:	ee17 3a90 	vmov	r3, s15
 8002264:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002266:	e005      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
    break;
 800226c:	e002      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002270:	61bb      	str	r3, [r7, #24]
    break;
 8002272:	bf00      	nop
  }

  return sysclockfreq;
 8002274:	69bb      	ldr	r3, [r7, #24]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	58024400 	.word	0x58024400
 8002288:	03d09000 	.word	0x03d09000
 800228c:	003d0900 	.word	0x003d0900
 8002290:	007a1200 	.word	0x007a1200
 8002294:	46000000 	.word	0x46000000
 8002298:	4c742400 	.word	0x4c742400
 800229c:	4a742400 	.word	0x4a742400
 80022a0:	4af42400 	.word	0x4af42400

080022a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80022aa:	f7ff fe81 	bl	8001fb0 <HAL_RCC_GetSysClockFreq>
 80022ae:	4602      	mov	r2, r0
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	490f      	ldr	r1, [pc, #60]	; (80022f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80022bc:	5ccb      	ldrb	r3, [r1, r3]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_RCC_GetHCLKFreq+0x58>)
 80022e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022e2:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_RCC_GetHCLKFreq+0x58>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	58024400 	.word	0x58024400
 80022f8:	08004e50 	.word	0x08004e50
 80022fc:	24000004 	.word	0x24000004
 8002300:	24000000 	.word	0x24000000

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002308:	f7ff ffcc 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x28>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	58024400 	.word	0x58024400
 800232c:	08004e50 	.word	0x08004e50

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002334:	f7ff ffb6 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	58024400 	.word	0x58024400
 8002358:	08004e50 	.word	0x08004e50

0800235c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002364:	2300      	movs	r3, #0
 8002366:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002368:	2300      	movs	r3, #0
 800236a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d03f      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002380:	d02a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002386:	d824      	bhi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800238c:	d018      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800238e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002392:	d81e      	bhi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800239c:	d007      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800239e:	e018      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a0:	4ba3      	ldr	r3, [pc, #652]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	4aa2      	ldr	r2, [pc, #648]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80023ac:	e015      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f001 f9d5 	bl	8003764 <RCCEx_PLL2_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80023be:	e00c      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3324      	adds	r3, #36	; 0x24
 80023c4:	2102      	movs	r1, #2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 fa7e 	bl	80038c8 <RCCEx_PLL3_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80023d0:	e003      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
      break;
 80023d6:	e000      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023e0:	4b93      	ldr	r3, [pc, #588]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ec:	4990      	ldr	r1, [pc, #576]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	650b      	str	r3, [r1, #80]	; 0x50
 80023f2:	e001      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03d      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	2b04      	cmp	r3, #4
 800240a:	d826      	bhi.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002429 	.word	0x08002429
 8002418:	08002437 	.word	0x08002437
 800241c:	08002449 	.word	0x08002449
 8002420:	08002461 	.word	0x08002461
 8002424:	08002461 	.word	0x08002461
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002428:	4b81      	ldr	r3, [pc, #516]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	4a80      	ldr	r2, [pc, #512]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800242e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002434:	e015      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3304      	adds	r3, #4
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f001 f991 	bl	8003764 <RCCEx_PLL2_Config>
 8002442:	4603      	mov	r3, r0
 8002444:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002446:	e00c      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3324      	adds	r3, #36	; 0x24
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fa3a 	bl	80038c8 <RCCEx_PLL3_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002458:	e003      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
      break;
 800245e:	e000      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002468:	4b71      	ldr	r3, [pc, #452]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800246a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246c:	f023 0207 	bic.w	r2, r3, #7
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	496e      	ldr	r1, [pc, #440]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	650b      	str	r3, [r1, #80]	; 0x50
 800247a:	e001      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002488:	2b00      	cmp	r3, #0
 800248a:	d042      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002494:	d02b      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249a:	d825      	bhi.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800249c:	2bc0      	cmp	r3, #192	; 0xc0
 800249e:	d028      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80024a0:	2bc0      	cmp	r3, #192	; 0xc0
 80024a2:	d821      	bhi.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80024a4:	2b80      	cmp	r3, #128	; 0x80
 80024a6:	d016      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80024a8:	2b80      	cmp	r3, #128	; 0x80
 80024aa:	d81d      	bhi.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d007      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80024b4:	e018      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024b6:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	4a5d      	ldr	r2, [pc, #372]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024c2:	e017      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 f94a 	bl	8003764 <RCCEx_PLL2_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024d4:	e00e      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3324      	adds	r3, #36	; 0x24
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 f9f3 	bl	80038c8 <RCCEx_PLL3_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80024e6:	e005      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	75fb      	strb	r3, [r7, #23]
      break;
 80024ec:	e002      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80024f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024fa:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	494a      	ldr	r1, [pc, #296]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	650b      	str	r3, [r1, #80]	; 0x50
 800250c:	e001      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d049      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002528:	d030      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800252a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800252e:	d82a      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002530:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002534:	d02c      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002536:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800253a:	d824      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800253c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002540:	d018      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d81e      	bhi.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800254c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002550:	d007      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002552:	e018      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	4a35      	ldr	r2, [pc, #212]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800255a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002560:	e017      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f001 f8fb 	bl	8003764 <RCCEx_PLL2_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002572:	e00e      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3324      	adds	r3, #36	; 0x24
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f001 f9a4 	bl	80038c8 <RCCEx_PLL3_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002584:	e005      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
      break;
 800258a:	e002      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800258c:	bf00      	nop
 800258e:	e000      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025a6:	4922      	ldr	r1, [pc, #136]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	658b      	str	r3, [r1, #88]	; 0x58
 80025ac:	e001      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d04b      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80025c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c8:	d030      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80025ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ce:	d82a      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025d4:	d02e      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80025d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025da:	d824      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e0:	d018      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80025e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e6:	d81e      	bhi.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d007      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80025f2:	e018      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002600:	e019      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f001 f8ab 	bl	8003764 <RCCEx_PLL2_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002612:	e010      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3324      	adds	r3, #36	; 0x24
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f001 f954 	bl	80038c8 <RCCEx_PLL3_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002624:	e007      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
      break;
 800262a:	e004      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800262c:	bf00      	nop
 800262e:	e002      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002630:	58024400 	.word	0x58024400
      break;
 8002634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800263c:	4b99      	ldr	r3, [pc, #612]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800264a:	4996      	ldr	r1, [pc, #600]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800264c:	4313      	orrs	r3, r2
 800264e:	658b      	str	r3, [r1, #88]	; 0x58
 8002650:	e001      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d032      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002666:	2b30      	cmp	r3, #48	; 0x30
 8002668:	d01c      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800266a:	2b30      	cmp	r3, #48	; 0x30
 800266c:	d817      	bhi.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800266e:	2b20      	cmp	r3, #32
 8002670:	d00c      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002672:	2b20      	cmp	r3, #32
 8002674:	d813      	bhi.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800267a:	2b10      	cmp	r3, #16
 800267c:	d10f      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800267e:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	4a88      	ldr	r2, [pc, #544]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002688:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800268a:	e00e      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	2102      	movs	r1, #2
 8002692:	4618      	mov	r0, r3
 8002694:	f001 f866 	bl	8003764 <RCCEx_PLL2_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800269c:	e005      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
      break;
 80026a2:	e002      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80026a4:	bf00      	nop
 80026a6:	e000      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80026a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80026b0:	4b7c      	ldr	r3, [pc, #496]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	4979      	ldr	r1, [pc, #484]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80026c2:	e001      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d047      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026dc:	d030      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e2:	d82a      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026e8:	d02c      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80026ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026ee:	d824      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f4:	d018      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fa:	d81e      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d007      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002706:	e018      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002708:	4b66      	ldr	r3, [pc, #408]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	4a65      	ldr	r2, [pc, #404]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800270e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002714:	e017      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f001 f821 	bl	8003764 <RCCEx_PLL2_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002726:	e00e      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3324      	adds	r3, #36	; 0x24
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f8ca 	bl	80038c8 <RCCEx_PLL3_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002738:	e005      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002740:	bf00      	nop
 8002742:	e000      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002746:	7dfb      	ldrb	r3, [r7, #23]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800274c:	4b55      	ldr	r3, [pc, #340]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800274e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002750:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	4952      	ldr	r1, [pc, #328]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800275a:	4313      	orrs	r3, r2
 800275c:	650b      	str	r3, [r1, #80]	; 0x50
 800275e:	e001      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d049      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002778:	d02e      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800277a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800277e:	d828      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002780:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002784:	d02a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002786:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800278a:	d822      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800278c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002790:	d026      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002792:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002796:	d81c      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800279c:	d010      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800279e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027a2:	d816      	bhi.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01d      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d111      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 ffd5 	bl	8003764 <RCCEx_PLL2_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027be:	e012      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3324      	adds	r3, #36	; 0x24
 80027c4:	2101      	movs	r1, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 f87e 	bl	80038c8 <RCCEx_PLL3_Config>
 80027cc:	4603      	mov	r3, r0
 80027ce:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027d0:	e009      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
      break;
 80027d6:	e006      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027d8:	bf00      	nop
 80027da:	e004      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027dc:	bf00      	nop
 80027de:	e002      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027e0:	bf00      	nop
 80027e2:	e000      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80027e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f8:	492a      	ldr	r1, [pc, #168]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	650b      	str	r3, [r1, #80]	; 0x50
 80027fe:	e001      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d04d      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800281a:	d02e      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800281c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002820:	d828      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d02a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282c:	d822      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800282e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002832:	d026      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002834:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002838:	d81c      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800283a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800283e:	d010      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002844:	d816      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01d      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800284a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800284e:	d111      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f000 ff84 	bl	8003764 <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002860:	e012      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3324      	adds	r3, #36	; 0x24
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f82d 	bl	80038c8 <RCCEx_PLL3_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002872:	e009      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	75fb      	strb	r3, [r7, #23]
      break;
 8002878:	e006      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800287a:	bf00      	nop
 800287c:	e004      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800287e:	bf00      	nop
 8002880:	e002      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800289c:	4901      	ldr	r1, [pc, #4]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	658b      	str	r3, [r1, #88]	; 0x58
 80028a2:	e003      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x550>
 80028a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c0:	d00e      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80028c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c6:	d814      	bhi.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80028cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d0:	d10f      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d2:	4baf      	ldr	r3, [pc, #700]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	4aae      	ldr	r2, [pc, #696]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028de:	e00c      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	2101      	movs	r1, #1
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 ff3c 	bl	8003764 <RCCEx_PLL2_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028f0:	e003      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
      break;
 80028f6:	e000      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80028f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d109      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002900:	4ba3      	ldr	r3, [pc, #652]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290c:	49a0      	ldr	r1, [pc, #640]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800290e:	4313      	orrs	r3, r2
 8002910:	650b      	str	r3, [r1, #80]	; 0x50
 8002912:	e001      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d032      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	2b03      	cmp	r3, #3
 800292a:	d81b      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	0800296b 	.word	0x0800296b
 8002938:	08002945 	.word	0x08002945
 800293c:	08002953 	.word	0x08002953
 8002940:	0800296b 	.word	0x0800296b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002944:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	4a91      	ldr	r2, [pc, #580]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800294a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002950:	e00c      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	2102      	movs	r1, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f000 ff03 	bl	8003764 <RCCEx_PLL2_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002962:	e003      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]
      break;
 8002968:	e000      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800296a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002972:	4b87      	ldr	r3, [pc, #540]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4984      	ldr	r1, [pc, #528]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002980:	4313      	orrs	r3, r2
 8002982:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002984:	e001      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8086 	beq.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002998:	4b7e      	ldr	r3, [pc, #504]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a7d      	ldr	r2, [pc, #500]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029a4:	f7fe f9ae 	bl	8000d04 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029aa:	e009      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ac:	f7fe f9aa 	bl	8000d04 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d902      	bls.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	75fb      	strb	r3, [r7, #23]
        break;
 80029be:	e005      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c0:	4b74      	ldr	r3, [pc, #464]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ef      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d166      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029d2:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029dc:	4053      	eors	r3, r2
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e6:	4b6a      	ldr	r3, [pc, #424]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f0:	4b67      	ldr	r3, [pc, #412]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a66      	ldr	r2, [pc, #408]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029fc:	4b64      	ldr	r3, [pc, #400]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a63      	ldr	r2, [pc, #396]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002a08:	4a61      	ldr	r2, [pc, #388]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a18:	d115      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f973 	bl	8000d04 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a20:	e00b      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe f96f 	bl	8000d04 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d902      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	75fb      	strb	r3, [r7, #23]
            break;
 8002a38:	e005      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a3a:	4b55      	ldr	r3, [pc, #340]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0ed      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d126      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002a5c:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a6a:	0919      	lsrs	r1, r3, #4
 8002a6c:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002a6e:	400b      	ands	r3, r1
 8002a70:	4947      	ldr	r1, [pc, #284]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	610b      	str	r3, [r1, #16]
 8002a76:	e005      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002a78:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4a44      	ldr	r2, [pc, #272]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a82:	6113      	str	r3, [r2, #16]
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	493f      	ldr	r1, [pc, #252]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	670b      	str	r3, [r1, #112]	; 0x70
 8002a98:	e004      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	75bb      	strb	r3, [r7, #22]
 8002a9e:	e001      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8085 	beq.w	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab6:	2b28      	cmp	r3, #40	; 0x28
 8002ab8:	d866      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002aba:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac0:	08002b9d 	.word	0x08002b9d
 8002ac4:	08002b89 	.word	0x08002b89
 8002ac8:	08002b89 	.word	0x08002b89
 8002acc:	08002b89 	.word	0x08002b89
 8002ad0:	08002b89 	.word	0x08002b89
 8002ad4:	08002b89 	.word	0x08002b89
 8002ad8:	08002b89 	.word	0x08002b89
 8002adc:	08002b89 	.word	0x08002b89
 8002ae0:	08002b65 	.word	0x08002b65
 8002ae4:	08002b89 	.word	0x08002b89
 8002ae8:	08002b89 	.word	0x08002b89
 8002aec:	08002b89 	.word	0x08002b89
 8002af0:	08002b89 	.word	0x08002b89
 8002af4:	08002b89 	.word	0x08002b89
 8002af8:	08002b89 	.word	0x08002b89
 8002afc:	08002b89 	.word	0x08002b89
 8002b00:	08002b77 	.word	0x08002b77
 8002b04:	08002b89 	.word	0x08002b89
 8002b08:	08002b89 	.word	0x08002b89
 8002b0c:	08002b89 	.word	0x08002b89
 8002b10:	08002b89 	.word	0x08002b89
 8002b14:	08002b89 	.word	0x08002b89
 8002b18:	08002b89 	.word	0x08002b89
 8002b1c:	08002b89 	.word	0x08002b89
 8002b20:	08002b9d 	.word	0x08002b9d
 8002b24:	08002b89 	.word	0x08002b89
 8002b28:	08002b89 	.word	0x08002b89
 8002b2c:	08002b89 	.word	0x08002b89
 8002b30:	08002b89 	.word	0x08002b89
 8002b34:	08002b89 	.word	0x08002b89
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002b89 	.word	0x08002b89
 8002b40:	08002b9d 	.word	0x08002b9d
 8002b44:	08002b89 	.word	0x08002b89
 8002b48:	08002b89 	.word	0x08002b89
 8002b4c:	08002b89 	.word	0x08002b89
 8002b50:	08002b89 	.word	0x08002b89
 8002b54:	08002b89 	.word	0x08002b89
 8002b58:	08002b89 	.word	0x08002b89
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002b9d 	.word	0x08002b9d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fdfa 	bl	8003764 <RCCEx_PLL2_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b74:	e013      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3324      	adds	r3, #36	; 0x24
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fea3 	bl	80038c8 <RCCEx_PLL3_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b86:	e00a      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b8c:	e007      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b8e:	bf00      	nop
 8002b90:	58024400 	.word	0x58024400
 8002b94:	58024800 	.word	0x58024800
 8002b98:	00ffffcf 	.word	0x00ffffcf
      break;
 8002b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ba4:	4b96      	ldr	r3, [pc, #600]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb0:	4993      	ldr	r1, [pc, #588]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	654b      	str	r3, [r1, #84]	; 0x54
 8002bb6:	e001      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d038      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d821      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002c1b 	.word	0x08002c1b
 8002bdc:	08002bf1 	.word	0x08002bf1
 8002be0:	08002c03 	.word	0x08002c03
 8002be4:	08002c1b 	.word	0x08002c1b
 8002be8:	08002c1b 	.word	0x08002c1b
 8002bec:	08002c1b 	.word	0x08002c1b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fdb4 	bl	8003764 <RCCEx_PLL2_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c00:	e00c      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3324      	adds	r3, #36	; 0x24
 8002c06:	2101      	movs	r1, #1
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fe5d 	bl	80038c8 <RCCEx_PLL3_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c12:	e003      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	75fb      	strb	r3, [r7, #23]
      break;
 8002c18:	e000      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c22:	4b77      	ldr	r3, [pc, #476]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	f023 0207 	bic.w	r2, r3, #7
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	4974      	ldr	r1, [pc, #464]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	654b      	str	r3, [r1, #84]	; 0x54
 8002c34:	e001      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d03a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d821      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c9b 	.word	0x08002c9b
 8002c5c:	08002c71 	.word	0x08002c71
 8002c60:	08002c83 	.word	0x08002c83
 8002c64:	08002c9b 	.word	0x08002c9b
 8002c68:	08002c9b 	.word	0x08002c9b
 8002c6c:	08002c9b 	.word	0x08002c9b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fd74 	bl	8003764 <RCCEx_PLL2_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c80:	e00c      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3324      	adds	r3, #36	; 0x24
 8002c86:	2101      	movs	r1, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fe1d 	bl	80038c8 <RCCEx_PLL3_Config>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c92:	e003      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	75fb      	strb	r3, [r7, #23]
      break;
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ca2:	4b57      	ldr	r3, [pc, #348]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	4953      	ldr	r1, [pc, #332]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8002cb6:	e001      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d04b      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd2:	d02e      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd8:	d828      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cde:	d02a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d822      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002ce6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cea:	d026      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002cec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cf0:	d81c      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cfc:	d816      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01d      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d06:	d111      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fd28 	bl	8003764 <RCCEx_PLL2_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d18:	e012      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3324      	adds	r3, #36	; 0x24
 8002d1e:	2102      	movs	r1, #2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fdd1 	bl	80038c8 <RCCEx_PLL3_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d2a:	e009      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d32:	bf00      	nop
 8002d34:	e004      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d46:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d54:	492a      	ldr	r1, [pc, #168]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	654b      	str	r3, [r1, #84]	; 0x54
 8002d5a:	e001      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d04d      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d76:	d02e      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002d78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d7c:	d828      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	d02a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d822      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d8e:	d026      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002d90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d94:	d81c      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9a:	d010      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da0:	d816      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01d      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002daa:	d111      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fcd6 	bl	8003764 <RCCEx_PLL2_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002dbc:	e012      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3324      	adds	r3, #36	; 0x24
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fd7f 	bl	80038c8 <RCCEx_PLL3_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002dce:	e009      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e004      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df8:	4901      	ldr	r1, [pc, #4]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8002dfe:	e003      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d04b      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e1e:	d02e      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002e20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e24:	d828      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2a:	d02a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	d822      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e36:	d026      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002e38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e3c:	d81c      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e42:	d010      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e48:	d816      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01d      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e52:	d111      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fc82 	bl	8003764 <RCCEx_PLL2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e64:	e012      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3324      	adds	r3, #36	; 0x24
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fd2b 	bl	80038c8 <RCCEx_PLL3_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e76:	e009      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7c:	e006      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e004      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e82:	bf00      	nop
 8002e84:	e002      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e92:	4b9d      	ldr	r3, [pc, #628]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea0:	4999      	ldr	r1, [pc, #612]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	658b      	str	r3, [r1, #88]	; 0x58
 8002ea6:	e001      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	d10a      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3324      	adds	r3, #36	; 0x24
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fcfc 	bl	80038c8 <RCCEx_PLL3_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002eda:	4b8b      	ldr	r3, [pc, #556]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee8:	4987      	ldr	r1, [pc, #540]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f04:	d10a      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3324      	adds	r3, #36	; 0x24
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fcdb 	bl	80038c8 <RCCEx_PLL3_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f1c:	4b7a      	ldr	r3, [pc, #488]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	4977      	ldr	r1, [pc, #476]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d034      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f46:	d01d      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f4c:	d817      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d009      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002f58:	e011      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fbff 	bl	8003764 <RCCEx_PLL2_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f6a:	e00c      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3324      	adds	r3, #36	; 0x24
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fca8 	bl	80038c8 <RCCEx_PLL3_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f7c:	e003      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
      break;
 8002f82:	e000      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f8c:	4b5e      	ldr	r3, [pc, #376]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f9a:	495b      	ldr	r1, [pc, #364]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	658b      	str	r3, [r1, #88]	; 0x58
 8002fa0:	e001      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d033      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fbc:	d01c      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002fbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fc2:	d816      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002fca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fce:	d007      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002fd0:	e00f      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd2:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	4a4c      	ldr	r2, [pc, #304]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fde:	e00c      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3324      	adds	r3, #36	; 0x24
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fc6e 	bl	80038c8 <RCCEx_PLL3_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ff0:	e003      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003000:	4b41      	ldr	r3, [pc, #260]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300e:	493e      	ldr	r1, [pc, #248]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003010:	4313      	orrs	r3, r2
 8003012:	654b      	str	r3, [r1, #84]	; 0x54
 8003014:	e001      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d029      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d007      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003034:	e00f      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	4a33      	ldr	r2, [pc, #204]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003042:	e00b      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	2102      	movs	r1, #2
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fb8a 	bl	8003764 <RCCEx_PLL2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003054:	e002      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
      break;
 800305a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003062:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306e:	4926      	ldr	r1, [pc, #152]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003070:	4313      	orrs	r3, r2
 8003072:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003074:	e001      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003076:	7dfb      	ldrb	r3, [r7, #23]
 8003078:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3324      	adds	r3, #36	; 0x24
 800308a:	2102      	movs	r1, #2
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fc1b 	bl	80038c8 <RCCEx_PLL3_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d033      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b0:	d017      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80030b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b6:	d811      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d013      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80030be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c2:	d80b      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80030c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030cc:	d106      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80030da:	e007      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	75fb      	strb	r3, [r7, #23]
      break;
 80030e0:	e004      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80030ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030fe:	4902      	ldr	r1, [pc, #8]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003100:	4313      	orrs	r3, r2
 8003102:	654b      	str	r3, [r1, #84]	; 0x54
 8003104:	e004      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003106:	bf00      	nop
 8003108:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	7dfb      	ldrb	r3, [r7, #23]
 800310e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800311e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003120:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	492e      	ldr	r1, [pc, #184]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800312a:	4313      	orrs	r3, r2
 800312c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003148:	4926      	ldr	r1, [pc, #152]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800314a:	4313      	orrs	r3, r2
 800314c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800315c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003166:	491f      	ldr	r1, [pc, #124]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003168:	4313      	orrs	r3, r2
 800316a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800317e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003182:	6113      	str	r3, [r2, #16]
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800318e:	4915      	ldr	r1, [pc, #84]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003190:	4313      	orrs	r3, r2
 8003192:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	da08      	bge.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800319e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	4906      	ldr	r1, [pc, #24]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80031ce:	7dbb      	ldrb	r3, [r7, #22]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400

080031e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80031ec:	f7ff f85a 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4904      	ldr	r1, [pc, #16]	; (8003210 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	58024400 	.word	0x58024400
 8003210:	08004e50 	.word	0x08004e50

08003214 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800321c:	4ba1      	ldr	r3, [pc, #644]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003226:	4b9f      	ldr	r3, [pc, #636]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	0b1b      	lsrs	r3, r3, #12
 800322c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003230:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003232:	4b9c      	ldr	r3, [pc, #624]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800323e:	4b99      	ldr	r3, [pc, #612]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8111 	beq.w	8003484 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b02      	cmp	r3, #2
 8003266:	f000 8083 	beq.w	8003370 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b02      	cmp	r3, #2
 800326e:	f200 80a1 	bhi.w	80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d056      	beq.n	800332c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800327e:	e099      	b.n	80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003280:	4b88      	ldr	r3, [pc, #544]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02d      	beq.n	80032e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800328c:	4b85      	ldr	r3, [pc, #532]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	4a84      	ldr	r2, [pc, #528]	; (80034a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b6:	4b7b      	ldr	r3, [pc, #492]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80032ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80034ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80032e6:	e087      	b.n	80033f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80032f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fa:	4b6a      	ldr	r3, [pc, #424]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330a:	ed97 6a03 	vldr	s12, [r7, #12]
 800330e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80034ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800331a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800332a:	e065      	b.n	80033f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003336:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800333a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333e:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003352:	eddf 5a56 	vldr	s11, [pc, #344]	; 80034ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800336e:	e043      	b.n	80033f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80034b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800337e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003382:	4b48      	ldr	r3, [pc, #288]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003392:	ed97 6a03 	vldr	s12, [r7, #12]
 8003396:	eddf 5a45 	vldr	s11, [pc, #276]	; 80034ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800339a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033b2:	e021      	b.n	80033f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80033da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80034ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80033f8:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	0a5b      	lsrs	r3, r3, #9
 80033fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800340e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003412:	edd7 6a07 	vldr	s13, [r7, #28]
 8003416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800341e:	ee17 2a90 	vmov	r2, s15
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003426:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800343c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003440:	edd7 6a07 	vldr	s13, [r7, #28]
 8003444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344c:	ee17 2a90 	vmov	r2, s15
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003454:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800346a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800346e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800347a:	ee17 2a90 	vmov	r2, s15
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
}
 8003496:	bf00      	nop
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
 80034a8:	03d09000 	.word	0x03d09000
 80034ac:	46000000 	.word	0x46000000
 80034b0:	4c742400 	.word	0x4c742400
 80034b4:	4a742400 	.word	0x4a742400
 80034b8:	4af42400 	.word	0x4af42400

080034bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034c4:	4ba1      	ldr	r3, [pc, #644]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80034ce:	4b9f      	ldr	r3, [pc, #636]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	0d1b      	lsrs	r3, r3, #20
 80034d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80034da:	4b9c      	ldr	r3, [pc, #624]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80034e6:	4b99      	ldr	r3, [pc, #612]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	08db      	lsrs	r3, r3, #3
 80034ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8111 	beq.w	800372c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b02      	cmp	r3, #2
 800350e:	f000 8083 	beq.w	8003618 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b02      	cmp	r3, #2
 8003516:	f200 80a1 	bhi.w	800365c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d056      	beq.n	80035d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003526:	e099      	b.n	800365c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003528:	4b88      	ldr	r3, [pc, #544]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02d      	beq.n	8003590 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003534:	4b85      	ldr	r3, [pc, #532]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	08db      	lsrs	r3, r3, #3
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	4a84      	ldr	r2, [pc, #528]	; (8003750 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
 8003544:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355e:	4b7b      	ldr	r3, [pc, #492]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003572:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800358e:	e087      	b.n	80036a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003758 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800359e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a2:	4b6a      	ldr	r3, [pc, #424]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035d2:	e065      	b.n	80036a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800375c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80035e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e6:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80035fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800360a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003616:	e043      	b.n	80036a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003622:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003760 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362a:	4b48      	ldr	r3, [pc, #288]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800363a:	ed97 6a03 	vldr	s12, [r7, #12]
 800363e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800364a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800364e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800365a:	e021      	b.n	80036a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800375c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800366a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003682:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800369e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80036a0:	4b2a      	ldr	r3, [pc, #168]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	0a5b      	lsrs	r3, r3, #9
 80036a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80036be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c6:	ee17 2a90 	vmov	r2, s15
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80036ce:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	0c1b      	lsrs	r3, r3, #16
 80036d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d8:	ee07 3a90 	vmov	s15, r3
 80036dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f4:	ee17 2a90 	vmov	r2, s15
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	0e1b      	lsrs	r3, r3, #24
 8003702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003716:	edd7 6a07 	vldr	s13, [r7, #28]
 800371a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800371e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003722:	ee17 2a90 	vmov	r2, s15
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800372a:	e008      	b.n	800373e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
}
 800373e:	bf00      	nop
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	58024400 	.word	0x58024400
 8003750:	03d09000 	.word	0x03d09000
 8003754:	46000000 	.word	0x46000000
 8003758:	4c742400 	.word	0x4c742400
 800375c:	4a742400 	.word	0x4a742400
 8003760:	4af42400 	.word	0x4af42400

08003764 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003772:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b03      	cmp	r3, #3
 800377c:	d101      	bne.n	8003782 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e099      	b.n	80038b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003782:	4b4f      	ldr	r3, [pc, #316]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a4e      	ldr	r2, [pc, #312]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003788:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800378c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378e:	f7fd fab9 	bl	8000d04 <HAL_GetTick>
 8003792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003794:	e008      	b.n	80037a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003796:	f7fd fab5 	bl	8000d04 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e086      	b.n	80038b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037a8:	4b45      	ldr	r3, [pc, #276]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f0      	bne.n	8003796 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80037b4:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	031b      	lsls	r3, r3, #12
 80037c2:	493f      	ldr	r1, [pc, #252]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	628b      	str	r3, [r1, #40]	; 0x28
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	025b      	lsls	r3, r3, #9
 80037da:	b29b      	uxth	r3, r3
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	061b      	lsls	r3, r3, #24
 80037f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037f8:	4931      	ldr	r1, [pc, #196]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80037fe:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	492d      	ldr	r1, [pc, #180]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 800380c:	4313      	orrs	r3, r2
 800380e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f023 0220 	bic.w	r2, r3, #32
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	4928      	ldr	r1, [pc, #160]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	4a26      	ldr	r2, [pc, #152]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003828:	f023 0310 	bic.w	r3, r3, #16
 800382c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003832:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <RCCEx_PLL2_Config+0x160>)
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	69d2      	ldr	r2, [r2, #28]
 800383a:	00d2      	lsls	r2, r2, #3
 800383c:	4920      	ldr	r1, [pc, #128]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 800383e:	4313      	orrs	r3, r2
 8003840:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003848:	f043 0310 	orr.w	r3, r3, #16
 800384c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003854:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 800385a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800385e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003860:	e00f      	b.n	8003882 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4a14      	ldr	r2, [pc, #80]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 800386e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003872:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003874:	e005      	b.n	8003882 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 800387c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003880:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 8003888:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800388c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388e:	f7fd fa39 	bl	8000d04 <HAL_GetTick>
 8003892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003894:	e008      	b.n	80038a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003896:	f7fd fa35 	bl	8000d04 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e006      	b.n	80038b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <RCCEx_PLL2_Config+0x15c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	58024400 	.word	0x58024400
 80038c4:	ffff0007 	.word	0xffff0007

080038c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038d6:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d101      	bne.n	80038e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e099      	b.n	8003a1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80038e6:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a4e      	ldr	r2, [pc, #312]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f2:	f7fd fa07 	bl	8000d04 <HAL_GetTick>
 80038f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038f8:	e008      	b.n	800390c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038fa:	f7fd fa03 	bl	8000d04 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e086      	b.n	8003a1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800390c:	4b45      	ldr	r3, [pc, #276]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003918:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	051b      	lsls	r3, r3, #20
 8003926:	493f      	ldr	r1, [pc, #252]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	628b      	str	r3, [r1, #40]	; 0x28
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	3b01      	subs	r3, #1
 8003932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	3b01      	subs	r3, #1
 800393c:	025b      	lsls	r3, r3, #9
 800393e:	b29b      	uxth	r3, r3
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	3b01      	subs	r3, #1
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	3b01      	subs	r3, #1
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800395c:	4931      	ldr	r1, [pc, #196]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003962:	4b30      	ldr	r3, [pc, #192]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	492d      	ldr	r1, [pc, #180]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 8003970:	4313      	orrs	r3, r2
 8003972:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	4928      	ldr	r1, [pc, #160]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003986:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 800398c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003990:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 8003994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <RCCEx_PLL3_Config+0x160>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	69d2      	ldr	r2, [r2, #28]
 800399e:	00d2      	lsls	r2, r2, #3
 80039a0:	4920      	ldr	r1, [pc, #128]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80039b8:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039c4:	e00f      	b.n	80039e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d106      	bne.n	80039da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039d8:	e005      	b.n	80039e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a0e      	ldr	r2, [pc, #56]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f2:	f7fd f987 	bl	8000d04 <HAL_GetTick>
 80039f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80039f8:	e008      	b.n	8003a0c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80039fa:	f7fd f983 	bl	8000d04 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e006      	b.n	8003a1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <RCCEx_PLL3_Config+0x15c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	58024400 	.word	0x58024400
 8003a28:	ffff0007 	.word	0xffff0007

08003a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e042      	b.n	8003ac4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fd f817 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2224      	movs	r2, #36	; 0x24
 8003a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f996 	bl	8003da0 <UART_SetConfig>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fef2 	bl	8004870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 ff79 	bl	80049b4 <UART_CheckIdleState>
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	f040 8083 	bne.w	8003bee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_UART_Transmit+0x28>
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e07b      	b.n	8003bf0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Transmit+0x3a>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e074      	b.n	8003bf0 <HAL_UART_Transmit+0x124>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2221      	movs	r2, #33	; 0x21
 8003b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b1e:	f7fd f8f1 	bl	8000d04 <HAL_GetTick>
 8003b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3c:	d108      	bne.n	8003b50 <HAL_UART_Transmit+0x84>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d104      	bne.n	8003b50 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e003      	b.n	8003b58 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b60:	e02c      	b.n	8003bbc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 ff6c 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e039      	b.n	8003bf0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	3302      	adds	r3, #2
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	e007      	b.n	8003baa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1cc      	bne.n	8003b62 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 ff39 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	f040 80c0 	bne.w	8003d94 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_UART_Receive+0x28>
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0b8      	b.n	8003d96 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Receive+0x3a>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0b1      	b.n	8003d96 <HAL_UART_Receive+0x19e>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2222      	movs	r2, #34	; 0x22
 8003c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c50:	f7fd f858 	bl	8000d04 <HAL_GetTick>
 8003c54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6e:	d10e      	bne.n	8003c8e <HAL_UART_Receive+0x96>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_UART_Receive+0x8c>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c82:	e02d      	b.n	8003ce0 <HAL_UART_Receive+0xe8>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	22ff      	movs	r2, #255	; 0xff
 8003c88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c8c:	e028      	b.n	8003ce0 <HAL_UART_Receive+0xe8>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <HAL_UART_Receive+0xba>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <HAL_UART_Receive+0xb0>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ca6:	e01b      	b.n	8003ce0 <HAL_UART_Receive+0xe8>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	227f      	movs	r2, #127	; 0x7f
 8003cac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cb0:	e016      	b.n	8003ce0 <HAL_UART_Receive+0xe8>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cba:	d10d      	bne.n	8003cd8 <HAL_UART_Receive+0xe0>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <HAL_UART_Receive+0xd6>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	227f      	movs	r2, #127	; 0x7f
 8003cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ccc:	e008      	b.n	8003ce0 <HAL_UART_Receive+0xe8>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	223f      	movs	r2, #63	; 0x3f
 8003cd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cd6:	e003      	b.n	8003ce0 <HAL_UART_Receive+0xe8>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ce6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf0:	d108      	bne.n	8003d04 <HAL_UART_Receive+0x10c>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d104      	bne.n	8003d04 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	e003      	b.n	8003d0c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003d14:	e032      	b.n	8003d7c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2120      	movs	r1, #32
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fe92 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e032      	b.n	8003d96 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10c      	bne.n	8003d50 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	8a7b      	ldrh	r3, [r7, #18]
 8003d40:	4013      	ands	r3, r2
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	e00c      	b.n	8003d6a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	8a7b      	ldrh	r3, [r7, #18]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	3301      	adds	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1c6      	bne.n	8003d16 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da4:	b092      	sub	sp, #72	; 0x48
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4bbe      	ldr	r3, [pc, #760]	; (80040c8 <UART_SetConfig+0x328>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4ab3      	ldr	r2, [pc, #716]	; (80040cc <UART_SetConfig+0x32c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	4baf      	ldr	r3, [pc, #700]	; (80040d0 <UART_SetConfig+0x330>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f023 010f 	bic.w	r1, r3, #15
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4aa6      	ldr	r2, [pc, #664]	; (80040d4 <UART_SetConfig+0x334>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d177      	bne.n	8003f30 <UART_SetConfig+0x190>
 8003e40:	4ba5      	ldr	r3, [pc, #660]	; (80040d8 <UART_SetConfig+0x338>)
 8003e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e48:	2b28      	cmp	r3, #40	; 0x28
 8003e4a:	d86d      	bhi.n	8003f28 <UART_SetConfig+0x188>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <UART_SetConfig+0xb4>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003ef9 	.word	0x08003ef9
 8003e58:	08003f29 	.word	0x08003f29
 8003e5c:	08003f29 	.word	0x08003f29
 8003e60:	08003f29 	.word	0x08003f29
 8003e64:	08003f29 	.word	0x08003f29
 8003e68:	08003f29 	.word	0x08003f29
 8003e6c:	08003f29 	.word	0x08003f29
 8003e70:	08003f29 	.word	0x08003f29
 8003e74:	08003f01 	.word	0x08003f01
 8003e78:	08003f29 	.word	0x08003f29
 8003e7c:	08003f29 	.word	0x08003f29
 8003e80:	08003f29 	.word	0x08003f29
 8003e84:	08003f29 	.word	0x08003f29
 8003e88:	08003f29 	.word	0x08003f29
 8003e8c:	08003f29 	.word	0x08003f29
 8003e90:	08003f29 	.word	0x08003f29
 8003e94:	08003f09 	.word	0x08003f09
 8003e98:	08003f29 	.word	0x08003f29
 8003e9c:	08003f29 	.word	0x08003f29
 8003ea0:	08003f29 	.word	0x08003f29
 8003ea4:	08003f29 	.word	0x08003f29
 8003ea8:	08003f29 	.word	0x08003f29
 8003eac:	08003f29 	.word	0x08003f29
 8003eb0:	08003f29 	.word	0x08003f29
 8003eb4:	08003f11 	.word	0x08003f11
 8003eb8:	08003f29 	.word	0x08003f29
 8003ebc:	08003f29 	.word	0x08003f29
 8003ec0:	08003f29 	.word	0x08003f29
 8003ec4:	08003f29 	.word	0x08003f29
 8003ec8:	08003f29 	.word	0x08003f29
 8003ecc:	08003f29 	.word	0x08003f29
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f19 	.word	0x08003f19
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	08003f29 	.word	0x08003f29
 8003ee0:	08003f29 	.word	0x08003f29
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f29 	.word	0x08003f29
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003efe:	e222      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f00:	2304      	movs	r3, #4
 8003f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f06:	e21e      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f0e:	e21a      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f16:	e216      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f18:	2320      	movs	r3, #32
 8003f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f1e:	e212      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f20:	2340      	movs	r3, #64	; 0x40
 8003f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f26:	e20e      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f2e:	e20a      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a69      	ldr	r2, [pc, #420]	; (80040dc <UART_SetConfig+0x33c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d130      	bne.n	8003f9c <UART_SetConfig+0x1fc>
 8003f3a:	4b67      	ldr	r3, [pc, #412]	; (80040d8 <UART_SetConfig+0x338>)
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d826      	bhi.n	8003f94 <UART_SetConfig+0x1f4>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0x1ac>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f65 	.word	0x08003f65
 8003f50:	08003f6d 	.word	0x08003f6d
 8003f54:	08003f75 	.word	0x08003f75
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f6a:	e1ec      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f72:	e1e8      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f7a:	e1e4      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f82:	e1e0      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f84:	2320      	movs	r3, #32
 8003f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f8a:	e1dc      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f92:	e1d8      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f9a:	e1d4      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a4f      	ldr	r2, [pc, #316]	; (80040e0 <UART_SetConfig+0x340>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d130      	bne.n	8004008 <UART_SetConfig+0x268>
 8003fa6:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <UART_SetConfig+0x338>)
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d826      	bhi.n	8004000 <UART_SetConfig+0x260>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <UART_SetConfig+0x218>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fd1 	.word	0x08003fd1
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	08003fe1 	.word	0x08003fe1
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff9 	.word	0x08003ff9
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fd6:	e1b6      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003fd8:	2304      	movs	r3, #4
 8003fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fde:	e1b2      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fe6:	e1ae      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fee:	e1aa      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ff6:	e1a6      	b.n	8004346 <UART_SetConfig+0x5a6>
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ffe:	e1a2      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004006:	e19e      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a35      	ldr	r2, [pc, #212]	; (80040e4 <UART_SetConfig+0x344>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d130      	bne.n	8004074 <UART_SetConfig+0x2d4>
 8004012:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <UART_SetConfig+0x338>)
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	2b05      	cmp	r3, #5
 800401c:	d826      	bhi.n	800406c <UART_SetConfig+0x2cc>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0x284>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	0800403d 	.word	0x0800403d
 8004028:	08004045 	.word	0x08004045
 800402c:	0800404d 	.word	0x0800404d
 8004030:	08004055 	.word	0x08004055
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004065 	.word	0x08004065
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004042:	e180      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004044:	2304      	movs	r3, #4
 8004046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800404a:	e17c      	b.n	8004346 <UART_SetConfig+0x5a6>
 800404c:	2308      	movs	r3, #8
 800404e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004052:	e178      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004054:	2310      	movs	r3, #16
 8004056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800405a:	e174      	b.n	8004346 <UART_SetConfig+0x5a6>
 800405c:	2320      	movs	r3, #32
 800405e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004062:	e170      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004064:	2340      	movs	r3, #64	; 0x40
 8004066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800406a:	e16c      	b.n	8004346 <UART_SetConfig+0x5a6>
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004072:	e168      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <UART_SetConfig+0x348>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d142      	bne.n	8004104 <UART_SetConfig+0x364>
 800407e:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <UART_SetConfig+0x338>)
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	2b05      	cmp	r3, #5
 8004088:	d838      	bhi.n	80040fc <UART_SetConfig+0x35c>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0x2f0>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040a9 	.word	0x080040a9
 8004094:	080040b1 	.word	0x080040b1
 8004098:	080040b9 	.word	0x080040b9
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040ed 	.word	0x080040ed
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ae:	e14a      	b.n	8004346 <UART_SetConfig+0x5a6>
 80040b0:	2304      	movs	r3, #4
 80040b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040b6:	e146      	b.n	8004346 <UART_SetConfig+0x5a6>
 80040b8:	2308      	movs	r3, #8
 80040ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040be:	e142      	b.n	8004346 <UART_SetConfig+0x5a6>
 80040c0:	2310      	movs	r3, #16
 80040c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040c6:	e13e      	b.n	8004346 <UART_SetConfig+0x5a6>
 80040c8:	cfff69f3 	.word	0xcfff69f3
 80040cc:	58000c00 	.word	0x58000c00
 80040d0:	11fff4ff 	.word	0x11fff4ff
 80040d4:	40011000 	.word	0x40011000
 80040d8:	58024400 	.word	0x58024400
 80040dc:	40004400 	.word	0x40004400
 80040e0:	40004800 	.word	0x40004800
 80040e4:	40004c00 	.word	0x40004c00
 80040e8:	40005000 	.word	0x40005000
 80040ec:	2320      	movs	r3, #32
 80040ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040f2:	e128      	b.n	8004346 <UART_SetConfig+0x5a6>
 80040f4:	2340      	movs	r3, #64	; 0x40
 80040f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040fa:	e124      	b.n	8004346 <UART_SetConfig+0x5a6>
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004102:	e120      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4acb      	ldr	r2, [pc, #812]	; (8004438 <UART_SetConfig+0x698>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d176      	bne.n	80041fc <UART_SetConfig+0x45c>
 800410e:	4bcb      	ldr	r3, [pc, #812]	; (800443c <UART_SetConfig+0x69c>)
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004116:	2b28      	cmp	r3, #40	; 0x28
 8004118:	d86c      	bhi.n	80041f4 <UART_SetConfig+0x454>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <UART_SetConfig+0x380>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	080041c5 	.word	0x080041c5
 8004124:	080041f5 	.word	0x080041f5
 8004128:	080041f5 	.word	0x080041f5
 800412c:	080041f5 	.word	0x080041f5
 8004130:	080041f5 	.word	0x080041f5
 8004134:	080041f5 	.word	0x080041f5
 8004138:	080041f5 	.word	0x080041f5
 800413c:	080041f5 	.word	0x080041f5
 8004140:	080041cd 	.word	0x080041cd
 8004144:	080041f5 	.word	0x080041f5
 8004148:	080041f5 	.word	0x080041f5
 800414c:	080041f5 	.word	0x080041f5
 8004150:	080041f5 	.word	0x080041f5
 8004154:	080041f5 	.word	0x080041f5
 8004158:	080041f5 	.word	0x080041f5
 800415c:	080041f5 	.word	0x080041f5
 8004160:	080041d5 	.word	0x080041d5
 8004164:	080041f5 	.word	0x080041f5
 8004168:	080041f5 	.word	0x080041f5
 800416c:	080041f5 	.word	0x080041f5
 8004170:	080041f5 	.word	0x080041f5
 8004174:	080041f5 	.word	0x080041f5
 8004178:	080041f5 	.word	0x080041f5
 800417c:	080041f5 	.word	0x080041f5
 8004180:	080041dd 	.word	0x080041dd
 8004184:	080041f5 	.word	0x080041f5
 8004188:	080041f5 	.word	0x080041f5
 800418c:	080041f5 	.word	0x080041f5
 8004190:	080041f5 	.word	0x080041f5
 8004194:	080041f5 	.word	0x080041f5
 8004198:	080041f5 	.word	0x080041f5
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	080041e5 	.word	0x080041e5
 80041a4:	080041f5 	.word	0x080041f5
 80041a8:	080041f5 	.word	0x080041f5
 80041ac:	080041f5 	.word	0x080041f5
 80041b0:	080041f5 	.word	0x080041f5
 80041b4:	080041f5 	.word	0x080041f5
 80041b8:	080041f5 	.word	0x080041f5
 80041bc:	080041f5 	.word	0x080041f5
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ca:	e0bc      	b.n	8004346 <UART_SetConfig+0x5a6>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d2:	e0b8      	b.n	8004346 <UART_SetConfig+0x5a6>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041da:	e0b4      	b.n	8004346 <UART_SetConfig+0x5a6>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041e2:	e0b0      	b.n	8004346 <UART_SetConfig+0x5a6>
 80041e4:	2320      	movs	r3, #32
 80041e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ea:	e0ac      	b.n	8004346 <UART_SetConfig+0x5a6>
 80041ec:	2340      	movs	r3, #64	; 0x40
 80041ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041f2:	e0a8      	b.n	8004346 <UART_SetConfig+0x5a6>
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041fa:	e0a4      	b.n	8004346 <UART_SetConfig+0x5a6>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a8f      	ldr	r2, [pc, #572]	; (8004440 <UART_SetConfig+0x6a0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d130      	bne.n	8004268 <UART_SetConfig+0x4c8>
 8004206:	4b8d      	ldr	r3, [pc, #564]	; (800443c <UART_SetConfig+0x69c>)
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	2b05      	cmp	r3, #5
 8004210:	d826      	bhi.n	8004260 <UART_SetConfig+0x4c0>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <UART_SetConfig+0x478>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	08004231 	.word	0x08004231
 800421c:	08004239 	.word	0x08004239
 8004220:	08004241 	.word	0x08004241
 8004224:	08004249 	.word	0x08004249
 8004228:	08004251 	.word	0x08004251
 800422c:	08004259 	.word	0x08004259
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004236:	e086      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423e:	e082      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004246:	e07e      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424e:	e07a      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004250:	2320      	movs	r3, #32
 8004252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004256:	e076      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004258:	2340      	movs	r3, #64	; 0x40
 800425a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800425e:	e072      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004266:	e06e      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a75      	ldr	r2, [pc, #468]	; (8004444 <UART_SetConfig+0x6a4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d130      	bne.n	80042d4 <UART_SetConfig+0x534>
 8004272:	4b72      	ldr	r3, [pc, #456]	; (800443c <UART_SetConfig+0x69c>)
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b05      	cmp	r3, #5
 800427c:	d826      	bhi.n	80042cc <UART_SetConfig+0x52c>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0x4e4>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	0800429d 	.word	0x0800429d
 8004288:	080042a5 	.word	0x080042a5
 800428c:	080042ad 	.word	0x080042ad
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042c5 	.word	0x080042c5
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a2:	e050      	b.n	8004346 <UART_SetConfig+0x5a6>
 80042a4:	2304      	movs	r3, #4
 80042a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042aa:	e04c      	b.n	8004346 <UART_SetConfig+0x5a6>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b2:	e048      	b.n	8004346 <UART_SetConfig+0x5a6>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ba:	e044      	b.n	8004346 <UART_SetConfig+0x5a6>
 80042bc:	2320      	movs	r3, #32
 80042be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042c2:	e040      	b.n	8004346 <UART_SetConfig+0x5a6>
 80042c4:	2340      	movs	r3, #64	; 0x40
 80042c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ca:	e03c      	b.n	8004346 <UART_SetConfig+0x5a6>
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042d2:	e038      	b.n	8004346 <UART_SetConfig+0x5a6>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a5b      	ldr	r2, [pc, #364]	; (8004448 <UART_SetConfig+0x6a8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d130      	bne.n	8004340 <UART_SetConfig+0x5a0>
 80042de:	4b57      	ldr	r3, [pc, #348]	; (800443c <UART_SetConfig+0x69c>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d826      	bhi.n	8004338 <UART_SetConfig+0x598>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0x550>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004309 	.word	0x08004309
 80042f4:	08004311 	.word	0x08004311
 80042f8:	08004319 	.word	0x08004319
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004329 	.word	0x08004329
 8004304:	08004331 	.word	0x08004331
 8004308:	2302      	movs	r3, #2
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430e:	e01a      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004310:	2304      	movs	r3, #4
 8004312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004316:	e016      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004318:	2308      	movs	r3, #8
 800431a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431e:	e012      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004320:	2310      	movs	r3, #16
 8004322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004326:	e00e      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004328:	2320      	movs	r3, #32
 800432a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800432e:	e00a      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004330:	2340      	movs	r3, #64	; 0x40
 8004332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004336:	e006      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800433e:	e002      	b.n	8004346 <UART_SetConfig+0x5a6>
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a3f      	ldr	r2, [pc, #252]	; (8004448 <UART_SetConfig+0x6a8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	f040 80f8 	bne.w	8004542 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004352:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004356:	2b20      	cmp	r3, #32
 8004358:	dc46      	bgt.n	80043e8 <UART_SetConfig+0x648>
 800435a:	2b02      	cmp	r3, #2
 800435c:	f2c0 8082 	blt.w	8004464 <UART_SetConfig+0x6c4>
 8004360:	3b02      	subs	r3, #2
 8004362:	2b1e      	cmp	r3, #30
 8004364:	d87e      	bhi.n	8004464 <UART_SetConfig+0x6c4>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0x5cc>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	080043ef 	.word	0x080043ef
 8004370:	08004465 	.word	0x08004465
 8004374:	080043f7 	.word	0x080043f7
 8004378:	08004465 	.word	0x08004465
 800437c:	08004465 	.word	0x08004465
 8004380:	08004465 	.word	0x08004465
 8004384:	08004407 	.word	0x08004407
 8004388:	08004465 	.word	0x08004465
 800438c:	08004465 	.word	0x08004465
 8004390:	08004465 	.word	0x08004465
 8004394:	08004465 	.word	0x08004465
 8004398:	08004465 	.word	0x08004465
 800439c:	08004465 	.word	0x08004465
 80043a0:	08004465 	.word	0x08004465
 80043a4:	08004417 	.word	0x08004417
 80043a8:	08004465 	.word	0x08004465
 80043ac:	08004465 	.word	0x08004465
 80043b0:	08004465 	.word	0x08004465
 80043b4:	08004465 	.word	0x08004465
 80043b8:	08004465 	.word	0x08004465
 80043bc:	08004465 	.word	0x08004465
 80043c0:	08004465 	.word	0x08004465
 80043c4:	08004465 	.word	0x08004465
 80043c8:	08004465 	.word	0x08004465
 80043cc:	08004465 	.word	0x08004465
 80043d0:	08004465 	.word	0x08004465
 80043d4:	08004465 	.word	0x08004465
 80043d8:	08004465 	.word	0x08004465
 80043dc:	08004465 	.word	0x08004465
 80043e0:	08004465 	.word	0x08004465
 80043e4:	08004457 	.word	0x08004457
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	d037      	beq.n	800445c <UART_SetConfig+0x6bc>
 80043ec:	e03a      	b.n	8004464 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80043ee:	f7fe fefb 	bl	80031e8 <HAL_RCCEx_GetD3PCLK1Freq>
 80043f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80043f4:	e03c      	b.n	8004470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe ff0a 	bl	8003214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004404:	e034      	b.n	8004470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004406:	f107 0318 	add.w	r3, r7, #24
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f856 	bl	80034bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004414:	e02c      	b.n	8004470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <UART_SetConfig+0x69c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <UART_SetConfig+0x69c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	4a07      	ldr	r2, [pc, #28]	; (800444c <UART_SetConfig+0x6ac>)
 800442e:	fa22 f303 	lsr.w	r3, r2, r3
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004434:	e01c      	b.n	8004470 <UART_SetConfig+0x6d0>
 8004436:	bf00      	nop
 8004438:	40011400 	.word	0x40011400
 800443c:	58024400 	.word	0x58024400
 8004440:	40007800 	.word	0x40007800
 8004444:	40007c00 	.word	0x40007c00
 8004448:	58000c00 	.word	0x58000c00
 800444c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004450:	4b9d      	ldr	r3, [pc, #628]	; (80046c8 <UART_SetConfig+0x928>)
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004454:	e00c      	b.n	8004470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004456:	4b9d      	ldr	r3, [pc, #628]	; (80046cc <UART_SetConfig+0x92c>)
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800445a:	e009      	b.n	8004470 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004462:	e005      	b.n	8004470 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800446e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 81de 	beq.w	8004834 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	4a94      	ldr	r2, [pc, #592]	; (80046d0 <UART_SetConfig+0x930>)
 800447e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004482:	461a      	mov	r2, r3
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	fbb3 f3f2 	udiv	r3, r3, r2
 800448a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004498:	429a      	cmp	r2, r3
 800449a:	d305      	bcc.n	80044a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d903      	bls.n	80044b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80044ae:	e1c1      	b.n	8004834 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	2200      	movs	r2, #0
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	60fa      	str	r2, [r7, #12]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	4a84      	ldr	r2, [pc, #528]	; (80046d0 <UART_SetConfig+0x930>)
 80044be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044d2:	f7fb ff01 	bl	80002d8 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	020b      	lsls	r3, r1, #8
 80044e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044ec:	0202      	lsls	r2, r0, #8
 80044ee:	6979      	ldr	r1, [r7, #20]
 80044f0:	6849      	ldr	r1, [r1, #4]
 80044f2:	0849      	lsrs	r1, r1, #1
 80044f4:	2000      	movs	r0, #0
 80044f6:	460c      	mov	r4, r1
 80044f8:	4605      	mov	r5, r0
 80044fa:	eb12 0804 	adds.w	r8, r2, r4
 80044fe:	eb43 0905 	adc.w	r9, r3, r5
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	469a      	mov	sl, r3
 800450a:	4693      	mov	fp, r2
 800450c:	4652      	mov	r2, sl
 800450e:	465b      	mov	r3, fp
 8004510:	4640      	mov	r0, r8
 8004512:	4649      	mov	r1, r9
 8004514:	f7fb fee0 	bl	80002d8 <__aeabi_uldivmod>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4613      	mov	r3, r2
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004526:	d308      	bcc.n	800453a <UART_SetConfig+0x79a>
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d204      	bcs.n	800453a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004536:	60da      	str	r2, [r3, #12]
 8004538:	e17c      	b.n	8004834 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004540:	e178      	b.n	8004834 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454a:	f040 80c5 	bne.w	80046d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800454e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004552:	2b20      	cmp	r3, #32
 8004554:	dc48      	bgt.n	80045e8 <UART_SetConfig+0x848>
 8004556:	2b00      	cmp	r3, #0
 8004558:	db7b      	blt.n	8004652 <UART_SetConfig+0x8b2>
 800455a:	2b20      	cmp	r3, #32
 800455c:	d879      	bhi.n	8004652 <UART_SetConfig+0x8b2>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x7c4>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	080045ef 	.word	0x080045ef
 8004568:	080045f7 	.word	0x080045f7
 800456c:	08004653 	.word	0x08004653
 8004570:	08004653 	.word	0x08004653
 8004574:	080045ff 	.word	0x080045ff
 8004578:	08004653 	.word	0x08004653
 800457c:	08004653 	.word	0x08004653
 8004580:	08004653 	.word	0x08004653
 8004584:	0800460f 	.word	0x0800460f
 8004588:	08004653 	.word	0x08004653
 800458c:	08004653 	.word	0x08004653
 8004590:	08004653 	.word	0x08004653
 8004594:	08004653 	.word	0x08004653
 8004598:	08004653 	.word	0x08004653
 800459c:	08004653 	.word	0x08004653
 80045a0:	08004653 	.word	0x08004653
 80045a4:	0800461f 	.word	0x0800461f
 80045a8:	08004653 	.word	0x08004653
 80045ac:	08004653 	.word	0x08004653
 80045b0:	08004653 	.word	0x08004653
 80045b4:	08004653 	.word	0x08004653
 80045b8:	08004653 	.word	0x08004653
 80045bc:	08004653 	.word	0x08004653
 80045c0:	08004653 	.word	0x08004653
 80045c4:	08004653 	.word	0x08004653
 80045c8:	08004653 	.word	0x08004653
 80045cc:	08004653 	.word	0x08004653
 80045d0:	08004653 	.word	0x08004653
 80045d4:	08004653 	.word	0x08004653
 80045d8:	08004653 	.word	0x08004653
 80045dc:	08004653 	.word	0x08004653
 80045e0:	08004653 	.word	0x08004653
 80045e4:	08004645 	.word	0x08004645
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d02e      	beq.n	800464a <UART_SetConfig+0x8aa>
 80045ec:	e031      	b.n	8004652 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ee:	f7fd fe89 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 80045f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80045f4:	e033      	b.n	800465e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f6:	f7fd fe9b 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 80045fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80045fc:	e02f      	b.n	800465e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fe06 	bl	8003214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800460c:	e027      	b.n	800465e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800460e:	f107 0318 	add.w	r3, r7, #24
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe ff52 	bl	80034bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800461c:	e01f      	b.n	800465e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800461e:	4b2d      	ldr	r3, [pc, #180]	; (80046d4 <UART_SetConfig+0x934>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800462a:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <UART_SetConfig+0x934>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	08db      	lsrs	r3, r3, #3
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	4a24      	ldr	r2, [pc, #144]	; (80046c8 <UART_SetConfig+0x928>)
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800463c:	e00f      	b.n	800465e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <UART_SetConfig+0x928>)
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004642:	e00c      	b.n	800465e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004644:	4b21      	ldr	r3, [pc, #132]	; (80046cc <UART_SetConfig+0x92c>)
 8004646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004648:	e009      	b.n	800465e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004650:	e005      	b.n	800465e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800465c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800465e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80e7 	beq.w	8004834 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <UART_SetConfig+0x930>)
 800466c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004670:	461a      	mov	r2, r3
 8004672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004674:	fbb3 f3f2 	udiv	r3, r3, r2
 8004678:	005a      	lsls	r2, r3, #1
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	441a      	add	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	2b0f      	cmp	r3, #15
 8004690:	d916      	bls.n	80046c0 <UART_SetConfig+0x920>
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d212      	bcs.n	80046c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	b29b      	uxth	r3, r3
 800469e:	f023 030f 	bic.w	r3, r3, #15
 80046a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046b2:	4313      	orrs	r3, r2
 80046b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	e0b9      	b.n	8004834 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80046c6:	e0b5      	b.n	8004834 <UART_SetConfig+0xa94>
 80046c8:	03d09000 	.word	0x03d09000
 80046cc:	003d0900 	.word	0x003d0900
 80046d0:	08004e60 	.word	0x08004e60
 80046d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046dc:	2b20      	cmp	r3, #32
 80046de:	dc49      	bgt.n	8004774 <UART_SetConfig+0x9d4>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	db7c      	blt.n	80047de <UART_SetConfig+0xa3e>
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d87a      	bhi.n	80047de <UART_SetConfig+0xa3e>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0x950>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	0800477b 	.word	0x0800477b
 80046f4:	08004783 	.word	0x08004783
 80046f8:	080047df 	.word	0x080047df
 80046fc:	080047df 	.word	0x080047df
 8004700:	0800478b 	.word	0x0800478b
 8004704:	080047df 	.word	0x080047df
 8004708:	080047df 	.word	0x080047df
 800470c:	080047df 	.word	0x080047df
 8004710:	0800479b 	.word	0x0800479b
 8004714:	080047df 	.word	0x080047df
 8004718:	080047df 	.word	0x080047df
 800471c:	080047df 	.word	0x080047df
 8004720:	080047df 	.word	0x080047df
 8004724:	080047df 	.word	0x080047df
 8004728:	080047df 	.word	0x080047df
 800472c:	080047df 	.word	0x080047df
 8004730:	080047ab 	.word	0x080047ab
 8004734:	080047df 	.word	0x080047df
 8004738:	080047df 	.word	0x080047df
 800473c:	080047df 	.word	0x080047df
 8004740:	080047df 	.word	0x080047df
 8004744:	080047df 	.word	0x080047df
 8004748:	080047df 	.word	0x080047df
 800474c:	080047df 	.word	0x080047df
 8004750:	080047df 	.word	0x080047df
 8004754:	080047df 	.word	0x080047df
 8004758:	080047df 	.word	0x080047df
 800475c:	080047df 	.word	0x080047df
 8004760:	080047df 	.word	0x080047df
 8004764:	080047df 	.word	0x080047df
 8004768:	080047df 	.word	0x080047df
 800476c:	080047df 	.word	0x080047df
 8004770:	080047d1 	.word	0x080047d1
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d02e      	beq.n	80047d6 <UART_SetConfig+0xa36>
 8004778:	e031      	b.n	80047de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800477a:	f7fd fdc3 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 800477e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004780:	e033      	b.n	80047ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004782:	f7fd fdd5 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8004786:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004788:	e02f      	b.n	80047ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800478a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe fd40 	bl	8003214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004798:	e027      	b.n	80047ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800479a:	f107 0318 	add.w	r3, r7, #24
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fe8c 	bl	80034bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047a8:	e01f      	b.n	80047ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047aa:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <UART_SetConfig+0xac0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047b6:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <UART_SetConfig+0xac0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	4a28      	ldr	r2, [pc, #160]	; (8004864 <UART_SetConfig+0xac4>)
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047c8:	e00f      	b.n	80047ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80047ca:	4b26      	ldr	r3, [pc, #152]	; (8004864 <UART_SetConfig+0xac4>)
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047ce:	e00c      	b.n	80047ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <UART_SetConfig+0xac8>)
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047d4:	e009      	b.n	80047ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047dc:	e005      	b.n	80047ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80047e8:	bf00      	nop
    }

    if (pclk != 0U)
 80047ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d021      	beq.n	8004834 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	4a1d      	ldr	r2, [pc, #116]	; (800486c <UART_SetConfig+0xacc>)
 80047f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	441a      	add	r2, r3
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d909      	bls.n	800482e <UART_SetConfig+0xa8e>
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004820:	d205      	bcs.n	800482e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	b29a      	uxth	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60da      	str	r2, [r3, #12]
 800482c:	e002      	b.n	8004834 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2201      	movs	r2, #1
 8004838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2201      	movs	r2, #1
 8004840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2200      	movs	r2, #0
 8004848:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004850:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004854:	4618      	mov	r0, r3
 8004856:	3748      	adds	r7, #72	; 0x48
 8004858:	46bd      	mov	sp, r7
 800485a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485e:	bf00      	nop
 8004860:	58024400 	.word	0x58024400
 8004864:	03d09000 	.word	0x03d09000
 8004868:	003d0900 	.word	0x003d0900
 800486c:	08004e60 	.word	0x08004e60

08004870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496e:	d10a      	bne.n	8004986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c4:	f7fc f99e 	bl	8000d04 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d10e      	bne.n	80049f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f82f 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e025      	b.n	8004a42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d10e      	bne.n	8004a22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f819 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e00f      	b.n	8004a42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b09c      	sub	sp, #112	; 0x70
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	e0a9      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	f000 80a5 	beq.w	8004bb0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fc f94d 	bl	8000d04 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d140      	bne.n	8004afe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a90:	667b      	str	r3, [r7, #100]	; 0x64
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e6      	bne.n	8004a7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3308      	adds	r3, #8
 8004acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ace:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e069      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d051      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1a:	d149      	bne.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
 8004b46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e6      	bne.n	8004b26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	613b      	str	r3, [r7, #16]
   return(result);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b78:	623a      	str	r2, [r7, #32]
 8004b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	69f9      	ldr	r1, [r7, #28]
 8004b7e:	6a3a      	ldr	r2, [r7, #32]
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e5      	bne.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e010      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	f43f af46 	beq.w	8004a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3770      	adds	r7, #112	; 0x70
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e027      	b.n	8004c40 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2224      	movs	r2, #36	; 0x24
 8004bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e02d      	b.n	8004cc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2224      	movs	r2, #36	; 0x24
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f84f 	bl	8004d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e02d      	b.n	8004d3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2224      	movs	r2, #36	; 0x24
 8004cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f811 	bl	8004d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d108      	bne.n	8004d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d64:	e031      	b.n	8004dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d66:	2310      	movs	r3, #16
 8004d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	0e5b      	lsrs	r3, r3, #25
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	0f5b      	lsrs	r3, r3, #29
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d8e:	7bbb      	ldrb	r3, [r7, #14]
 8004d90:	7b3a      	ldrb	r2, [r7, #12]
 8004d92:	4911      	ldr	r1, [pc, #68]	; (8004dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8004d94:	5c8a      	ldrb	r2, [r1, r2]
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d9a:	7b3a      	ldrb	r2, [r7, #12]
 8004d9c:	490f      	ldr	r1, [pc, #60]	; (8004ddc <UARTEx_SetNbDataToProcess+0x98>)
 8004d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	7b7a      	ldrb	r2, [r7, #13]
 8004db0:	4909      	ldr	r1, [pc, #36]	; (8004dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8004db2:	5c8a      	ldrb	r2, [r1, r2]
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004db8:	7b7a      	ldrb	r2, [r7, #13]
 8004dba:	4908      	ldr	r1, [pc, #32]	; (8004ddc <UARTEx_SetNbDataToProcess+0x98>)
 8004dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	08004e78 	.word	0x08004e78
 8004ddc:	08004e80 	.word	0x08004e80

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4d0d      	ldr	r5, [pc, #52]	; (8004e18 <__libc_init_array+0x38>)
 8004de4:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <__libc_init_array+0x3c>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	2600      	movs	r6, #0
 8004dec:	42a6      	cmp	r6, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	4d0b      	ldr	r5, [pc, #44]	; (8004e20 <__libc_init_array+0x40>)
 8004df2:	4c0c      	ldr	r4, [pc, #48]	; (8004e24 <__libc_init_array+0x44>)
 8004df4:	f000 f820 	bl	8004e38 <_init>
 8004df8:	1b64      	subs	r4, r4, r5
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	42a6      	cmp	r6, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e08:	4798      	blx	r3
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e12:	4798      	blx	r3
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08004e90 	.word	0x08004e90
 8004e1c:	08004e90 	.word	0x08004e90
 8004e20:	08004e90 	.word	0x08004e90
 8004e24:	08004e94 	.word	0x08004e94

08004e28 <memset>:
 8004e28:	4402      	add	r2, r0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <memset+0xa>
 8004e30:	4770      	bx	lr
 8004e32:	f803 1b01 	strb.w	r1, [r3], #1
 8004e36:	e7f9      	b.n	8004e2c <memset+0x4>

08004e38 <_init>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr

08004e44 <_fini>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr
