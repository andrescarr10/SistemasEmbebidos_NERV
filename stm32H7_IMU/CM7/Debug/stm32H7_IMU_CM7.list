
stm32H7_IMU_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ecc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800724c  0800724c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007254  08007254  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  24000074  080072d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000250  080072d0  00020250  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001344a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244d  00000000  00000000  000334ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00035940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000366e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ac9f  00000000  00000000  000373a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012027  00000000  00000000  00072047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018024a  00000000  00000000  0008406e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002042b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc8  00000000  00000000  00204308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007154 	.word	0x08007154

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08007154 	.word	0x08007154

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <main+0xd8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	617a      	str	r2, [r7, #20]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 facf 	bl	8000d7c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fd33 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f855 	bl	8000890 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007e6:	f000 f8d1 	bl	800098c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <main+0xd8>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	4a25      	ldr	r2, [pc, #148]	; (8000888 <main+0xd8>)
 80007f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <main+0xd8>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000808:	2000      	movs	r0, #0
 800080a:	f001 f88d 	bl	8001928 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080e:	2100      	movs	r1, #0
 8000810:	2000      	movs	r0, #0
 8000812:	f001 f8a3 	bl	800195c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081a:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800081c:	bf00      	nop
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <main+0xd8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d104      	bne.n	8000834 <main+0x84>
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	617a      	str	r2, [r7, #20]
 8000830:	2b00      	cmp	r3, #0
 8000832:	dcf4      	bgt.n	800081e <main+0x6e>
if ( timeout < 0 )
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	2b00      	cmp	r3, #0
 8000838:	da01      	bge.n	800083e <main+0x8e>
{
Error_Handler();
 800083a:	f000 fa9f 	bl	8000d7c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f9b1 	bl	8000ba4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000842:	f000 f963 	bl	8000b0c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000846:	f000 f915 	bl	8000a74 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800084a:	f000 f8bb 	bl	80009c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int16_t accel_data;
  uint8_t imu_data[14];
  mpu9250_write_reg(28, 0x08);
 800084e:	2108      	movs	r1, #8
 8000850:	201c      	movs	r0, #28
 8000852:	f000 fa3f 	bl	8000cd4 <mpu9250_write_reg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //printf("Hello World!\n\r");
  while (1)
  {
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	220e      	movs	r2, #14
 800085a:	4619      	mov	r1, r3
 800085c:	203b      	movs	r0, #59	; 0x3b
 800085e:	f000 fa5f 	bl	8000d20 <mpu9250_read_reg>
	  accel_data = ((int16_t)imu_data[0]<<8) + imu_data[1];
 8000862:	793b      	ldrb	r3, [r7, #4]
 8000864:	b29b      	uxth	r3, r3
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b29a      	uxth	r2, r3
 800086a:	797b      	ldrb	r3, [r7, #5]
 800086c:	b29b      	uxth	r3, r3
 800086e:	4413      	add	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	827b      	strh	r3, [r7, #18]
	  printf("Accel data:%d\n\r",accel_data);
 8000874:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000878:	4619      	mov	r1, r3
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <main+0xdc>)
 800087c:	f005 fcdc 	bl	8006238 <iprintf>
	  //printf("Hello World!\n\r");
	  HAL_Delay(100);
 8000880:	2064      	movs	r0, #100	; 0x64
 8000882:	f000 fd73 	bl	800136c <HAL_Delay>
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000886:	e7e6      	b.n	8000856 <main+0xa6>
 8000888:	58024400 	.word	0x58024400
 800088c:	0800716c 	.word	0x0800716c

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	; 0x70
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	224c      	movs	r2, #76	; 0x4c
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fcc2 	bl	8006228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2220      	movs	r2, #32
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f005 fcbc 	bl	8006228 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b0:	2004      	movs	r0, #4
 80008b2:	f001 f867 	bl	8001984 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <SystemClock_Config+0xf4>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a31      	ldr	r2, [pc, #196]	; (8000984 <SystemClock_Config+0xf4>)
 80008c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <SystemClock_Config+0xf4>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <SystemClock_Config+0xf8>)
 80008d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d4:	4a2c      	ldr	r2, [pc, #176]	; (8000988 <SystemClock_Config+0xf8>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <SystemClock_Config+0xf8>)
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e8:	bf00      	nop
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <SystemClock_Config+0xf4>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f6:	d1f8      	bne.n	80008ea <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008f8:	2303      	movs	r3, #3
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000902:	2301      	movs	r3, #1
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000906:	2340      	movs	r3, #64	; 0x40
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	2302      	movs	r3, #2
 8000910:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000916:	23f0      	movs	r3, #240	; 0xf0
 8000918:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000926:	2308      	movs	r3, #8
 8000928:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092a:	2300      	movs	r3, #0
 800092c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f87e 	bl	8001a38 <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000942:	f000 fa1b 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	233f      	movs	r3, #63	; 0x3f
 8000948:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2303      	movs	r3, #3
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000952:	2308      	movs	r3, #8
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000956:	2340      	movs	r3, #64	; 0x40
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fc91 	bl	8002294 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000978:	f000 fa00 	bl	8000d7c <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3770      	adds	r7, #112	; 0x70
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	58024800 	.word	0x58024800
 8000988:	58000400 	.word	0x58000400

0800098c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0b0      	sub	sp, #192	; 0xc0
 8000990:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	22bc      	movs	r2, #188	; 0xbc
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f005 fc45 	bl	8006228 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800099e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80009a2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fffe 	bl	80029ac <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80009b6:	f000 f9e1 	bl	8000d7c <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	37c0      	adds	r7, #192	; 0xc0
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MX_SPI1_Init+0xa8>)
 80009ca:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <MX_SPI1_Init+0xac>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <MX_SPI1_Init+0xa8>)
 80009d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_SPI1_Init+0xa8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_SPI1_Init+0xa8>)
 80009de:	2207      	movs	r2, #7
 80009e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_SPI1_Init+0xa8>)
 80009e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_SPI1_Init+0xa8>)
 80009ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_SPI1_Init+0xa8>)
 80009f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_SPI1_Init+0xa8>)
 80009fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_SPI1_Init+0xa8>)
 8000a5a:	f003 fb0f 	bl	800407c <HAL_SPI_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8000a64:	f000 f98a 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	24000090 	.word	0x24000090
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_USART2_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000a80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000abe:	f004 fa82 	bl	8004fc6 <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 f958 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000ad0:	f005 fab6 	bl	8006040 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 f94f 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000ae2:	f005 faeb 	bl	80060bc <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 f946 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_USART2_UART_Init+0x90>)
 8000af2:	f005 fa6c 	bl	8005fce <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f93e 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000118 	.word	0x24000118
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b12:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <MX_USART3_UART_Init+0x94>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b56:	f004 fa36 	bl	8004fc6 <HAL_UART_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 f90c 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b64:	2100      	movs	r1, #0
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b68:	f005 fa6a 	bl	8006040 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b72:	f000 f903 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b76:	2100      	movs	r1, #0
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b7a:	f005 fa9f 	bl	80060bc <HAL_UARTEx_SetRxFifoThreshold>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b84:	f000 f8fa 	bl	8000d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_USART3_UART_Init+0x90>)
 8000b8a:	f005 fa20 	bl	8005fce <HAL_UARTEx_DisableFifoMode>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b94:	f000 f8f2 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	240001a8 	.word	0x240001a8
 8000ba0:	40004800 	.word	0x40004800

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a40      	ldr	r2, [pc, #256]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a39      	ldr	r2, [pc, #228]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b2b      	ldr	r3, [pc, #172]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a2a      	ldr	r2, [pc, #168]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2110      	movs	r1, #16
 8000c54:	481c      	ldr	r0, [pc, #112]	; (8000cc8 <MX_GPIO_Init+0x124>)
 8000c56:	f000 fe4d 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c60:	481a      	ldr	r0, [pc, #104]	; (8000ccc <MX_GPIO_Init+0x128>)
 8000c62:	f000 fe47 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4815      	ldr	r0, [pc, #84]	; (8000cd0 <MX_GPIO_Init+0x12c>)
 8000c7c:	f000 fc8a 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000c80:	2310      	movs	r3, #16
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_GPIO_Init+0x124>)
 8000c98:	f000 fc7c 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c9c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x128>)
 8000cb6:	f000 fc6d 	bl	8001594 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020000 	.word	0x58020000
 8000ccc:	58020400 	.word	0x58020400
 8000cd0:	58020800 	.word	0x58020800

08000cd4 <mpu9250_write_reg>:

/* USER CODE BEGIN 4 */
void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <mpu9250_write_reg+0x44>)
 8000cea:	f000 fe03 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8000cee:	1df9      	adds	r1, r7, #7
 8000cf0:	2364      	movs	r3, #100	; 0x64
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <mpu9250_write_reg+0x48>)
 8000cf6:	f003 fac7 	bl	8004288 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000cfa:	1db9      	adds	r1, r7, #6
 8000cfc:	2364      	movs	r3, #100	; 0x64
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <mpu9250_write_reg+0x48>)
 8000d02:	f003 fac1 	bl	8004288 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <mpu9250_write_reg+0x44>)
 8000d0c:	f000 fdf2 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	58020000 	.word	0x58020000
 8000d1c:	24000090 	.word	0x24000090

08000d20 <mpu9250_read_reg>:
void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	480d      	ldr	r0, [pc, #52]	; (8000d74 <mpu9250_read_reg+0x54>)
 8000d40:	f000 fdd8 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8000d44:	f107 010f 	add.w	r1, r7, #15
 8000d48:	2364      	movs	r3, #100	; 0x64
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <mpu9250_read_reg+0x58>)
 8000d4e:	f003 fa9b 	bl	8004288 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	2364      	movs	r3, #100	; 0x64
 8000d58:	6839      	ldr	r1, [r7, #0]
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <mpu9250_read_reg+0x58>)
 8000d5c:	f003 fc86 	bl	800466c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <mpu9250_read_reg+0x54>)
 8000d66:	f000 fdc5 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	58020000 	.word	0x58020000
 8000d78:	24000090 	.word	0x24000090

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d90:	1d39      	adds	r1, r7, #4
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	2201      	movs	r2, #1
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <__io_putchar+0x20>)
 8000d9a:	f004 f964 	bl	8005066 <HAL_UART_Transmit>
  return ch;
 8000d9e:	687b      	ldr	r3, [r7, #4]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	240001a8 	.word	0x240001a8

08000dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_MspInit+0x30>)
 8000db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db8:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x30>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x30>)
 8000dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	58024400 	.word	0x58024400

08000de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0b8      	sub	sp, #224	; 0xe0
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	22bc      	movs	r2, #188	; 0xbc
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f005 fa11 	bl	8006228 <memset>
  if(hspi->Instance==SPI1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a25      	ldr	r2, [pc, #148]	; (8000ea0 <HAL_SPI_MspInit+0xc0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d142      	bne.n	8000e96 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fdc3 	bl	80029ac <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000e2c:	f7ff ffa6 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_SPI_MspInit+0xc4>)
 8000e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_SPI_MspInit+0xc4>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_SPI_MspInit+0xc4>)
 8000e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_SPI_MspInit+0xc4>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_SPI_MspInit+0xc4>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_SPI_MspInit+0xc4>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e6c:	23e0      	movs	r3, #224	; 0xe0
 8000e6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e84:	2305      	movs	r3, #5
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_SPI_MspInit+0xc8>)
 8000e92:	f000 fb7f 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	37e0      	adds	r7, #224	; 0xe0
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40013000 	.word	0x40013000
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	58020000 	.word	0x58020000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0bc      	sub	sp, #240	; 0xf0
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	22bc      	movs	r2, #188	; 0xbc
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f005 f9ab 	bl	8006228 <memset>
  if(huart->Instance==USART2)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a5b      	ldr	r2, [pc, #364]	; (8001044 <HAL_UART_MspInit+0x198>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d166      	bne.n	8000faa <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fd5e 	bl	80029ac <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ef6:	f7ff ff41 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f0a:	4b4f      	ldr	r3, [pc, #316]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	4a4a      	ldr	r2, [pc, #296]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f28:	4b47      	ldr	r3, [pc, #284]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f36:	4b44      	ldr	r3, [pc, #272]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a42      	ldr	r2, [pc, #264]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b40      	ldr	r3, [pc, #256]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f54:	2308      	movs	r3, #8
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f76:	4619      	mov	r1, r3
 8000f78:	4834      	ldr	r0, [pc, #208]	; (800104c <HAL_UART_MspInit+0x1a0>)
 8000f7a:	f000 fb0b 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f96:	2307      	movs	r3, #7
 8000f98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482b      	ldr	r0, [pc, #172]	; (8001050 <HAL_UART_MspInit+0x1a4>)
 8000fa4:	f000 faf6 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fa8:	e047      	b.n	800103a <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a29      	ldr	r2, [pc, #164]	; (8001054 <HAL_UART_MspInit+0x1a8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d142      	bne.n	800103a <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 fcf2 	bl	80029ac <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8000fce:	f7ff fed5 	bl	8000d7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_UART_MspInit+0x19c>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800100e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001028:	2307      	movs	r3, #7
 800102a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800102e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001032:	4619      	mov	r1, r3
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_UART_MspInit+0x1a4>)
 8001036:	f000 faad 	bl	8001594 <HAL_GPIO_Init>
}
 800103a:	bf00      	nop
 800103c:	37f0      	adds	r7, #240	; 0xf0
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40004400 	.word	0x40004400
 8001048:	58024400 	.word	0x58024400
 800104c:	58020000 	.word	0x58020000
 8001050:	58020c00 	.word	0x58020c00
 8001054:	40004800 	.word	0x40004800

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f942 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e00a      	b.n	80010d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010be:	f3af 8000 	nop.w
 80010c2:	4601      	mov	r1, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60ba      	str	r2, [r7, #8]
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf0      	blt.n	80010be <_read+0x12>
	}

return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e009      	b.n	800110c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe41 	bl	8000d88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf1      	blt.n	80010f8 <_write+0x12>
	}
	return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_close>:

int _close(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001146:	605a      	str	r2, [r3, #4]
	return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_isatty>:

int _isatty(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	return 1;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
	return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f005 f80c 	bl	80061d4 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24080000 	.word	0x24080000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	24000238 	.word	0x24000238
 80011f0:	24000250 	.word	0x24000250

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f8:	f7ff fa44 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011fe:	490d      	ldr	r1, [pc, #52]	; (8001234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001214:	4c0a      	ldr	r4, [pc, #40]	; (8001240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001222:	f004 ffdd 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff fac3 	bl	80007b0 <main>
  bx  lr
 800122a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800122c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001230:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001234:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001238:	0800725c 	.word	0x0800725c
  ldr r2, =_sbss
 800123c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001240:	24000250 	.word	0x24000250

08001244 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC3_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124e:	2003      	movs	r0, #3
 8001250:	f000 f96e 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001254:	f001 f9d4 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8001258:	4602      	mov	r2, r0
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_Init+0x68>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	4913      	ldr	r1, [pc, #76]	; (80012b4 <HAL_Init+0x6c>)
 8001266:	5ccb      	ldrb	r3, [r1, r3]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
 8001270:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_Init+0x68>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_Init+0x6c>)
 800127c:	5cd3      	ldrb	r3, [r2, r3]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <HAL_Init+0x70>)
 800128a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <HAL_Init+0x74>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001292:	200f      	movs	r0, #15
 8001294:	f000 f814 	bl	80012c0 <HAL_InitTick>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e002      	b.n	80012a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012a2:	f7ff fd83 	bl	8000dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	58024400 	.word	0x58024400
 80012b4:	0800717c 	.word	0x0800717c
 80012b8:	24000004 	.word	0x24000004
 80012bc:	24000000 	.word	0x24000000

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_InitTick+0x60>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e021      	b.n	8001318 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_InitTick+0x64>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_InitTick+0x60>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f945 	bl	800157a <HAL_SYSTICK_Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00e      	b.n	8001318 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d80a      	bhi.n	8001316 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f91d 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_InitTick+0x68>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2400000c 	.word	0x2400000c
 8001324:	24000000 	.word	0x24000000
 8001328:	24000008 	.word	0x24000008

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2400000c 	.word	0x2400000c
 8001350:	2400023c 	.word	0x2400023c

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	2400023c 	.word	0x2400023c

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffde 	bl	8001354 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2400000c 	.word	0x2400000c

080013b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetREVID+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0c1b      	lsrs	r3, r3, #16
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	5c001000 	.word	0x5c001000

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <__NVIC_SetPriorityGrouping+0x40>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x40>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	05fa0000 	.word	0x05fa0000

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff47 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff5e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff90 	bl	8001484 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5f 	bl	8001430 <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffb2 	bl	80014ec <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015a2:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <HAL_GPIO_Init+0x234>)
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015a6:	e194      	b.n	80018d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8186 	beq.w	80018cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x44>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 0201 	and.w	r2, r3, #1
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	69b9      	ldr	r1, [r7, #24]
 80016c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0203 	and.w	r2, r3, #3
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80e0 	beq.w	80018cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_GPIO_Init+0x238>)
 800170e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001712:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <HAL_GPIO_Init+0x238>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_GPIO_Init+0x238>)
 800171e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172a:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <HAL_GPIO_Init+0x23c>)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <HAL_GPIO_Init+0x240>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d052      	beq.n	80017fc <HAL_GPIO_Init+0x268>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <HAL_GPIO_Init+0x244>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d031      	beq.n	80017c2 <HAL_GPIO_Init+0x22e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <HAL_GPIO_Init+0x248>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d02b      	beq.n	80017be <HAL_GPIO_Init+0x22a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_GPIO_Init+0x24c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d025      	beq.n	80017ba <HAL_GPIO_Init+0x226>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_GPIO_Init+0x250>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01f      	beq.n	80017b6 <HAL_GPIO_Init+0x222>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <HAL_GPIO_Init+0x254>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0x21e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_GPIO_Init+0x258>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x21a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_GPIO_Init+0x25c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x216>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <HAL_GPIO_Init+0x260>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x212>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_GPIO_Init+0x264>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x20e>
 800179e:	2309      	movs	r3, #9
 80017a0:	e02d      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017a2:	230a      	movs	r3, #10
 80017a4:	e02b      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017a6:	2308      	movs	r3, #8
 80017a8:	e029      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e027      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017ae:	2306      	movs	r3, #6
 80017b0:	e025      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e023      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017b6:	2304      	movs	r3, #4
 80017b8:	e021      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017ba:	2303      	movs	r3, #3
 80017bc:	e01f      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017be:	2302      	movs	r3, #2
 80017c0:	e01d      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e01b      	b.n	80017fe <HAL_GPIO_Init+0x26a>
 80017c6:	bf00      	nop
 80017c8:	58000080 	.word	0x58000080
 80017cc:	58024400 	.word	0x58024400
 80017d0:	58000400 	.word	0x58000400
 80017d4:	58020000 	.word	0x58020000
 80017d8:	58020400 	.word	0x58020400
 80017dc:	58020800 	.word	0x58020800
 80017e0:	58020c00 	.word	0x58020c00
 80017e4:	58021000 	.word	0x58021000
 80017e8:	58021400 	.word	0x58021400
 80017ec:	58021800 	.word	0x58021800
 80017f0:	58021c00 	.word	0x58021c00
 80017f4:	58022000 	.word	0x58022000
 80017f8:	58022400 	.word	0x58022400
 80017fc:	2300      	movs	r3, #0
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	f002 0203 	and.w	r2, r2, #3
 8001804:	0092      	lsls	r2, r2, #2
 8001806:	4093      	lsls	r3, r2
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800180e:	4938      	ldr	r1, [pc, #224]	; (80018f0 <HAL_GPIO_Init+0x35c>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3301      	adds	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f ae63 	bne.w	80015a8 <HAL_GPIO_Init+0x14>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	3724      	adds	r7, #36	; 0x24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	58000400 	.word	0x58000400

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001910:	e003      	b.n	800191a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	619a      	str	r2, [r3, #24]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001930:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_HSEM_FastTake+0x2c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3320      	adds	r3, #32
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_HSEM_FastTake+0x30>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e000      	b.n	8001946 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	58026400 	.word	0x58026400
 8001958:	80000300 	.word	0x80000300

0800195c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001966:	4906      	ldr	r1, [pc, #24]	; (8001980 <HAL_HSEM_Release+0x24>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	58026400 	.word	0x58026400

08001984 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	2b06      	cmp	r3, #6
 8001996:	d00a      	beq.n	80019ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d001      	beq.n	80019aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e040      	b.n	8001a2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e03e      	b.n	8001a2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80019b6:	491f      	ldr	r1, [pc, #124]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019be:	f7ff fcc9 	bl	8001354 <HAL_GetTick>
 80019c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019c4:	e009      	b.n	80019da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019c6:	f7ff fcc5 	bl	8001354 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019d4:	d901      	bls.n	80019da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e028      	b.n	8001a2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e6:	d1ee      	bne.n	80019c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b1e      	cmp	r3, #30
 80019ec:	d008      	beq.n	8001a00 <HAL_PWREx_ConfigSupply+0x7c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b2e      	cmp	r3, #46	; 0x2e
 80019f2:	d005      	beq.n	8001a00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b1d      	cmp	r3, #29
 80019f8:	d002      	beq.n	8001a00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b2d      	cmp	r3, #45	; 0x2d
 80019fe:	d114      	bne.n	8001a2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a00:	f7ff fca8 	bl	8001354 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a06:	e009      	b.n	8001a1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a08:	f7ff fca4 	bl	8001354 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a16:	d901      	bls.n	8001a1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e007      	b.n	8001a2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d1ee      	bne.n	8001a08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	58024800 	.word	0x58024800

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f000 bc1d 	b.w	8002286 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8087 	beq.w	8001b68 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5a:	4b99      	ldr	r3, [pc, #612]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a64:	4b96      	ldr	r3, [pc, #600]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	2b10      	cmp	r3, #16
 8001a6e:	d007      	beq.n	8001a80 <HAL_RCC_OscConfig+0x48>
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	2b18      	cmp	r3, #24
 8001a74:	d110      	bne.n	8001a98 <HAL_RCC_OscConfig+0x60>
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d06c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x12e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d168      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e3f6      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x78>
 8001aa2:	4b87      	ldr	r3, [pc, #540]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a86      	ldr	r2, [pc, #536]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e02e      	b.n	8001b0e <HAL_RCC_OscConfig+0xd6>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x9a>
 8001ab8:	4b81      	ldr	r3, [pc, #516]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a80      	ldr	r2, [pc, #512]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b7e      	ldr	r3, [pc, #504]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7d      	ldr	r2, [pc, #500]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e01d      	b.n	8001b0e <HAL_RCC_OscConfig+0xd6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0xbe>
 8001adc:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a74      	ldr	r2, [pc, #464]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0xd6>
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a71      	ldr	r2, [pc, #452]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d013      	beq.n	8001b3e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff fc1d 	bl	8001354 <HAL_GetTick>
 8001b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fc19 	bl	8001354 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e3aa      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b30:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0xe6>
 8001b3c:	e014      	b.n	8001b68 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fc09 	bl	8001354 <HAL_GetTick>
 8001b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b46:	f7ff fc05 	bl	8001354 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	; 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e396      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x10e>
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80cb 	beq.w	8001d0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b76:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b80:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_RCC_OscConfig+0x164>
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b18      	cmp	r3, #24
 8001b90:	d156      	bne.n	8001c40 <HAL_RCC_OscConfig+0x208>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d151      	bne.n	8001c40 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x17c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e368      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bb4:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 0219 	bic.w	r2, r3, #25
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	493f      	ldr	r1, [pc, #252]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bc6:	f7ff fbc5 	bl	8001354 <HAL_GetTick>
 8001bca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bce:	f7ff fbc1 	bl	8001354 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e352      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	f7ff fbe2 	bl	80013b4 <HAL_GetREVID>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d817      	bhi.n	8001c2a <HAL_RCC_OscConfig+0x1f2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b40      	cmp	r3, #64	; 0x40
 8001c00:	d108      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1dc>
 8001c02:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c12:	e07b      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	031b      	lsls	r3, r3, #12
 8001c22:	4927      	ldr	r1, [pc, #156]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c28:	e070      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c3e:	e065      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d048      	beq.n	8001cda <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 0219 	bic.w	r2, r3, #25
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	491a      	ldr	r1, [pc, #104]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb7b 	bl	8001354 <HAL_GetTick>
 8001c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fb77 	bl	8001354 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e308      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	f7ff fb98 	bl	80013b4 <HAL_GetREVID>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d81a      	bhi.n	8001cc4 <HAL_RCC_OscConfig+0x28c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b40      	cmp	r3, #64	; 0x40
 8001c94:	d108      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x270>
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	6053      	str	r3, [r2, #4]
 8001ca6:	e031      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	031b      	lsls	r3, r3, #12
 8001cb6:	4902      	ldr	r1, [pc, #8]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e026      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
 8001cbe:	bf00      	nop
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	4b9a      	ldr	r3, [pc, #616]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4997      	ldr	r1, [pc, #604]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b95      	ldr	r3, [pc, #596]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fb35 	bl	8001354 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff fb31 	bl	8001354 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e2c2      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d00:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a9 	beq.w	8001e6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d24:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d007      	beq.n	8001d40 <HAL_RCC_OscConfig+0x308>
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b18      	cmp	r3, #24
 8001d34:	d13a      	bne.n	8001dac <HAL_RCC_OscConfig+0x374>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d135      	bne.n	8001dac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d40:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_OscConfig+0x320>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e296      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d58:	f7ff fb2c 	bl	80013b4 <HAL_GetREVID>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d817      	bhi.n	8001d96 <HAL_RCC_OscConfig+0x35e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d108      	bne.n	8001d80 <HAL_RCC_OscConfig+0x348>
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7e:	e075      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	069b      	lsls	r3, r3, #26
 8001d8e:	4968      	ldr	r1, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d94:	e06a      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d96:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	4962      	ldr	r1, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001daa:	e05f      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d042      	beq.n	8001e3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fac8 	bl	8001354 <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fac4 	bl	8001354 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e255      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dda:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de6:	f7ff fae5 	bl	80013b4 <HAL_GetREVID>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f241 0203 	movw	r2, #4099	; 0x1003
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d817      	bhi.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d108      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3d6>
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e0a:	6053      	str	r3, [r2, #4]
 8001e0c:	e02e      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	069b      	lsls	r3, r3, #26
 8001e1c:	4944      	ldr	r1, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
 8001e22:	e023      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	493f      	ldr	r1, [pc, #252]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e018      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff fa85 	bl	8001354 <HAL_GetTick>
 8001e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e4e:	f7ff fa81 	bl	8001354 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e212      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d036      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d019      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fa62 	bl	8001354 <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff fa5e 	bl	8001354 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1ef      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x45c>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fa48 	bl	8001354 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fa44 	bl	8001354 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1d5      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d039      	beq.n	8001f66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f06:	f7ff fa25 	bl	8001354 <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f0e:	f7ff fa21 	bl	8001354 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1b2      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4d6>
 8001f2c:	e01b      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
 8001f2e:	bf00      	nop
 8001f30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f34:	4b9b      	ldr	r3, [pc, #620]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a9a      	ldr	r2, [pc, #616]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f40:	f7ff fa08 	bl	8001354 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f48:	f7ff fa04 	bl	8001354 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e195      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f5a:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8081 	beq.w	8002076 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f74:	4b8c      	ldr	r3, [pc, #560]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a8b      	ldr	r2, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f80:	f7ff f9e8 	bl	8001354 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f88:	f7ff f9e4 	bl	8001354 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e175      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f9a:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <HAL_RCC_OscConfig+0x584>
 8001fae:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a7c      	ldr	r2, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	e02d      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x5a6>
 8001fc4:	4b77      	ldr	r3, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	4a76      	ldr	r2, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd0:	4b74      	ldr	r3, [pc, #464]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a73      	ldr	r2, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	f023 0304 	bic.w	r3, r3, #4
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c8>
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a6b      	ldr	r2, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a67      	ldr	r2, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a64      	ldr	r2, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff f998 	bl	8001354 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff f994 	bl	8001354 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e123      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203e:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCC_OscConfig+0x5f0>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f982 	bl	8001354 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff f97e 	bl	8001354 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e10d      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206a:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ee      	bne.n	8002054 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8102 	beq.w	8002284 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002080:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002088:	2b18      	cmp	r3, #24
 800208a:	f000 80bd 	beq.w	8002208 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b02      	cmp	r3, #2
 8002094:	f040 809e 	bne.w	80021d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a41      	ldr	r2, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800209e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f956 	bl	8001354 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f952 	bl	8001354 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0e3      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_OscConfig+0x774>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	430a      	orrs	r2, r1
 80020de:	4931      	ldr	r1, [pc, #196]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	628b      	str	r3, [r1, #40]	; 0x28
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	3b01      	subs	r3, #1
 80020ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	3b01      	subs	r3, #1
 80020f4:	025b      	lsls	r3, r3, #9
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	3b01      	subs	r3, #1
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002114:	4923      	ldr	r1, [pc, #140]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002116:	4313      	orrs	r3, r2
 8002118:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800212c:	4013      	ands	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002132:	00d2      	lsls	r2, r2, #3
 8002134:	491b      	ldr	r1, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f023 020c 	bic.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4917      	ldr	r1, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f023 0202 	bic.w	r2, r3, #2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	4912      	ldr	r1, [pc, #72]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff f8db 	bl	8001354 <HAL_GetTick>
 800219e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021a0:	e011      	b.n	80021c6 <HAL_RCC_OscConfig+0x78e>
 80021a2:	bf00      	nop
 80021a4:	58024400 	.word	0x58024400
 80021a8:	58024800 	.word	0x58024800
 80021ac:	fffffc0c 	.word	0xfffffc0c
 80021b0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff f8ce 	bl	8001354 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e05f      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x77c>
 80021d2:	e057      	b.n	8002284 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f8b8 	bl	8001354 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f8b4 	bl	8001354 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e045      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x7b0>
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_OscConfig+0x858>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b01      	cmp	r3, #1
 800221a:	d031      	beq.n	8002280 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0203 	and.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d12a      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d122      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d11a      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0a5b      	lsrs	r3, r3, #9
 800224e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d111      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d108      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	0e1b      	lsrs	r3, r3, #24
 8002272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	58024400 	.word	0x58024400

08002294 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e19c      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a8:	4b8a      	ldr	r3, [pc, #552]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d910      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b87      	ldr	r3, [pc, #540]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 020f 	bic.w	r2, r3, #15
 80022be:	4985      	ldr	r1, [pc, #532]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e184      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d908      	bls.n	8002306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	4975      	ldr	r1, [pc, #468]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002302:	4313      	orrs	r3, r2
 8002304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	4b70      	ldr	r3, [pc, #448]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800231e:	429a      	cmp	r2, r3
 8002320:	d908      	bls.n	8002334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002322:	4b6d      	ldr	r3, [pc, #436]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	496a      	ldr	r1, [pc, #424]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002330:	4313      	orrs	r3, r2
 8002332:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d010      	beq.n	8002362 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800234c:	429a      	cmp	r2, r3
 800234e:	d908      	bls.n	8002362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002350:	4b61      	ldr	r3, [pc, #388]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	495e      	ldr	r1, [pc, #376]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 800235e:	4313      	orrs	r3, r2
 8002360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800237a:	429a      	cmp	r2, r3
 800237c:	d908      	bls.n	8002390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4953      	ldr	r1, [pc, #332]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 800238c:	4313      	orrs	r3, r2
 800238e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d010      	beq.n	80023be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d908      	bls.n	80023be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f023 020f 	bic.w	r2, r3, #15
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4947      	ldr	r1, [pc, #284]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d055      	beq.n	8002476 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4940      	ldr	r1, [pc, #256]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e4:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d121      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0f6      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d115      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0ea      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0de      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0d6      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f023 0207 	bic.w	r2, r3, #7
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4925      	ldr	r1, [pc, #148]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002442:	4313      	orrs	r3, r2
 8002444:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe ff85 	bl	8001354 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244c:	e00a      	b.n	8002464 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244e:	f7fe ff81 	bl	8001354 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0be      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	429a      	cmp	r2, r3
 8002474:	d1eb      	bne.n	800244e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d010      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	429a      	cmp	r2, r3
 8002490:	d208      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f023 020f 	bic.w	r2, r3, #15
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	490e      	ldr	r1, [pc, #56]	; (80024d8 <HAL_RCC_ClockConfig+0x244>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d214      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	4906      	ldr	r1, [pc, #24]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCC_ClockConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e086      	b.n	80025e2 <HAL_RCC_ClockConfig+0x34e>
 80024d4:	52002000 	.word	0x52002000
 80024d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d208      	bcs.n	800250a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024f8:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	4939      	ldr	r1, [pc, #228]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002506:	4313      	orrs	r3, r2
 8002508:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002522:	429a      	cmp	r2, r3
 8002524:	d208      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	492e      	ldr	r1, [pc, #184]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002534:	4313      	orrs	r3, r2
 8002536:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002550:	429a      	cmp	r2, r3
 8002552:	d208      	bcs.n	8002566 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002562:	4313      	orrs	r3, r2
 8002564:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800257e:	429a      	cmp	r2, r3
 8002580:	d208      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4917      	ldr	r1, [pc, #92]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 8002590:	4313      	orrs	r3, r2
 8002592:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002594:	f000 f834 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	4912      	ldr	r1, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x35c>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_RCC_ClockConfig+0x358>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <HAL_RCC_ClockConfig+0x35c>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x360>)
 80025ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x364>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x368>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fe72 	bl	80012c0 <HAL_InitTick>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	58024400 	.word	0x58024400
 80025f0:	0800717c 	.word	0x0800717c
 80025f4:	24000004 	.word	0x24000004
 80025f8:	24000000 	.word	0x24000000
 80025fc:	24000008 	.word	0x24000008

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002606:	4bb3      	ldr	r3, [pc, #716]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800260e:	2b18      	cmp	r3, #24
 8002610:	f200 8155 	bhi.w	80028be <HAL_RCC_GetSysClockFreq+0x2be>
 8002614:	a201      	add	r2, pc, #4	; (adr r2, 800261c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	08002681 	.word	0x08002681
 8002620:	080028bf 	.word	0x080028bf
 8002624:	080028bf 	.word	0x080028bf
 8002628:	080028bf 	.word	0x080028bf
 800262c:	080028bf 	.word	0x080028bf
 8002630:	080028bf 	.word	0x080028bf
 8002634:	080028bf 	.word	0x080028bf
 8002638:	080028bf 	.word	0x080028bf
 800263c:	080026a7 	.word	0x080026a7
 8002640:	080028bf 	.word	0x080028bf
 8002644:	080028bf 	.word	0x080028bf
 8002648:	080028bf 	.word	0x080028bf
 800264c:	080028bf 	.word	0x080028bf
 8002650:	080028bf 	.word	0x080028bf
 8002654:	080028bf 	.word	0x080028bf
 8002658:	080028bf 	.word	0x080028bf
 800265c:	080026ad 	.word	0x080026ad
 8002660:	080028bf 	.word	0x080028bf
 8002664:	080028bf 	.word	0x080028bf
 8002668:	080028bf 	.word	0x080028bf
 800266c:	080028bf 	.word	0x080028bf
 8002670:	080028bf 	.word	0x080028bf
 8002674:	080028bf 	.word	0x080028bf
 8002678:	080028bf 	.word	0x080028bf
 800267c:	080026b3 	.word	0x080026b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002680:	4b94      	ldr	r3, [pc, #592]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800268c:	4b91      	ldr	r3, [pc, #580]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	08db      	lsrs	r3, r3, #3
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	4a90      	ldr	r2, [pc, #576]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800269e:	e111      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026a0:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026a2:	61bb      	str	r3, [r7, #24]
    break;
 80026a4:	e10e      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80026a6:	4b8d      	ldr	r3, [pc, #564]	; (80028dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026a8:	61bb      	str	r3, [r7, #24]
    break;
 80026aa:	e10b      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80026ac:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026ae:	61bb      	str	r3, [r7, #24]
    break;
 80026b0:	e108      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026b2:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026bc:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026c8:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026d2:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	08db      	lsrs	r3, r3, #3
 80026d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80e1 	beq.w	80028b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f000 8083 	beq.w	8002804 <HAL_RCC_GetSysClockFreq+0x204>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b02      	cmp	r3, #2
 8002702:	f200 80a1 	bhi.w	8002848 <HAL_RCC_GetSysClockFreq+0x248>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x114>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d056      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002712:	e099      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02d      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	4a6b      	ldr	r2, [pc, #428]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274a:	4b62      	ldr	r3, [pc, #392]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275a:	ed97 6a02 	vldr	s12, [r7, #8]
 800275e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800276e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800277a:	e087      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002786:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800278a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800279e:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027be:	e065      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80027ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002802:	e043      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002826:	ed97 6a02 	vldr	s12, [r7, #8]
 800282a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800282e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800283a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002846:	e021      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002852:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8002856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286a:	ed97 6a02 	vldr	s12, [r7, #8]
 800286e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800287a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800287e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800288a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	0a5b      	lsrs	r3, r3, #9
 8002892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002896:	3301      	adds	r3, #1
 8002898:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80028a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028b0:	ee17 3a90 	vmov	r3, s15
 80028b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    break;
 80028bc:	e002      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028c0:	61bb      	str	r3, [r7, #24]
    break;
 80028c2:	bf00      	nop
  }

  return sysclockfreq;
 80028c4:	69bb      	ldr	r3, [r7, #24]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	58024400 	.word	0x58024400
 80028d8:	03d09000 	.word	0x03d09000
 80028dc:	003d0900 	.word	0x003d0900
 80028e0:	007a1200 	.word	0x007a1200
 80028e4:	46000000 	.word	0x46000000
 80028e8:	4c742400 	.word	0x4c742400
 80028ec:	4a742400 	.word	0x4a742400
 80028f0:	4af42400 	.word	0x4af42400

080028f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028fa:	f7ff fe81 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80028fe:	4602      	mov	r2, r0
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_GetHCLKFreq+0x50>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	490f      	ldr	r1, [pc, #60]	; (8002948 <HAL_RCC_GetHCLKFreq+0x54>)
 800290c:	5ccb      	ldrb	r3, [r1, r3]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_RCC_GetHCLKFreq+0x50>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	4a09      	ldr	r2, [pc, #36]	; (8002948 <HAL_RCC_GetHCLKFreq+0x54>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	fa22 f303 	lsr.w	r3, r2, r3
 800292e:	4a07      	ldr	r2, [pc, #28]	; (800294c <HAL_RCC_GetHCLKFreq+0x58>)
 8002930:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002932:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCC_GetHCLKFreq+0x58>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	58024400 	.word	0x58024400
 8002948:	0800717c 	.word	0x0800717c
 800294c:	24000004 	.word	0x24000004
 8002950:	24000000 	.word	0x24000000

08002954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002958:	f7ff ffcc 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4904      	ldr	r1, [pc, #16]	; (800297c <HAL_RCC_GetPCLK1Freq+0x28>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	58024400 	.word	0x58024400
 800297c:	0800717c 	.word	0x0800717c

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002984:	f7ff ffb6 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4904      	ldr	r1, [pc, #16]	; (80029a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	58024400 	.word	0x58024400
 80029a8:	0800717c 	.word	0x0800717c

080029ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b8:	2300      	movs	r3, #0
 80029ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d03f      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029d0:	d02a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029d6:	d824      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029dc:	d018      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029e2:	d81e      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ec:	d007      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029ee:	e018      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f0:	4ba3      	ldr	r3, [pc, #652]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	4aa2      	ldr	r2, [pc, #648]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029fc:	e015      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2102      	movs	r1, #2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f9d5 	bl	8003db4 <RCCEx_PLL2_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a0e:	e00c      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3324      	adds	r3, #36	; 0x24
 8002a14:	2102      	movs	r1, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fa7e 	bl	8003f18 <RCCEx_PLL3_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a20:	e003      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	75fb      	strb	r3, [r7, #23]
      break;
 8002a26:	e000      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a30:	4b93      	ldr	r3, [pc, #588]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3c:	4990      	ldr	r1, [pc, #576]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	650b      	str	r3, [r1, #80]	; 0x50
 8002a42:	e001      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d03d      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d826      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a79 	.word	0x08002a79
 8002a68:	08002a87 	.word	0x08002a87
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002ab1 	.word	0x08002ab1
 8002a74:	08002ab1 	.word	0x08002ab1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4b81      	ldr	r3, [pc, #516]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	4a80      	ldr	r2, [pc, #512]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a84:	e015      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 f991 	bl	8003db4 <RCCEx_PLL2_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a96:	e00c      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3324      	adds	r3, #36	; 0x24
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fa3a 	bl	8003f18 <RCCEx_PLL3_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002aa8:	e003      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
      break;
 8002aae:	e000      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab8:	4b71      	ldr	r3, [pc, #452]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	f023 0207 	bic.w	r2, r3, #7
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	496e      	ldr	r1, [pc, #440]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	650b      	str	r3, [r1, #80]	; 0x50
 8002aca:	e001      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d042      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae4:	d02b      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d825      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002aec:	2bc0      	cmp	r3, #192	; 0xc0
 8002aee:	d028      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002af0:	2bc0      	cmp	r3, #192	; 0xc0
 8002af2:	d821      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d016      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d81d      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002b00:	2b40      	cmp	r3, #64	; 0x40
 8002b02:	d007      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002b04:	e018      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b06:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4a5d      	ldr	r2, [pc, #372]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b12:	e017      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 f94a 	bl	8003db4 <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b24:	e00e      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3324      	adds	r3, #36	; 0x24
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 f9f3 	bl	8003f18 <RCCEx_PLL3_Config>
 8002b32:	4603      	mov	r3, r0
 8002b34:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b3c:	e002      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	494a      	ldr	r1, [pc, #296]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	650b      	str	r3, [r1, #80]	; 0x50
 8002b5c:	e001      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d049      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b78:	d030      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b7e:	d82a      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b84:	d02c      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b8a:	d824      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b90:	d018      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b96:	d81e      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba0:	d007      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002ba2:	e018      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	4a35      	ldr	r2, [pc, #212]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bb0:	e017      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 f8fb 	bl	8003db4 <RCCEx_PLL2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bc2:	e00e      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3324      	adds	r3, #36	; 0x24
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 f9a4 	bl	8003f18 <RCCEx_PLL3_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bd4:	e005      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002bdc:	bf00      	nop
 8002bde:	e000      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bf6:	4922      	ldr	r1, [pc, #136]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	658b      	str	r3, [r1, #88]	; 0x58
 8002bfc:	e001      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d04b      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c18:	d030      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c1e:	d82a      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c24:	d02e      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002c26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c2a:	d824      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c30:	d018      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c36:	d81e      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c40:	d007      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002c42:	e018      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c50:	e019      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 f8ab 	bl	8003db4 <RCCEx_PLL2_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c62:	e010      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 f954 	bl	8003f18 <RCCEx_PLL3_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c74:	e007      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7a:	e004      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002c7c:	bf00      	nop
 8002c7e:	e002      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002c80:	58024400 	.word	0x58024400
      break;
 8002c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c8c:	4b99      	ldr	r3, [pc, #612]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c9a:	4996      	ldr	r1, [pc, #600]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	658b      	str	r3, [r1, #88]	; 0x58
 8002ca0:	e001      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d032      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	2b30      	cmp	r3, #48	; 0x30
 8002cb8:	d01c      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002cba:	2b30      	cmp	r3, #48	; 0x30
 8002cbc:	d817      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d00c      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d813      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d10f      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cce:	4b89      	ldr	r3, [pc, #548]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	4a88      	ldr	r2, [pc, #544]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cda:	e00e      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 f866 	bl	8003db4 <RCCEx_PLL2_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002cec:	e005      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cf4:	bf00      	nop
 8002cf6:	e000      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d00:	4b7c      	ldr	r3, [pc, #496]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0c:	4979      	ldr	r1, [pc, #484]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d12:	e001      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d047      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2c:	d030      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d32:	d82a      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d38:	d02c      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d3e:	d824      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d44:	d018      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	d81e      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d007      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002d56:	e018      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d58:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	4a65      	ldr	r2, [pc, #404]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d64:	e017      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 f821 	bl	8003db4 <RCCEx_PLL2_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d76:	e00e      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3324      	adds	r3, #36	; 0x24
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 f8ca 	bl	8003f18 <RCCEx_PLL3_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d88:	e005      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d8e:	e002      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	4952      	ldr	r1, [pc, #328]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	650b      	str	r3, [r1, #80]	; 0x50
 8002dae:	e001      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d049      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc8:	d02e      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dce:	d828      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dd4:	d02a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dda:	d822      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ddc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002de0:	d026      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002de2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002de6:	d81c      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dec:	d010      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002df2:	d816      	bhi.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01d      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d111      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 ffd5 	bl	8003db4 <RCCEx_PLL2_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e0e:	e012      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3324      	adds	r3, #36	; 0x24
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 f87e 	bl	8003f18 <RCCEx_PLL3_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e20:	e009      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]
      break;
 8002e26:	e006      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e28:	bf00      	nop
 8002e2a:	e004      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e2c:	bf00      	nop
 8002e2e:	e002      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	492a      	ldr	r1, [pc, #168]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	650b      	str	r3, [r1, #80]	; 0x50
 8002e4e:	e001      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d04d      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e6a:	d02e      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e70:	d828      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d02a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d822      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e82:	d026      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002e84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e88:	d81c      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e94:	d816      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d01d      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9e:	d111      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 ff84 	bl	8003db4 <RCCEx_PLL2_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002eb0:	e012      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3324      	adds	r3, #36	; 0x24
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 f82d 	bl	8003f18 <RCCEx_PLL3_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ec2:	e009      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec8:	e006      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002eec:	4901      	ldr	r1, [pc, #4]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ef2:	e003      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02f      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f10:	d00e      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f16:	d814      	bhi.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f20:	d10f      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f22:	4baf      	ldr	r3, [pc, #700]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	4aae      	ldr	r2, [pc, #696]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f2e:	e00c      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ff3c 	bl	8003db4 <RCCEx_PLL2_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f40:	e003      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
      break;
 8002f46:	e000      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f50:	4ba3      	ldr	r3, [pc, #652]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5c:	49a0      	ldr	r1, [pc, #640]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	650b      	str	r3, [r1, #80]	; 0x50
 8002f62:	e001      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d032      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d81b      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fbb 	.word	0x08002fbb
 8002f88:	08002f95 	.word	0x08002f95
 8002f8c:	08002fa3 	.word	0x08002fa3
 8002f90:	08002fbb 	.word	0x08002fbb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f94:	4b92      	ldr	r3, [pc, #584]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	4a91      	ldr	r2, [pc, #580]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002fa0:	e00c      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 ff03 	bl	8003db4 <RCCEx_PLL2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002fb2:	e003      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fc2:	4b87      	ldr	r3, [pc, #540]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4984      	ldr	r1, [pc, #528]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002fd4:	e001      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8086 	beq.w	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a7d      	ldr	r2, [pc, #500]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe f9ae 	bl	8001354 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ffa:	e009      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffc:	f7fe f9aa 	bl	8001354 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d902      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	75fb      	strb	r3, [r7, #23]
        break;
 800300e:	e005      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003010:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ef      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d166      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003022:	4b6f      	ldr	r3, [pc, #444]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800302c:	4053      	eors	r3, r2
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	2b00      	cmp	r3, #0
 8003034:	d013      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003036:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003040:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a66      	ldr	r2, [pc, #408]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003058:	4a61      	ldr	r2, [pc, #388]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003068:	d115      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fe f973 	bl	8001354 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003070:	e00b      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe f96f 	bl	8001354 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d902      	bls.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	75fb      	strb	r3, [r7, #23]
            break;
 8003088:	e005      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800308a:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0ed      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d126      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030aa:	d10d      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030ba:	0919      	lsrs	r1, r3, #4
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80030be:	400b      	ands	r3, r1
 80030c0:	4947      	ldr	r1, [pc, #284]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	610b      	str	r3, [r1, #16]
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80030c8:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	4a44      	ldr	r2, [pc, #272]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030d2:	6113      	str	r3, [r2, #16]
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	493f      	ldr	r1, [pc, #252]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	670b      	str	r3, [r1, #112]	; 0x70
 80030e8:	e004      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	75bb      	strb	r3, [r7, #22]
 80030ee:	e001      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8085 	beq.w	800320c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003106:	2b28      	cmp	r3, #40	; 0x28
 8003108:	d866      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	080031ed 	.word	0x080031ed
 8003114:	080031d9 	.word	0x080031d9
 8003118:	080031d9 	.word	0x080031d9
 800311c:	080031d9 	.word	0x080031d9
 8003120:	080031d9 	.word	0x080031d9
 8003124:	080031d9 	.word	0x080031d9
 8003128:	080031d9 	.word	0x080031d9
 800312c:	080031d9 	.word	0x080031d9
 8003130:	080031b5 	.word	0x080031b5
 8003134:	080031d9 	.word	0x080031d9
 8003138:	080031d9 	.word	0x080031d9
 800313c:	080031d9 	.word	0x080031d9
 8003140:	080031d9 	.word	0x080031d9
 8003144:	080031d9 	.word	0x080031d9
 8003148:	080031d9 	.word	0x080031d9
 800314c:	080031d9 	.word	0x080031d9
 8003150:	080031c7 	.word	0x080031c7
 8003154:	080031d9 	.word	0x080031d9
 8003158:	080031d9 	.word	0x080031d9
 800315c:	080031d9 	.word	0x080031d9
 8003160:	080031d9 	.word	0x080031d9
 8003164:	080031d9 	.word	0x080031d9
 8003168:	080031d9 	.word	0x080031d9
 800316c:	080031d9 	.word	0x080031d9
 8003170:	080031ed 	.word	0x080031ed
 8003174:	080031d9 	.word	0x080031d9
 8003178:	080031d9 	.word	0x080031d9
 800317c:	080031d9 	.word	0x080031d9
 8003180:	080031d9 	.word	0x080031d9
 8003184:	080031d9 	.word	0x080031d9
 8003188:	080031d9 	.word	0x080031d9
 800318c:	080031d9 	.word	0x080031d9
 8003190:	080031ed 	.word	0x080031ed
 8003194:	080031d9 	.word	0x080031d9
 8003198:	080031d9 	.word	0x080031d9
 800319c:	080031d9 	.word	0x080031d9
 80031a0:	080031d9 	.word	0x080031d9
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080031d9 	.word	0x080031d9
 80031ac:	080031d9 	.word	0x080031d9
 80031b0:	080031ed 	.word	0x080031ed
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fdfa 	bl	8003db4 <RCCEx_PLL2_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031c4:	e013      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3324      	adds	r3, #36	; 0x24
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fea3 	bl	8003f18 <RCCEx_PLL3_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031d6:	e00a      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
      break;
 80031dc:	e007      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58024800 	.word	0x58024800
 80031e8:	00ffffcf 	.word	0x00ffffcf
      break;
 80031ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031f4:	4b96      	ldr	r3, [pc, #600]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003200:	4993      	ldr	r1, [pc, #588]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	654b      	str	r3, [r1, #84]	; 0x54
 8003206:	e001      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d038      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321c:	2b05      	cmp	r3, #5
 800321e:	d821      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800326b 	.word	0x0800326b
 800322c:	08003241 	.word	0x08003241
 8003230:	08003253 	.word	0x08003253
 8003234:	0800326b 	.word	0x0800326b
 8003238:	0800326b 	.word	0x0800326b
 800323c:	0800326b 	.word	0x0800326b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fdb4 	bl	8003db4 <RCCEx_PLL2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003250:	e00c      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3324      	adds	r3, #36	; 0x24
 8003256:	2101      	movs	r1, #1
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fe5d 	bl	8003f18 <RCCEx_PLL3_Config>
 800325e:	4603      	mov	r3, r0
 8003260:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003262:	e003      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
      break;
 8003268:	e000      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800326a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003272:	4b77      	ldr	r3, [pc, #476]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f023 0207 	bic.w	r2, r3, #7
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	4974      	ldr	r1, [pc, #464]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003280:	4313      	orrs	r3, r2
 8003282:	654b      	str	r3, [r1, #84]	; 0x54
 8003284:	e001      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
 8003288:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	2b05      	cmp	r3, #5
 800329e:	d821      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032eb 	.word	0x080032eb
 80032ac:	080032c1 	.word	0x080032c1
 80032b0:	080032d3 	.word	0x080032d3
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032eb 	.word	0x080032eb
 80032bc:	080032eb 	.word	0x080032eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fd74 	bl	8003db4 <RCCEx_PLL2_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032d0:	e00c      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3324      	adds	r3, #36	; 0x24
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fe1d 	bl	8003f18 <RCCEx_PLL3_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032e2:	e003      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
      break;
 80032e8:	e000      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80032ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f2:	4b57      	ldr	r3, [pc, #348]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	f023 0207 	bic.w	r2, r3, #7
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	4953      	ldr	r1, [pc, #332]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003302:	4313      	orrs	r3, r2
 8003304:	658b      	str	r3, [r1, #88]	; 0x58
 8003306:	e001      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d04b      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003322:	d02e      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003328:	d828      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d02a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d822      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800333a:	d026      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800333c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003340:	d81c      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003346:	d010      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800334c:	d816      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01d      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003356:	d111      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fd28 	bl	8003db4 <RCCEx_PLL2_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003368:	e012      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3324      	adds	r3, #36	; 0x24
 800336e:	2102      	movs	r1, #2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fdd1 	bl	8003f18 <RCCEx_PLL3_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800337a:	e009      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
      break;
 8003380:	e006      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003382:	bf00      	nop
 8003384:	e004      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800338e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003396:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a4:	492a      	ldr	r1, [pc, #168]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	654b      	str	r3, [r1, #84]	; 0x54
 80033aa:	e001      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d04d      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033c6:	d02e      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80033c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033cc:	d828      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d2:	d02a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d822      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033de:	d026      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80033e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033e4:	d81c      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ea:	d010      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80033ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f0:	d816      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01d      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d111      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fcd6 	bl	8003db4 <RCCEx_PLL2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800340c:	e012      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3324      	adds	r3, #36	; 0x24
 8003412:	2102      	movs	r1, #2
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fd7f 	bl	8003f18 <RCCEx_PLL3_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800341e:	e009      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
      break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003426:	bf00      	nop
 8003428:	e004      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800342a:	bf00      	nop
 800342c:	e002      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003448:	4901      	ldr	r1, [pc, #4]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	658b      	str	r3, [r1, #88]	; 0x58
 800344e:	e003      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b00      	cmp	r3, #0
 8003462:	d04b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800346a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800346e:	d02e      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003470:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003474:	d828      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347a:	d02a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800347c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003480:	d822      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003482:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003486:	d026      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003488:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800348c:	d81c      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800348e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003492:	d010      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003498:	d816      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01d      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	d111      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fc82 	bl	8003db4 <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034b4:	e012      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3324      	adds	r3, #36	; 0x24
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fd2b 	bl	8003f18 <RCCEx_PLL3_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80034c6:	e009      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	75fb      	strb	r3, [r7, #23]
      break;
 80034cc:	e006      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034ce:	bf00      	nop
 80034d0:	e004      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80034da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034e2:	4b9d      	ldr	r3, [pc, #628]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f0:	4999      	ldr	r1, [pc, #612]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	658b      	str	r3, [r1, #88]	; 0x58
 80034f6:	e001      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003512:	d10a      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	2102      	movs	r1, #2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fcfc 	bl	8003f18 <RCCEx_PLL3_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800352a:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003538:	4987      	ldr	r1, [pc, #540]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800353a:	4313      	orrs	r3, r2
 800353c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003554:	d10a      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3324      	adds	r3, #36	; 0x24
 800355a:	2102      	movs	r1, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fcdb 	bl	8003f18 <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800356c:	4b7a      	ldr	r3, [pc, #488]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	4977      	ldr	r1, [pc, #476]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800357c:	4313      	orrs	r3, r2
 800357e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d034      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003596:	d01d      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800359c:	d817      	bhi.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d009      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80035a8:	e011      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fbff 	bl	8003db4 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035ba:	e00c      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3324      	adds	r3, #36	; 0x24
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fca8 	bl	8003f18 <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80035cc:	e003      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
      break;
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80035d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035dc:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035ea:	495b      	ldr	r1, [pc, #364]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	658b      	str	r3, [r1, #88]	; 0x58
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d033      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360c:	d01c      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800360e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003612:	d816      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003618:	d003      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800361a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361e:	d007      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003620:	e00f      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4b4d      	ldr	r3, [pc, #308]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4a4c      	ldr	r2, [pc, #304]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800362e:	e00c      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3324      	adds	r3, #36	; 0x24
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fc6e 	bl	8003f18 <RCCEx_PLL3_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
      break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365e:	493e      	ldr	r1, [pc, #248]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003660:	4313      	orrs	r3, r2
 8003662:	654b      	str	r3, [r1, #84]	; 0x54
 8003664:	e001      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d029      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003682:	d007      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003684:	e00f      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003686:	4b34      	ldr	r3, [pc, #208]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	4a33      	ldr	r2, [pc, #204]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800368c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003692:	e00b      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fb8a 	bl	8003db4 <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80036a4:	e002      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
      break;
 80036aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036b2:	4b29      	ldr	r3, [pc, #164]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	4926      	ldr	r1, [pc, #152]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036c4:	e001      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3324      	adds	r3, #36	; 0x24
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fc1b 	bl	8003f18 <RCCEx_PLL3_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d033      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003700:	d017      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003706:	d811      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370c:	d013      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800370e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003712:	d80b      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371c:	d106      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003728:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800372a:	e007      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e004      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003732:	bf00      	nop
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800373a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800374e:	4902      	ldr	r1, [pc, #8]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003750:	4313      	orrs	r3, r2
 8003752:	654b      	str	r3, [r1, #84]	; 0x54
 8003754:	e004      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800376c:	4b31      	ldr	r3, [pc, #196]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	492e      	ldr	r1, [pc, #184]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800377a:	4313      	orrs	r3, r2
 800377c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800378a:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003798:	4926      	ldr	r1, [pc, #152]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800379a:	4313      	orrs	r3, r2
 800379c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037b6:	491f      	ldr	r1, [pc, #124]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037d2:	6113      	str	r3, [r2, #16]
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037de:	4915      	ldr	r1, [pc, #84]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da08      	bge.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	490e      	ldr	r1, [pc, #56]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	4906      	ldr	r1, [pc, #24]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800381a:	4313      	orrs	r3, r2
 800381c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800381e:	7dbb      	ldrb	r3, [r7, #22]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	58024400 	.word	0x58024400

08003838 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800383c:	f7ff f85a 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4904      	ldr	r1, [pc, #16]	; (8003860 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	58024400 	.word	0x58024400
 8003860:	0800717c 	.word	0x0800717c

08003864 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	; 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800386c:	4ba1      	ldr	r3, [pc, #644]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003876:	4b9f      	ldr	r3, [pc, #636]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	0b1b      	lsrs	r3, r3, #12
 800387c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003880:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003882:	4b9c      	ldr	r3, [pc, #624]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800388e:	4b99      	ldr	r3, [pc, #612]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003892:	08db      	lsrs	r3, r3, #3
 8003894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8111 	beq.w	8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f000 8083 	beq.w	80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	f200 80a1 	bhi.w	8003a04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d056      	beq.n	800397c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038ce:	e099      	b.n	8003a04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d0:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02d      	beq.n	8003938 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038dc:	4b85      	ldr	r3, [pc, #532]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	4a84      	ldr	r2, [pc, #528]	; (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003906:	4b7b      	ldr	r3, [pc, #492]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003916:	ed97 6a03 	vldr	s12, [r7, #12]
 800391a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800391e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800392a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003932:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003936:	e087      	b.n	8003a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394a:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395a:	ed97 6a03 	vldr	s12, [r7, #12]
 800395e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800397a:	e065      	b.n	8003a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800398a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398e:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399e:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039be:	e043      	b.n	8003a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d2:	4b48      	ldr	r3, [pc, #288]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a02:	e021      	b.n	8003a48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	0a5b      	lsrs	r3, r3, #9
 8003a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6e:	ee17 2a90 	vmov	r2, s15
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a76:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9c:	ee17 2a90 	vmov	r2, s15
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	0e1b      	lsrs	r3, r3, #24
 8003aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aca:	ee17 2a90 	vmov	r2, s15
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
}
 8003ae6:	bf00      	nop
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	58024400 	.word	0x58024400
 8003af8:	03d09000 	.word	0x03d09000
 8003afc:	46000000 	.word	0x46000000
 8003b00:	4c742400 	.word	0x4c742400
 8003b04:	4a742400 	.word	0x4a742400
 8003b08:	4af42400 	.word	0x4af42400

08003b0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	; 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b14:	4ba1      	ldr	r3, [pc, #644]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003b1e:	4b9f      	ldr	r3, [pc, #636]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	0d1b      	lsrs	r3, r3, #20
 8003b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b2a:	4b9c      	ldr	r3, [pc, #624]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003b36:	4b99      	ldr	r3, [pc, #612]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	08db      	lsrs	r3, r3, #3
 8003b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8111 	beq.w	8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	f000 8083 	beq.w	8003c68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	f200 80a1 	bhi.w	8003cac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d056      	beq.n	8003c24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b76:	e099      	b.n	8003cac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b78:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d02d      	beq.n	8003be0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b84:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	4a84      	ldr	r2, [pc, #528]	; (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
 8003b94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bae:	4b7b      	ldr	r3, [pc, #492]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003bde:	e087      	b.n	8003cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c22:	e065      	b.n	8003cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c36:	4b59      	ldr	r3, [pc, #356]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c66:	e043      	b.n	8003cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7a:	4b48      	ldr	r3, [pc, #288]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003caa:	e021      	b.n	8003cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cbe:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003cf0:	4b2a      	ldr	r3, [pc, #168]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	0a5b      	lsrs	r3, r3, #9
 8003cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d16:	ee17 2a90 	vmov	r2, s15
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003d1e:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d28:	ee07 3a90 	vmov	s15, r3
 8003d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d44:	ee17 2a90 	vmov	r2, s15
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	0e1b      	lsrs	r3, r3, #24
 8003d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d72:	ee17 2a90 	vmov	r2, s15
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d7a:	e008      	b.n	8003d8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
}
 8003d8e:	bf00      	nop
 8003d90:	3724      	adds	r7, #36	; 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	03d09000 	.word	0x03d09000
 8003da4:	46000000 	.word	0x46000000
 8003da8:	4c742400 	.word	0x4c742400
 8003dac:	4a742400 	.word	0x4a742400
 8003db0:	4af42400 	.word	0x4af42400

08003db4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dc2:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d101      	bne.n	8003dd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e099      	b.n	8003f06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003dd2:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a4e      	ldr	r2, [pc, #312]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dde:	f7fd fab9 	bl	8001354 <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003de6:	f7fd fab5 	bl	8001354 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e086      	b.n	8003f06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003df8:	4b45      	ldr	r3, [pc, #276]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e04:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	031b      	lsls	r3, r3, #12
 8003e12:	493f      	ldr	r1, [pc, #252]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	628b      	str	r3, [r1, #40]	; 0x28
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	025b      	lsls	r3, r3, #9
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	061b      	lsls	r3, r3, #24
 8003e44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e48:	4931      	ldr	r1, [pc, #196]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e4e:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	492d      	ldr	r1, [pc, #180]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	f023 0220 	bic.w	r2, r3, #32
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	4928      	ldr	r1, [pc, #160]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e72:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	f023 0310 	bic.w	r3, r3, #16
 8003e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <RCCEx_PLL2_Config+0x160>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	69d2      	ldr	r2, [r2, #28]
 8003e8a:	00d2      	lsls	r2, r2, #3
 8003e8c:	4920      	ldr	r1, [pc, #128]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e92:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	4a1e      	ldr	r2, [pc, #120]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003e98:	f043 0310 	orr.w	r3, r3, #16
 8003e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003eb0:	e00f      	b.n	8003ed2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d106      	bne.n	8003ec6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ec4:	e005      	b.n	8003ed2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ede:	f7fd fa39 	bl	8001354 <HAL_GetTick>
 8003ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ee4:	e008      	b.n	8003ef8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ee6:	f7fd fa35 	bl	8001354 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e006      	b.n	8003f06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <RCCEx_PLL2_Config+0x15c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	58024400 	.word	0x58024400
 8003f14:	ffff0007 	.word	0xffff0007

08003f18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f26:	4b53      	ldr	r3, [pc, #332]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d101      	bne.n	8003f36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e099      	b.n	800406a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f36:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f42:	f7fd fa07 	bl	8001354 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f4a:	f7fd fa03 	bl	8001354 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e086      	b.n	800406a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f5c:	4b45      	ldr	r3, [pc, #276]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	051b      	lsls	r3, r3, #20
 8003f76:	493f      	ldr	r1, [pc, #252]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	025b      	lsls	r3, r3, #9
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fac:	4931      	ldr	r1, [pc, #196]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	492d      	ldr	r1, [pc, #180]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4928      	ldr	r1, [pc, #160]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <RCCEx_PLL3_Config+0x160>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	69d2      	ldr	r2, [r2, #28]
 8003fee:	00d2      	lsls	r2, r2, #3
 8003ff0:	4920      	ldr	r1, [pc, #128]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 800400e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004014:	e00f      	b.n	8004036 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d106      	bne.n	800402a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800401c:	4b15      	ldr	r3, [pc, #84]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a14      	ldr	r2, [pc, #80]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8004022:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004028:	e005      	b.n	8004036 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	4a11      	ldr	r2, [pc, #68]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8004030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004034:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004042:	f7fd f987 	bl	8001354 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004048:	e008      	b.n	800405c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800404a:	f7fd f983 	bl	8001354 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <RCCEx_PLL3_Config+0x15c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	58024400 	.word	0x58024400
 8004078:	ffff0007 	.word	0xffff0007

0800407c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0f1      	b.n	8004272 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a78      	ldr	r2, [pc, #480]	; (800427c <HAL_SPI_Init+0x200>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <HAL_SPI_Init+0x42>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a77      	ldr	r2, [pc, #476]	; (8004280 <HAL_SPI_Init+0x204>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00a      	beq.n	80040be <HAL_SPI_Init+0x42>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a75      	ldr	r2, [pc, #468]	; (8004284 <HAL_SPI_Init+0x208>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d005      	beq.n	80040be <HAL_SPI_Init+0x42>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	d901      	bls.n	80040be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0d9      	b.n	8004272 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 ff66 	bl	8004f90 <SPI_GetPacketSize>
 80040c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6c      	ldr	r2, [pc, #432]	; (800427c <HAL_SPI_Init+0x200>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00c      	beq.n	80040ea <HAL_SPI_Init+0x6e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6a      	ldr	r2, [pc, #424]	; (8004280 <HAL_SPI_Init+0x204>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <HAL_SPI_Init+0x6e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a69      	ldr	r2, [pc, #420]	; (8004284 <HAL_SPI_Init+0x208>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d002      	beq.n	80040ea <HAL_SPI_Init+0x6e>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d811      	bhi.n	800410e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80040ee:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_SPI_Init+0x200>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d009      	beq.n	8004108 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a61      	ldr	r2, [pc, #388]	; (8004280 <HAL_SPI_Init+0x204>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_SPI_Init+0x8c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a60      	ldr	r2, [pc, #384]	; (8004284 <HAL_SPI_Init+0x208>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d104      	bne.n	8004112 <HAL_SPI_Init+0x96>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b10      	cmp	r3, #16
 800410c:	d901      	bls.n	8004112 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e0af      	b.n	8004272 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fc fe5a 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800414e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004158:	d119      	bne.n	800418e <HAL_SPI_Init+0x112>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004162:	d103      	bne.n	800416c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10c      	bne.n	800418e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800417c:	d107      	bne.n	800418e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	431a      	orrs	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ee:	ea42 0103 	orr.w	r1, r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d113      	bne.n	800422e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004218:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800422c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40013000 	.word	0x40013000
 8004280:	40003800 	.word	0x40003800
 8004284:	40003c00 	.word	0x40003c00

08004288 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3320      	adds	r3, #32
 800429e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_SPI_Transmit+0x2a>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e1d7      	b.n	8004662 <HAL_SPI_Transmit+0x3da>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ba:	f7fd f84b 	bl	8001354 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d007      	beq.n	80042dc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
 80042ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80042d8:	7efb      	ldrb	r3, [r7, #27]
 80042da:	e1c2      	b.n	8004662 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_SPI_Transmit+0x60>
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80042f4:	7efb      	ldrb	r3, [r7, #27]
 80042f6:	e1b4      	b.n	8004662 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2203      	movs	r2, #3
 80042fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	88fa      	ldrh	r2, [r7, #6]
 8004312:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	88fa      	ldrh	r2, [r7, #6]
 800431a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004348:	d107      	bne.n	800435a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	4b96      	ldr	r3, [pc, #600]	; (80045bc <HAL_SPI_Transmit+0x334>)
 8004362:	4013      	ands	r3, r2
 8004364:	88f9      	ldrh	r1, [r7, #6]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	430b      	orrs	r3, r1
 800436c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004386:	d107      	bne.n	8004398 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b0f      	cmp	r3, #15
 800439e:	d947      	bls.n	8004430 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80043a0:	e03f      	b.n	8004422 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d114      	bne.n	80043da <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80043d8:	e023      	b.n	8004422 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043da:	f7fc ffbb 	bl	8001354 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d803      	bhi.n	80043f2 <HAL_SPI_Transmit+0x16a>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d102      	bne.n	80043f8 <HAL_SPI_Transmit+0x170>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d114      	bne.n	8004422 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fcfb 	bl	8004df4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e11f      	b.n	8004662 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1b9      	bne.n	80043a2 <HAL_SPI_Transmit+0x11a>
 800442e:	e0f2      	b.n	8004616 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b07      	cmp	r3, #7
 8004436:	f240 80e7 	bls.w	8004608 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800443a:	e05d      	b.n	80044f8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d132      	bne.n	80044b0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d918      	bls.n	8004488 <HAL_SPI_Transmit+0x200>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d014      	beq.n	8004488 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	1d1a      	adds	r2, r3, #4
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b02      	subs	r3, #2
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004486:	e037      	b.n	80044f8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	1c9a      	adds	r2, r3, #2
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80044ae:	e023      	b.n	80044f8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b0:	f7fc ff50 	bl	8001354 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d803      	bhi.n	80044c8 <HAL_SPI_Transmit+0x240>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d102      	bne.n	80044ce <HAL_SPI_Transmit+0x246>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d114      	bne.n	80044f8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fc90 	bl	8004df4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e0b4      	b.n	8004662 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d19b      	bne.n	800443c <HAL_SPI_Transmit+0x1b4>
 8004504:	e087      	b.n	8004616 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d155      	bne.n	80045c0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b03      	cmp	r3, #3
 800451e:	d918      	bls.n	8004552 <HAL_SPI_Transmit+0x2ca>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d914      	bls.n	8004552 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	1d1a      	adds	r2, r3, #4
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b04      	subs	r3, #4
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004550:	e05a      	b.n	8004608 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d917      	bls.n	800458e <HAL_SPI_Transmit+0x306>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d013      	beq.n	800458e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004574:	1c9a      	adds	r2, r3, #2
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b02      	subs	r3, #2
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800458c:	e03c      	b.n	8004608 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3320      	adds	r3, #32
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80045b8:	e026      	b.n	8004608 <HAL_SPI_Transmit+0x380>
 80045ba:	bf00      	nop
 80045bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045c0:	f7fc fec8 	bl	8001354 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d803      	bhi.n	80045d8 <HAL_SPI_Transmit+0x350>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d102      	bne.n	80045de <HAL_SPI_Transmit+0x356>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d114      	bne.n	8004608 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fc08 	bl	8004df4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e02c      	b.n	8004662 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	f47f af78 	bne.w	8004506 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	2108      	movs	r1, #8
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fc87 	bl	8004f34 <SPI_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fbd9 	bl	8004df4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8004660:	7efb      	ldrb	r3, [r7, #27]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop

0800466c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3330      	adds	r3, #48	; 0x30
 8004686:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004690:	d112      	bne.n	80046b8 <HAL_SPI_Receive+0x4c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10e      	bne.n	80046b8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2204      	movs	r2, #4
 800469e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f978 	bl	80049a4 <HAL_SPI_TransmitReceive>
 80046b4:	4603      	mov	r3, r0
 80046b6:	e16f      	b.n	8004998 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_SPI_Receive+0x5a>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e168      	b.n	8004998 <HAL_SPI_Receive+0x32c>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ce:	f7fc fe41 	bl	8001354 <HAL_GetTick>
 80046d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d007      	beq.n	80046f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
 80046e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80046ec:	7ffb      	ldrb	r3, [r7, #31]
 80046ee:	e153      	b.n	8004998 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_SPI_Receive+0x90>
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d107      	bne.n	800470c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004708:	7ffb      	ldrb	r3, [r7, #31]
 800470a:	e145      	b.n	8004998 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2204      	movs	r2, #4
 8004710:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800475c:	d107      	bne.n	800476e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	4b8a      	ldr	r3, [pc, #552]	; (80049a0 <HAL_SPI_Receive+0x334>)
 8004776:	4013      	ands	r3, r2
 8004778:	88f9      	ldrh	r1, [r7, #6]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	430b      	orrs	r3, r1
 8004780:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0201 	orr.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d107      	bne.n	80047ac <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b0f      	cmp	r3, #15
 80047b2:	d948      	bls.n	8004846 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80047b4:	e040      	b.n	8004838 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	f248 0308 	movw	r3, #32776	; 0x8008
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d014      	beq.n	80047f0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80047ee:	e023      	b.n	8004838 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047f0:	f7fc fdb0 	bl	8001354 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d803      	bhi.n	8004808 <HAL_SPI_Receive+0x19c>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d102      	bne.n	800480e <HAL_SPI_Receive+0x1a2>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d114      	bne.n	8004838 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 faf0 	bl	8004df4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e0af      	b.n	8004998 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1b8      	bne.n	80047b6 <HAL_SPI_Receive+0x14a>
 8004844:	e095      	b.n	8004972 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b07      	cmp	r3, #7
 800484c:	f240 808b 	bls.w	8004966 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004850:	e03f      	b.n	80048d2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d114      	bne.n	800488a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	8812      	ldrh	r2, [r2, #0]
 8004868:	b292      	uxth	r2, r2
 800486a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004888:	e023      	b.n	80048d2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800488a:	f7fc fd63 	bl	8001354 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d803      	bhi.n	80048a2 <HAL_SPI_Receive+0x236>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d102      	bne.n	80048a8 <HAL_SPI_Receive+0x23c>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d114      	bne.n	80048d2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 faa3 	bl	8004df4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e062      	b.n	8004998 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1b9      	bne.n	8004852 <HAL_SPI_Receive+0x1e6>
 80048de:	e048      	b.n	8004972 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d117      	bne.n	800491e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fa:	7812      	ldrb	r2, [r2, #0]
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800491c:	e023      	b.n	8004966 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800491e:	f7fc fd19 	bl	8001354 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d803      	bhi.n	8004936 <HAL_SPI_Receive+0x2ca>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d102      	bne.n	800493c <HAL_SPI_Receive+0x2d0>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d114      	bne.n	8004966 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fa59 	bl	8004df4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004950:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e018      	b.n	8004998 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1b6      	bne.n	80048e0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fa3e 	bl	8004df4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8004996:	7ffb      	ldrb	r3, [r7, #31]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	ffff0000 	.word	0xffff0000

080049a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08e      	sub	sp, #56	; 0x38
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3320      	adds	r3, #32
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3330      	adds	r3, #48	; 0x30
 80049c6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_SPI_TransmitReceive+0x32>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e209      	b.n	8004dea <HAL_SPI_TransmitReceive+0x446>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049de:	f7fc fcb9 	bl	8001354 <HAL_GetTick>
 80049e2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80049e8:	887b      	ldrh	r3, [r7, #2]
 80049ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80049f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049fa:	7efb      	ldrb	r3, [r7, #27]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d014      	beq.n	8004a2a <HAL_SPI_TransmitReceive+0x86>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a06:	d106      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004a10:	7efb      	ldrb	r3, [r7, #27]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d009      	beq.n	8004a2a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
 8004a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a28:	e1df      	b.n	8004dea <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x98>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x98>
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a4e:	e1cc      	b.n	8004dea <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d003      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2205      	movs	r2, #5
 8004a60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	887a      	ldrh	r2, [r7, #2]
 8004a76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	887a      	ldrh	r2, [r7, #2]
 8004a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	887a      	ldrh	r2, [r7, #2]
 8004a94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	4b82      	ldr	r3, [pc, #520]	; (8004cb4 <HAL_SPI_TransmitReceive+0x310>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	8879      	ldrh	r1, [r7, #2]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad0:	d107      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	d970      	bls.n	8004bcc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004aea:	e068      	b.n	8004bbe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d11a      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x18c>
 8004afa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d017      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	1d1a      	adds	r2, r3, #4
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	f248 0308 	movw	r3, #32776	; 0x8008
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01a      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x1d2>
 8004b40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d017      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b50:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b74:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b76:	f7fc fbed 	bl	8001354 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d803      	bhi.n	8004b8e <HAL_SPI_TransmitReceive+0x1ea>
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d102      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x1f0>
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d114      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f92d 	bl	8004df4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e115      	b.n	8004dea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004bbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d193      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x148>
 8004bc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d190      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x148>
 8004bca:	e0e7      	b.n	8004d9c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b07      	cmp	r3, #7
 8004bd2:	f240 80dd 	bls.w	8004d90 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004bd6:	e066      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d119      	bne.n	8004c1a <HAL_SPI_TransmitReceive+0x276>
 8004be6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d016      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	881a      	ldrh	r2, [r3, #0]
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c18:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d11a      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x2ba>
 8004c28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d017      	beq.n	8004c5e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	8812      	ldrh	r2, [r2, #0]
 8004c36:	b292      	uxth	r2, r2
 8004c38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c3e:	1c9a      	adds	r2, r3, #2
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c5e:	f7fc fb79 	bl	8001354 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d803      	bhi.n	8004c76 <HAL_SPI_TransmitReceive+0x2d2>
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d102      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x2d8>
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d114      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f8b9 	bl	8004df4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e0a1      	b.n	8004dea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004ca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d195      	bne.n	8004bd8 <HAL_SPI_TransmitReceive+0x234>
 8004cac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d192      	bne.n	8004bd8 <HAL_SPI_TransmitReceive+0x234>
 8004cb2:	e073      	b.n	8004d9c <HAL_SPI_TransmitReceive+0x3f8>
 8004cb4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d11b      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x35a>
 8004cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d018      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3320      	adds	r3, #32
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004cfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d11d      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x3a4>
 8004d0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01a      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d1e:	7812      	ldrb	r2, [r2, #0]
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d46:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d48:	f7fc fb04 	bl	8001354 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d803      	bhi.n	8004d60 <HAL_SPI_TransmitReceive+0x3bc>
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x3c2>
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d114      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f844 	bl	8004df4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e02c      	b.n	8004dea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004d90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d190      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x314>
 8004d96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d18d      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2200      	movs	r2, #0
 8004da4:	2108      	movs	r1, #8
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f8c4 	bl	8004f34 <SPI_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f816 	bl	8004df4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e001      	b.n	8004dea <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8004de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3730      	adds	r7, #48	; 0x30
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop

08004df4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0208 	orr.w	r2, r2, #8
 8004e12:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0210 	orr.w	r2, r2, #16
 8004e22:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6919      	ldr	r1, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b3c      	ldr	r3, [pc, #240]	; (8004f30 <SPI_CloseTransfer+0x13c>)
 8004e40:	400b      	ands	r3, r1
 8004e42:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004e52:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d014      	beq.n	8004e8a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00f      	beq.n	8004e8a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0220 	orr.w	r2, r2, #32
 8004e88:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d014      	beq.n	8004ec0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00f      	beq.n	8004ec0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea6:	f043 0204 	orr.w	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ebe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00f      	beq.n	8004eea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00f      	beq.n	8004f14 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efa:	f043 0208 	orr.w	r2, r3, #8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f12:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	fffffc90 	.word	0xfffffc90

08004f34 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004f44:	e010      	b.n	8004f68 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f46:	f7fc fa05 	bl	8001354 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d803      	bhi.n	8004f5e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d102      	bne.n	8004f64 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e00f      	b.n	8004f88 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4013      	ands	r3, r2
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d0df      	beq.n	8004f46 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3307      	adds	r3, #7
 8004fae:	08db      	lsrs	r3, r3, #3
 8004fb0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e042      	b.n	800505e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fb ff5e 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8c3 	bl	8005194 <UART_SetConfig>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e022      	b.n	800505e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fe1f 	bl	8005c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005044:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fea6 	bl	8005da8 <UART_CheckIdleState>
 800505c:	4603      	mov	r3, r0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b08a      	sub	sp, #40	; 0x28
 800506a:	af02      	add	r7, sp, #8
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507c:	2b20      	cmp	r3, #32
 800507e:	f040 8083 	bne.w	8005188 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_UART_Transmit+0x28>
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e07b      	b.n	800518a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_UART_Transmit+0x3a>
 800509c:	2302      	movs	r3, #2
 800509e:	e074      	b.n	800518a <HAL_UART_Transmit+0x124>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	; 0x21
 80050b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b8:	f7fc f94c 	bl	8001354 <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	88fa      	ldrh	r2, [r7, #6]
 80050ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d6:	d108      	bne.n	80050ea <HAL_UART_Transmit+0x84>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	e003      	b.n	80050f2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80050fa:	e02c      	b.n	8005156 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2200      	movs	r2, #0
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fe99 	bl	8005e3e <UART_WaitOnFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e039      	b.n	800518a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10b      	bne.n	8005134 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	3302      	adds	r3, #2
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e007      	b.n	8005144 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	3301      	adds	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1cc      	bne.n	80050fc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	2140      	movs	r1, #64	; 0x40
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fe66 	bl	8005e3e <UART_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e006      	b.n	800518a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005198:	b092      	sub	sp, #72	; 0x48
 800519a:	af00      	add	r7, sp, #0
 800519c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	431a      	orrs	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4bbe      	ldr	r3, [pc, #760]	; (80054bc <UART_SetConfig+0x328>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051cc:	430b      	orrs	r3, r1
 80051ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4ab3      	ldr	r2, [pc, #716]	; (80054c0 <UART_SetConfig+0x32c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051fc:	4313      	orrs	r3, r2
 80051fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	4baf      	ldr	r3, [pc, #700]	; (80054c4 <UART_SetConfig+0x330>)
 8005208:	4013      	ands	r3, r2
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005210:	430b      	orrs	r3, r1
 8005212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	f023 010f 	bic.w	r1, r3, #15
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4aa6      	ldr	r2, [pc, #664]	; (80054c8 <UART_SetConfig+0x334>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d177      	bne.n	8005324 <UART_SetConfig+0x190>
 8005234:	4ba5      	ldr	r3, [pc, #660]	; (80054cc <UART_SetConfig+0x338>)
 8005236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800523c:	2b28      	cmp	r3, #40	; 0x28
 800523e:	d86d      	bhi.n	800531c <UART_SetConfig+0x188>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0xb4>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	080052ed 	.word	0x080052ed
 800524c:	0800531d 	.word	0x0800531d
 8005250:	0800531d 	.word	0x0800531d
 8005254:	0800531d 	.word	0x0800531d
 8005258:	0800531d 	.word	0x0800531d
 800525c:	0800531d 	.word	0x0800531d
 8005260:	0800531d 	.word	0x0800531d
 8005264:	0800531d 	.word	0x0800531d
 8005268:	080052f5 	.word	0x080052f5
 800526c:	0800531d 	.word	0x0800531d
 8005270:	0800531d 	.word	0x0800531d
 8005274:	0800531d 	.word	0x0800531d
 8005278:	0800531d 	.word	0x0800531d
 800527c:	0800531d 	.word	0x0800531d
 8005280:	0800531d 	.word	0x0800531d
 8005284:	0800531d 	.word	0x0800531d
 8005288:	080052fd 	.word	0x080052fd
 800528c:	0800531d 	.word	0x0800531d
 8005290:	0800531d 	.word	0x0800531d
 8005294:	0800531d 	.word	0x0800531d
 8005298:	0800531d 	.word	0x0800531d
 800529c:	0800531d 	.word	0x0800531d
 80052a0:	0800531d 	.word	0x0800531d
 80052a4:	0800531d 	.word	0x0800531d
 80052a8:	08005305 	.word	0x08005305
 80052ac:	0800531d 	.word	0x0800531d
 80052b0:	0800531d 	.word	0x0800531d
 80052b4:	0800531d 	.word	0x0800531d
 80052b8:	0800531d 	.word	0x0800531d
 80052bc:	0800531d 	.word	0x0800531d
 80052c0:	0800531d 	.word	0x0800531d
 80052c4:	0800531d 	.word	0x0800531d
 80052c8:	0800530d 	.word	0x0800530d
 80052cc:	0800531d 	.word	0x0800531d
 80052d0:	0800531d 	.word	0x0800531d
 80052d4:	0800531d 	.word	0x0800531d
 80052d8:	0800531d 	.word	0x0800531d
 80052dc:	0800531d 	.word	0x0800531d
 80052e0:	0800531d 	.word	0x0800531d
 80052e4:	0800531d 	.word	0x0800531d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f2:	e222      	b.n	800573a <UART_SetConfig+0x5a6>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fa:	e21e      	b.n	800573a <UART_SetConfig+0x5a6>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e21a      	b.n	800573a <UART_SetConfig+0x5a6>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e216      	b.n	800573a <UART_SetConfig+0x5a6>
 800530c:	2320      	movs	r3, #32
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e212      	b.n	800573a <UART_SetConfig+0x5a6>
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e20e      	b.n	800573a <UART_SetConfig+0x5a6>
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e20a      	b.n	800573a <UART_SetConfig+0x5a6>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a69      	ldr	r2, [pc, #420]	; (80054d0 <UART_SetConfig+0x33c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d130      	bne.n	8005390 <UART_SetConfig+0x1fc>
 800532e:	4b67      	ldr	r3, [pc, #412]	; (80054cc <UART_SetConfig+0x338>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b05      	cmp	r3, #5
 8005338:	d826      	bhi.n	8005388 <UART_SetConfig+0x1f4>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <UART_SetConfig+0x1ac>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005359 	.word	0x08005359
 8005344:	08005361 	.word	0x08005361
 8005348:	08005369 	.word	0x08005369
 800534c:	08005371 	.word	0x08005371
 8005350:	08005379 	.word	0x08005379
 8005354:	08005381 	.word	0x08005381
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e1ec      	b.n	800573a <UART_SetConfig+0x5a6>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e1e8      	b.n	800573a <UART_SetConfig+0x5a6>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e1e4      	b.n	800573a <UART_SetConfig+0x5a6>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e1e0      	b.n	800573a <UART_SetConfig+0x5a6>
 8005378:	2320      	movs	r3, #32
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e1dc      	b.n	800573a <UART_SetConfig+0x5a6>
 8005380:	2340      	movs	r3, #64	; 0x40
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e1d8      	b.n	800573a <UART_SetConfig+0x5a6>
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538e:	e1d4      	b.n	800573a <UART_SetConfig+0x5a6>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a4f      	ldr	r2, [pc, #316]	; (80054d4 <UART_SetConfig+0x340>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d130      	bne.n	80053fc <UART_SetConfig+0x268>
 800539a:	4b4c      	ldr	r3, [pc, #304]	; (80054cc <UART_SetConfig+0x338>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d826      	bhi.n	80053f4 <UART_SetConfig+0x260>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0x218>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053c5 	.word	0x080053c5
 80053b0:	080053cd 	.word	0x080053cd
 80053b4:	080053d5 	.word	0x080053d5
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e1b6      	b.n	800573a <UART_SetConfig+0x5a6>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e1b2      	b.n	800573a <UART_SetConfig+0x5a6>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e1ae      	b.n	800573a <UART_SetConfig+0x5a6>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e1aa      	b.n	800573a <UART_SetConfig+0x5a6>
 80053e4:	2320      	movs	r3, #32
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e1a6      	b.n	800573a <UART_SetConfig+0x5a6>
 80053ec:	2340      	movs	r3, #64	; 0x40
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e1a2      	b.n	800573a <UART_SetConfig+0x5a6>
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e19e      	b.n	800573a <UART_SetConfig+0x5a6>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a35      	ldr	r2, [pc, #212]	; (80054d8 <UART_SetConfig+0x344>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d130      	bne.n	8005468 <UART_SetConfig+0x2d4>
 8005406:	4b31      	ldr	r3, [pc, #196]	; (80054cc <UART_SetConfig+0x338>)
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b05      	cmp	r3, #5
 8005410:	d826      	bhi.n	8005460 <UART_SetConfig+0x2cc>
 8005412:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <UART_SetConfig+0x284>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005431 	.word	0x08005431
 800541c:	08005439 	.word	0x08005439
 8005420:	08005441 	.word	0x08005441
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e180      	b.n	800573a <UART_SetConfig+0x5a6>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e17c      	b.n	800573a <UART_SetConfig+0x5a6>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e178      	b.n	800573a <UART_SetConfig+0x5a6>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e174      	b.n	800573a <UART_SetConfig+0x5a6>
 8005450:	2320      	movs	r3, #32
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e170      	b.n	800573a <UART_SetConfig+0x5a6>
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e16c      	b.n	800573a <UART_SetConfig+0x5a6>
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e168      	b.n	800573a <UART_SetConfig+0x5a6>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1b      	ldr	r2, [pc, #108]	; (80054dc <UART_SetConfig+0x348>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d142      	bne.n	80054f8 <UART_SetConfig+0x364>
 8005472:	4b16      	ldr	r3, [pc, #88]	; (80054cc <UART_SetConfig+0x338>)
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b05      	cmp	r3, #5
 800547c:	d838      	bhi.n	80054f0 <UART_SetConfig+0x35c>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <UART_SetConfig+0x2f0>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	0800549d 	.word	0x0800549d
 8005488:	080054a5 	.word	0x080054a5
 800548c:	080054ad 	.word	0x080054ad
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054e1 	.word	0x080054e1
 8005498:	080054e9 	.word	0x080054e9
 800549c:	2300      	movs	r3, #0
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e14a      	b.n	800573a <UART_SetConfig+0x5a6>
 80054a4:	2304      	movs	r3, #4
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e146      	b.n	800573a <UART_SetConfig+0x5a6>
 80054ac:	2308      	movs	r3, #8
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e142      	b.n	800573a <UART_SetConfig+0x5a6>
 80054b4:	2310      	movs	r3, #16
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e13e      	b.n	800573a <UART_SetConfig+0x5a6>
 80054bc:	cfff69f3 	.word	0xcfff69f3
 80054c0:	58000c00 	.word	0x58000c00
 80054c4:	11fff4ff 	.word	0x11fff4ff
 80054c8:	40011000 	.word	0x40011000
 80054cc:	58024400 	.word	0x58024400
 80054d0:	40004400 	.word	0x40004400
 80054d4:	40004800 	.word	0x40004800
 80054d8:	40004c00 	.word	0x40004c00
 80054dc:	40005000 	.word	0x40005000
 80054e0:	2320      	movs	r3, #32
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e6:	e128      	b.n	800573a <UART_SetConfig+0x5a6>
 80054e8:	2340      	movs	r3, #64	; 0x40
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ee:	e124      	b.n	800573a <UART_SetConfig+0x5a6>
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e120      	b.n	800573a <UART_SetConfig+0x5a6>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4acb      	ldr	r2, [pc, #812]	; (800582c <UART_SetConfig+0x698>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d176      	bne.n	80055f0 <UART_SetConfig+0x45c>
 8005502:	4bcb      	ldr	r3, [pc, #812]	; (8005830 <UART_SetConfig+0x69c>)
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800550a:	2b28      	cmp	r3, #40	; 0x28
 800550c:	d86c      	bhi.n	80055e8 <UART_SetConfig+0x454>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <UART_SetConfig+0x380>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	080055b9 	.word	0x080055b9
 8005518:	080055e9 	.word	0x080055e9
 800551c:	080055e9 	.word	0x080055e9
 8005520:	080055e9 	.word	0x080055e9
 8005524:	080055e9 	.word	0x080055e9
 8005528:	080055e9 	.word	0x080055e9
 800552c:	080055e9 	.word	0x080055e9
 8005530:	080055e9 	.word	0x080055e9
 8005534:	080055c1 	.word	0x080055c1
 8005538:	080055e9 	.word	0x080055e9
 800553c:	080055e9 	.word	0x080055e9
 8005540:	080055e9 	.word	0x080055e9
 8005544:	080055e9 	.word	0x080055e9
 8005548:	080055e9 	.word	0x080055e9
 800554c:	080055e9 	.word	0x080055e9
 8005550:	080055e9 	.word	0x080055e9
 8005554:	080055c9 	.word	0x080055c9
 8005558:	080055e9 	.word	0x080055e9
 800555c:	080055e9 	.word	0x080055e9
 8005560:	080055e9 	.word	0x080055e9
 8005564:	080055e9 	.word	0x080055e9
 8005568:	080055e9 	.word	0x080055e9
 800556c:	080055e9 	.word	0x080055e9
 8005570:	080055e9 	.word	0x080055e9
 8005574:	080055d1 	.word	0x080055d1
 8005578:	080055e9 	.word	0x080055e9
 800557c:	080055e9 	.word	0x080055e9
 8005580:	080055e9 	.word	0x080055e9
 8005584:	080055e9 	.word	0x080055e9
 8005588:	080055e9 	.word	0x080055e9
 800558c:	080055e9 	.word	0x080055e9
 8005590:	080055e9 	.word	0x080055e9
 8005594:	080055d9 	.word	0x080055d9
 8005598:	080055e9 	.word	0x080055e9
 800559c:	080055e9 	.word	0x080055e9
 80055a0:	080055e9 	.word	0x080055e9
 80055a4:	080055e9 	.word	0x080055e9
 80055a8:	080055e9 	.word	0x080055e9
 80055ac:	080055e9 	.word	0x080055e9
 80055b0:	080055e9 	.word	0x080055e9
 80055b4:	080055e1 	.word	0x080055e1
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e0bc      	b.n	800573a <UART_SetConfig+0x5a6>
 80055c0:	2304      	movs	r3, #4
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e0b8      	b.n	800573a <UART_SetConfig+0x5a6>
 80055c8:	2308      	movs	r3, #8
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ce:	e0b4      	b.n	800573a <UART_SetConfig+0x5a6>
 80055d0:	2310      	movs	r3, #16
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d6:	e0b0      	b.n	800573a <UART_SetConfig+0x5a6>
 80055d8:	2320      	movs	r3, #32
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055de:	e0ac      	b.n	800573a <UART_SetConfig+0x5a6>
 80055e0:	2340      	movs	r3, #64	; 0x40
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e0a8      	b.n	800573a <UART_SetConfig+0x5a6>
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e0a4      	b.n	800573a <UART_SetConfig+0x5a6>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a8f      	ldr	r2, [pc, #572]	; (8005834 <UART_SetConfig+0x6a0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d130      	bne.n	800565c <UART_SetConfig+0x4c8>
 80055fa:	4b8d      	ldr	r3, [pc, #564]	; (8005830 <UART_SetConfig+0x69c>)
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	2b05      	cmp	r3, #5
 8005604:	d826      	bhi.n	8005654 <UART_SetConfig+0x4c0>
 8005606:	a201      	add	r2, pc, #4	; (adr r2, 800560c <UART_SetConfig+0x478>)
 8005608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560c:	08005625 	.word	0x08005625
 8005610:	0800562d 	.word	0x0800562d
 8005614:	08005635 	.word	0x08005635
 8005618:	0800563d 	.word	0x0800563d
 800561c:	08005645 	.word	0x08005645
 8005620:	0800564d 	.word	0x0800564d
 8005624:	2300      	movs	r3, #0
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e086      	b.n	800573a <UART_SetConfig+0x5a6>
 800562c:	2304      	movs	r3, #4
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e082      	b.n	800573a <UART_SetConfig+0x5a6>
 8005634:	2308      	movs	r3, #8
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563a:	e07e      	b.n	800573a <UART_SetConfig+0x5a6>
 800563c:	2310      	movs	r3, #16
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005642:	e07a      	b.n	800573a <UART_SetConfig+0x5a6>
 8005644:	2320      	movs	r3, #32
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564a:	e076      	b.n	800573a <UART_SetConfig+0x5a6>
 800564c:	2340      	movs	r3, #64	; 0x40
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005652:	e072      	b.n	800573a <UART_SetConfig+0x5a6>
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e06e      	b.n	800573a <UART_SetConfig+0x5a6>
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a75      	ldr	r2, [pc, #468]	; (8005838 <UART_SetConfig+0x6a4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d130      	bne.n	80056c8 <UART_SetConfig+0x534>
 8005666:	4b72      	ldr	r3, [pc, #456]	; (8005830 <UART_SetConfig+0x69c>)
 8005668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	2b05      	cmp	r3, #5
 8005670:	d826      	bhi.n	80056c0 <UART_SetConfig+0x52c>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <UART_SetConfig+0x4e4>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	08005691 	.word	0x08005691
 800567c:	08005699 	.word	0x08005699
 8005680:	080056a1 	.word	0x080056a1
 8005684:	080056a9 	.word	0x080056a9
 8005688:	080056b1 	.word	0x080056b1
 800568c:	080056b9 	.word	0x080056b9
 8005690:	2300      	movs	r3, #0
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e050      	b.n	800573a <UART_SetConfig+0x5a6>
 8005698:	2304      	movs	r3, #4
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e04c      	b.n	800573a <UART_SetConfig+0x5a6>
 80056a0:	2308      	movs	r3, #8
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e048      	b.n	800573a <UART_SetConfig+0x5a6>
 80056a8:	2310      	movs	r3, #16
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e044      	b.n	800573a <UART_SetConfig+0x5a6>
 80056b0:	2320      	movs	r3, #32
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b6:	e040      	b.n	800573a <UART_SetConfig+0x5a6>
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e03c      	b.n	800573a <UART_SetConfig+0x5a6>
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e038      	b.n	800573a <UART_SetConfig+0x5a6>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a5b      	ldr	r2, [pc, #364]	; (800583c <UART_SetConfig+0x6a8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d130      	bne.n	8005734 <UART_SetConfig+0x5a0>
 80056d2:	4b57      	ldr	r3, [pc, #348]	; (8005830 <UART_SetConfig+0x69c>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b05      	cmp	r3, #5
 80056dc:	d826      	bhi.n	800572c <UART_SetConfig+0x598>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x550>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	080056fd 	.word	0x080056fd
 80056e8:	08005705 	.word	0x08005705
 80056ec:	0800570d 	.word	0x0800570d
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	08005725 	.word	0x08005725
 80056fc:	2302      	movs	r3, #2
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e01a      	b.n	800573a <UART_SetConfig+0x5a6>
 8005704:	2304      	movs	r3, #4
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e016      	b.n	800573a <UART_SetConfig+0x5a6>
 800570c:	2308      	movs	r3, #8
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005712:	e012      	b.n	800573a <UART_SetConfig+0x5a6>
 8005714:	2310      	movs	r3, #16
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e00e      	b.n	800573a <UART_SetConfig+0x5a6>
 800571c:	2320      	movs	r3, #32
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e00a      	b.n	800573a <UART_SetConfig+0x5a6>
 8005724:	2340      	movs	r3, #64	; 0x40
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e006      	b.n	800573a <UART_SetConfig+0x5a6>
 800572c:	2380      	movs	r3, #128	; 0x80
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e002      	b.n	800573a <UART_SetConfig+0x5a6>
 8005734:	2380      	movs	r3, #128	; 0x80
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a3f      	ldr	r2, [pc, #252]	; (800583c <UART_SetConfig+0x6a8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	f040 80f8 	bne.w	8005936 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005746:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800574a:	2b20      	cmp	r3, #32
 800574c:	dc46      	bgt.n	80057dc <UART_SetConfig+0x648>
 800574e:	2b02      	cmp	r3, #2
 8005750:	f2c0 8082 	blt.w	8005858 <UART_SetConfig+0x6c4>
 8005754:	3b02      	subs	r3, #2
 8005756:	2b1e      	cmp	r3, #30
 8005758:	d87e      	bhi.n	8005858 <UART_SetConfig+0x6c4>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <UART_SetConfig+0x5cc>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	080057e3 	.word	0x080057e3
 8005764:	08005859 	.word	0x08005859
 8005768:	080057eb 	.word	0x080057eb
 800576c:	08005859 	.word	0x08005859
 8005770:	08005859 	.word	0x08005859
 8005774:	08005859 	.word	0x08005859
 8005778:	080057fb 	.word	0x080057fb
 800577c:	08005859 	.word	0x08005859
 8005780:	08005859 	.word	0x08005859
 8005784:	08005859 	.word	0x08005859
 8005788:	08005859 	.word	0x08005859
 800578c:	08005859 	.word	0x08005859
 8005790:	08005859 	.word	0x08005859
 8005794:	08005859 	.word	0x08005859
 8005798:	0800580b 	.word	0x0800580b
 800579c:	08005859 	.word	0x08005859
 80057a0:	08005859 	.word	0x08005859
 80057a4:	08005859 	.word	0x08005859
 80057a8:	08005859 	.word	0x08005859
 80057ac:	08005859 	.word	0x08005859
 80057b0:	08005859 	.word	0x08005859
 80057b4:	08005859 	.word	0x08005859
 80057b8:	08005859 	.word	0x08005859
 80057bc:	08005859 	.word	0x08005859
 80057c0:	08005859 	.word	0x08005859
 80057c4:	08005859 	.word	0x08005859
 80057c8:	08005859 	.word	0x08005859
 80057cc:	08005859 	.word	0x08005859
 80057d0:	08005859 	.word	0x08005859
 80057d4:	08005859 	.word	0x08005859
 80057d8:	0800584b 	.word	0x0800584b
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d037      	beq.n	8005850 <UART_SetConfig+0x6bc>
 80057e0:	e03a      	b.n	8005858 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057e2:	f7fe f829 	bl	8003838 <HAL_RCCEx_GetD3PCLK1Freq>
 80057e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057e8:	e03c      	b.n	8005864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe f838 	bl	8003864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f8:	e034      	b.n	8005864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fa:	f107 0318 	add.w	r3, r7, #24
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe f984 	bl	8003b0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005808:	e02c      	b.n	8005864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800580a:	4b09      	ldr	r3, [pc, #36]	; (8005830 <UART_SetConfig+0x69c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <UART_SetConfig+0x69c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	08db      	lsrs	r3, r3, #3
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	4a07      	ldr	r2, [pc, #28]	; (8005840 <UART_SetConfig+0x6ac>)
 8005822:	fa22 f303 	lsr.w	r3, r2, r3
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005828:	e01c      	b.n	8005864 <UART_SetConfig+0x6d0>
 800582a:	bf00      	nop
 800582c:	40011400 	.word	0x40011400
 8005830:	58024400 	.word	0x58024400
 8005834:	40007800 	.word	0x40007800
 8005838:	40007c00 	.word	0x40007c00
 800583c:	58000c00 	.word	0x58000c00
 8005840:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005844:	4b9d      	ldr	r3, [pc, #628]	; (8005abc <UART_SetConfig+0x928>)
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005848:	e00c      	b.n	8005864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800584a:	4b9d      	ldr	r3, [pc, #628]	; (8005ac0 <UART_SetConfig+0x92c>)
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800584e:	e009      	b.n	8005864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005856:	e005      	b.n	8005864 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005862:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 81de 	beq.w	8005c28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	4a94      	ldr	r2, [pc, #592]	; (8005ac4 <UART_SetConfig+0x930>)
 8005872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005876:	461a      	mov	r2, r3
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	fbb3 f3f2 	udiv	r3, r3, r2
 800587e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588c:	429a      	cmp	r2, r3
 800588e:	d305      	bcc.n	800589c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005898:	429a      	cmp	r2, r3
 800589a:	d903      	bls.n	80058a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80058a2:	e1c1      	b.n	8005c28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a6:	2200      	movs	r2, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	60fa      	str	r2, [r7, #12]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	4a84      	ldr	r2, [pc, #528]	; (8005ac4 <UART_SetConfig+0x930>)
 80058b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2200      	movs	r2, #0
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058c6:	f7fa fd5b 	bl	8000380 <__aeabi_uldivmod>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4610      	mov	r0, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	020b      	lsls	r3, r1, #8
 80058dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058e0:	0202      	lsls	r2, r0, #8
 80058e2:	6979      	ldr	r1, [r7, #20]
 80058e4:	6849      	ldr	r1, [r1, #4]
 80058e6:	0849      	lsrs	r1, r1, #1
 80058e8:	2000      	movs	r0, #0
 80058ea:	460c      	mov	r4, r1
 80058ec:	4605      	mov	r5, r0
 80058ee:	eb12 0804 	adds.w	r8, r2, r4
 80058f2:	eb43 0905 	adc.w	r9, r3, r5
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	469a      	mov	sl, r3
 80058fe:	4693      	mov	fp, r2
 8005900:	4652      	mov	r2, sl
 8005902:	465b      	mov	r3, fp
 8005904:	4640      	mov	r0, r8
 8005906:	4649      	mov	r1, r9
 8005908:	f7fa fd3a 	bl	8000380 <__aeabi_uldivmod>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4613      	mov	r3, r2
 8005912:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591a:	d308      	bcc.n	800592e <UART_SetConfig+0x79a>
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005922:	d204      	bcs.n	800592e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800592a:	60da      	str	r2, [r3, #12]
 800592c:	e17c      	b.n	8005c28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005934:	e178      	b.n	8005c28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593e:	f040 80c5 	bne.w	8005acc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005942:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005946:	2b20      	cmp	r3, #32
 8005948:	dc48      	bgt.n	80059dc <UART_SetConfig+0x848>
 800594a:	2b00      	cmp	r3, #0
 800594c:	db7b      	blt.n	8005a46 <UART_SetConfig+0x8b2>
 800594e:	2b20      	cmp	r3, #32
 8005950:	d879      	bhi.n	8005a46 <UART_SetConfig+0x8b2>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x7c4>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	080059e3 	.word	0x080059e3
 800595c:	080059eb 	.word	0x080059eb
 8005960:	08005a47 	.word	0x08005a47
 8005964:	08005a47 	.word	0x08005a47
 8005968:	080059f3 	.word	0x080059f3
 800596c:	08005a47 	.word	0x08005a47
 8005970:	08005a47 	.word	0x08005a47
 8005974:	08005a47 	.word	0x08005a47
 8005978:	08005a03 	.word	0x08005a03
 800597c:	08005a47 	.word	0x08005a47
 8005980:	08005a47 	.word	0x08005a47
 8005984:	08005a47 	.word	0x08005a47
 8005988:	08005a47 	.word	0x08005a47
 800598c:	08005a47 	.word	0x08005a47
 8005990:	08005a47 	.word	0x08005a47
 8005994:	08005a47 	.word	0x08005a47
 8005998:	08005a13 	.word	0x08005a13
 800599c:	08005a47 	.word	0x08005a47
 80059a0:	08005a47 	.word	0x08005a47
 80059a4:	08005a47 	.word	0x08005a47
 80059a8:	08005a47 	.word	0x08005a47
 80059ac:	08005a47 	.word	0x08005a47
 80059b0:	08005a47 	.word	0x08005a47
 80059b4:	08005a47 	.word	0x08005a47
 80059b8:	08005a47 	.word	0x08005a47
 80059bc:	08005a47 	.word	0x08005a47
 80059c0:	08005a47 	.word	0x08005a47
 80059c4:	08005a47 	.word	0x08005a47
 80059c8:	08005a47 	.word	0x08005a47
 80059cc:	08005a47 	.word	0x08005a47
 80059d0:	08005a47 	.word	0x08005a47
 80059d4:	08005a47 	.word	0x08005a47
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d02e      	beq.n	8005a3e <UART_SetConfig+0x8aa>
 80059e0:	e031      	b.n	8005a46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e2:	f7fc ffb7 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 80059e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059e8:	e033      	b.n	8005a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ea:	f7fc ffc9 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 80059ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059f0:	e02f      	b.n	8005a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fd ff34 	bl	8003864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a00:	e027      	b.n	8005a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a02:	f107 0318 	add.w	r3, r7, #24
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe f880 	bl	8003b0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a10:	e01f      	b.n	8005a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a12:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <UART_SetConfig+0x934>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <UART_SetConfig+0x934>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	08db      	lsrs	r3, r3, #3
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	4a24      	ldr	r2, [pc, #144]	; (8005abc <UART_SetConfig+0x928>)
 8005a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a30:	e00f      	b.n	8005a52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <UART_SetConfig+0x928>)
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a36:	e00c      	b.n	8005a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <UART_SetConfig+0x92c>)
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a3c:	e009      	b.n	8005a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a44:	e005      	b.n	8005a52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80e7 	beq.w	8005c28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	4a19      	ldr	r2, [pc, #100]	; (8005ac4 <UART_SetConfig+0x930>)
 8005a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a6c:	005a      	lsls	r2, r3, #1
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	441a      	add	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	d916      	bls.n	8005ab4 <UART_SetConfig+0x920>
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d212      	bcs.n	8005ab4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f023 030f 	bic.w	r3, r3, #15
 8005a96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	e0b9      	b.n	8005c28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005aba:	e0b5      	b.n	8005c28 <UART_SetConfig+0xa94>
 8005abc:	03d09000 	.word	0x03d09000
 8005ac0:	003d0900 	.word	0x003d0900
 8005ac4:	0800718c 	.word	0x0800718c
 8005ac8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005acc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	dc49      	bgt.n	8005b68 <UART_SetConfig+0x9d4>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	db7c      	blt.n	8005bd2 <UART_SetConfig+0xa3e>
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d87a      	bhi.n	8005bd2 <UART_SetConfig+0xa3e>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <UART_SetConfig+0x950>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b6f 	.word	0x08005b6f
 8005ae8:	08005b77 	.word	0x08005b77
 8005aec:	08005bd3 	.word	0x08005bd3
 8005af0:	08005bd3 	.word	0x08005bd3
 8005af4:	08005b7f 	.word	0x08005b7f
 8005af8:	08005bd3 	.word	0x08005bd3
 8005afc:	08005bd3 	.word	0x08005bd3
 8005b00:	08005bd3 	.word	0x08005bd3
 8005b04:	08005b8f 	.word	0x08005b8f
 8005b08:	08005bd3 	.word	0x08005bd3
 8005b0c:	08005bd3 	.word	0x08005bd3
 8005b10:	08005bd3 	.word	0x08005bd3
 8005b14:	08005bd3 	.word	0x08005bd3
 8005b18:	08005bd3 	.word	0x08005bd3
 8005b1c:	08005bd3 	.word	0x08005bd3
 8005b20:	08005bd3 	.word	0x08005bd3
 8005b24:	08005b9f 	.word	0x08005b9f
 8005b28:	08005bd3 	.word	0x08005bd3
 8005b2c:	08005bd3 	.word	0x08005bd3
 8005b30:	08005bd3 	.word	0x08005bd3
 8005b34:	08005bd3 	.word	0x08005bd3
 8005b38:	08005bd3 	.word	0x08005bd3
 8005b3c:	08005bd3 	.word	0x08005bd3
 8005b40:	08005bd3 	.word	0x08005bd3
 8005b44:	08005bd3 	.word	0x08005bd3
 8005b48:	08005bd3 	.word	0x08005bd3
 8005b4c:	08005bd3 	.word	0x08005bd3
 8005b50:	08005bd3 	.word	0x08005bd3
 8005b54:	08005bd3 	.word	0x08005bd3
 8005b58:	08005bd3 	.word	0x08005bd3
 8005b5c:	08005bd3 	.word	0x08005bd3
 8005b60:	08005bd3 	.word	0x08005bd3
 8005b64:	08005bc5 	.word	0x08005bc5
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d02e      	beq.n	8005bca <UART_SetConfig+0xa36>
 8005b6c:	e031      	b.n	8005bd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b6e:	f7fc fef1 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8005b72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b74:	e033      	b.n	8005bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b76:	f7fc ff03 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 8005b7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b7c:	e02f      	b.n	8005bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fd fe6e 	bl	8003864 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b8c:	e027      	b.n	8005bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b8e:	f107 0318 	add.w	r3, r7, #24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fd ffba 	bl	8003b0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b9c:	e01f      	b.n	8005bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b9e:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <UART_SetConfig+0xac0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d009      	beq.n	8005bbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005baa:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <UART_SetConfig+0xac0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	08db      	lsrs	r3, r3, #3
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	4a28      	ldr	r2, [pc, #160]	; (8005c58 <UART_SetConfig+0xac4>)
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bbc:	e00f      	b.n	8005bde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005bbe:	4b26      	ldr	r3, [pc, #152]	; (8005c58 <UART_SetConfig+0xac4>)
 8005bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc2:	e00c      	b.n	8005bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bc4:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <UART_SetConfig+0xac8>)
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc8:	e009      	b.n	8005bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bd0:	e005      	b.n	8005bde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8005bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d021      	beq.n	8005c28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	4a1d      	ldr	r2, [pc, #116]	; (8005c60 <UART_SetConfig+0xacc>)
 8005bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	441a      	add	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	2b0f      	cmp	r3, #15
 8005c0c:	d909      	bls.n	8005c22 <UART_SetConfig+0xa8e>
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c14:	d205      	bcs.n	8005c22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60da      	str	r2, [r3, #12]
 8005c20:	e002      	b.n	8005c28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3748      	adds	r7, #72	; 0x48
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c52:	bf00      	nop
 8005c54:	58024400 	.word	0x58024400
 8005c58:	03d09000 	.word	0x03d09000
 8005c5c:	003d0900 	.word	0x003d0900
 8005c60:	0800718c 	.word	0x0800718c

08005c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01a      	beq.n	8005d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d62:	d10a      	bne.n	8005d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00a      	beq.n	8005d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005db8:	f7fb facc 	bl	8001354 <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d10e      	bne.n	8005dea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f82f 	bl	8005e3e <UART_WaitOnFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e025      	b.n	8005e36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d10e      	bne.n	8005e16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f819 	bl	8005e3e <UART_WaitOnFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e00f      	b.n	8005e36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b09c      	sub	sp, #112	; 0x70
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	603b      	str	r3, [r7, #0]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4e:	e0a9      	b.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e56:	f000 80a5 	beq.w	8005fa4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5a:	f7fb fa7b 	bl	8001354 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d140      	bne.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e84:	667b      	str	r3, [r7, #100]	; 0x64
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e6      	bne.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ec2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e5      	bne.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e069      	b.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d051      	beq.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0e:	d149      	bne.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f6c:	623a      	str	r2, [r7, #32]
 8005f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	69f9      	ldr	r1, [r7, #28]
 8005f72:	6a3a      	ldr	r2, [r7, #32]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e010      	b.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4013      	ands	r3, r2
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	f43f af46 	beq.w	8005e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3770      	adds	r7, #112	; 0x70
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e027      	b.n	8006034 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2224      	movs	r2, #36	; 0x24
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006012:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006054:	2302      	movs	r3, #2
 8006056:	e02d      	b.n	80060b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2224      	movs	r2, #36	; 0x24
 8006064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f84f 	bl	8006138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e02d      	b.n	8006130 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2224      	movs	r2, #36	; 0x24
 80060e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f811 	bl	8006138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006144:	2b00      	cmp	r3, #0
 8006146:	d108      	bne.n	800615a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006158:	e031      	b.n	80061be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800615a:	2310      	movs	r3, #16
 800615c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800615e:	2310      	movs	r3, #16
 8006160:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	0e5b      	lsrs	r3, r3, #25
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	0f5b      	lsrs	r3, r3, #29
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	7b3a      	ldrb	r2, [r7, #12]
 8006186:	4911      	ldr	r1, [pc, #68]	; (80061cc <UARTEx_SetNbDataToProcess+0x94>)
 8006188:	5c8a      	ldrb	r2, [r1, r2]
 800618a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800618e:	7b3a      	ldrb	r2, [r7, #12]
 8006190:	490f      	ldr	r1, [pc, #60]	; (80061d0 <UARTEx_SetNbDataToProcess+0x98>)
 8006192:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006194:	fb93 f3f2 	sdiv	r3, r3, r2
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	7b7a      	ldrb	r2, [r7, #13]
 80061a4:	4909      	ldr	r1, [pc, #36]	; (80061cc <UARTEx_SetNbDataToProcess+0x94>)
 80061a6:	5c8a      	ldrb	r2, [r1, r2]
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061ac:	7b7a      	ldrb	r2, [r7, #13]
 80061ae:	4908      	ldr	r1, [pc, #32]	; (80061d0 <UARTEx_SetNbDataToProcess+0x98>)
 80061b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	080071a4 	.word	0x080071a4
 80061d0:	080071ac 	.word	0x080071ac

080061d4 <__errno>:
 80061d4:	4b01      	ldr	r3, [pc, #4]	; (80061dc <__errno+0x8>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	24000010 	.word	0x24000010

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	; (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	; (800621c <__libc_init_array+0x3c>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2600      	movs	r6, #0
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	; (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	; (8006224 <__libc_init_array+0x44>)
 80061f4:	f000 ffae 	bl	8007154 <_init>
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2600      	movs	r6, #0
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	08007254 	.word	0x08007254
 800621c:	08007254 	.word	0x08007254
 8006220:	08007254 	.word	0x08007254
 8006224:	08007258 	.word	0x08007258

08006228 <memset>:
 8006228:	4402      	add	r2, r0
 800622a:	4603      	mov	r3, r0
 800622c:	4293      	cmp	r3, r2
 800622e:	d100      	bne.n	8006232 <memset+0xa>
 8006230:	4770      	bx	lr
 8006232:	f803 1b01 	strb.w	r1, [r3], #1
 8006236:	e7f9      	b.n	800622c <memset+0x4>

08006238 <iprintf>:
 8006238:	b40f      	push	{r0, r1, r2, r3}
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <iprintf+0x2c>)
 800623c:	b513      	push	{r0, r1, r4, lr}
 800623e:	681c      	ldr	r4, [r3, #0]
 8006240:	b124      	cbz	r4, 800624c <iprintf+0x14>
 8006242:	69a3      	ldr	r3, [r4, #24]
 8006244:	b913      	cbnz	r3, 800624c <iprintf+0x14>
 8006246:	4620      	mov	r0, r4
 8006248:	f000 f866 	bl	8006318 <__sinit>
 800624c:	ab05      	add	r3, sp, #20
 800624e:	9a04      	ldr	r2, [sp, #16]
 8006250:	68a1      	ldr	r1, [r4, #8]
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	4620      	mov	r0, r4
 8006256:	f000 f9bd 	bl	80065d4 <_vfiprintf_r>
 800625a:	b002      	add	sp, #8
 800625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006260:	b004      	add	sp, #16
 8006262:	4770      	bx	lr
 8006264:	24000010 	.word	0x24000010

08006268 <std>:
 8006268:	2300      	movs	r3, #0
 800626a:	b510      	push	{r4, lr}
 800626c:	4604      	mov	r4, r0
 800626e:	e9c0 3300 	strd	r3, r3, [r0]
 8006272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006276:	6083      	str	r3, [r0, #8]
 8006278:	8181      	strh	r1, [r0, #12]
 800627a:	6643      	str	r3, [r0, #100]	; 0x64
 800627c:	81c2      	strh	r2, [r0, #14]
 800627e:	6183      	str	r3, [r0, #24]
 8006280:	4619      	mov	r1, r3
 8006282:	2208      	movs	r2, #8
 8006284:	305c      	adds	r0, #92	; 0x5c
 8006286:	f7ff ffcf 	bl	8006228 <memset>
 800628a:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <std+0x38>)
 800628c:	6263      	str	r3, [r4, #36]	; 0x24
 800628e:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <std+0x3c>)
 8006290:	62a3      	str	r3, [r4, #40]	; 0x28
 8006292:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <std+0x40>)
 8006294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006296:	4b05      	ldr	r3, [pc, #20]	; (80062ac <std+0x44>)
 8006298:	6224      	str	r4, [r4, #32]
 800629a:	6323      	str	r3, [r4, #48]	; 0x30
 800629c:	bd10      	pop	{r4, pc}
 800629e:	bf00      	nop
 80062a0:	08006b7d 	.word	0x08006b7d
 80062a4:	08006b9f 	.word	0x08006b9f
 80062a8:	08006bd7 	.word	0x08006bd7
 80062ac:	08006bfb 	.word	0x08006bfb

080062b0 <_cleanup_r>:
 80062b0:	4901      	ldr	r1, [pc, #4]	; (80062b8 <_cleanup_r+0x8>)
 80062b2:	f000 b8af 	b.w	8006414 <_fwalk_reent>
 80062b6:	bf00      	nop
 80062b8:	08006ed5 	.word	0x08006ed5

080062bc <__sfmoreglue>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	2268      	movs	r2, #104	; 0x68
 80062c0:	1e4d      	subs	r5, r1, #1
 80062c2:	4355      	muls	r5, r2
 80062c4:	460e      	mov	r6, r1
 80062c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062ca:	f000 f8e5 	bl	8006498 <_malloc_r>
 80062ce:	4604      	mov	r4, r0
 80062d0:	b140      	cbz	r0, 80062e4 <__sfmoreglue+0x28>
 80062d2:	2100      	movs	r1, #0
 80062d4:	e9c0 1600 	strd	r1, r6, [r0]
 80062d8:	300c      	adds	r0, #12
 80062da:	60a0      	str	r0, [r4, #8]
 80062dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062e0:	f7ff ffa2 	bl	8006228 <memset>
 80062e4:	4620      	mov	r0, r4
 80062e6:	bd70      	pop	{r4, r5, r6, pc}

080062e8 <__sfp_lock_acquire>:
 80062e8:	4801      	ldr	r0, [pc, #4]	; (80062f0 <__sfp_lock_acquire+0x8>)
 80062ea:	f000 b8b3 	b.w	8006454 <__retarget_lock_acquire_recursive>
 80062ee:	bf00      	nop
 80062f0:	24000241 	.word	0x24000241

080062f4 <__sfp_lock_release>:
 80062f4:	4801      	ldr	r0, [pc, #4]	; (80062fc <__sfp_lock_release+0x8>)
 80062f6:	f000 b8ae 	b.w	8006456 <__retarget_lock_release_recursive>
 80062fa:	bf00      	nop
 80062fc:	24000241 	.word	0x24000241

08006300 <__sinit_lock_acquire>:
 8006300:	4801      	ldr	r0, [pc, #4]	; (8006308 <__sinit_lock_acquire+0x8>)
 8006302:	f000 b8a7 	b.w	8006454 <__retarget_lock_acquire_recursive>
 8006306:	bf00      	nop
 8006308:	24000242 	.word	0x24000242

0800630c <__sinit_lock_release>:
 800630c:	4801      	ldr	r0, [pc, #4]	; (8006314 <__sinit_lock_release+0x8>)
 800630e:	f000 b8a2 	b.w	8006456 <__retarget_lock_release_recursive>
 8006312:	bf00      	nop
 8006314:	24000242 	.word	0x24000242

08006318 <__sinit>:
 8006318:	b510      	push	{r4, lr}
 800631a:	4604      	mov	r4, r0
 800631c:	f7ff fff0 	bl	8006300 <__sinit_lock_acquire>
 8006320:	69a3      	ldr	r3, [r4, #24]
 8006322:	b11b      	cbz	r3, 800632c <__sinit+0x14>
 8006324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006328:	f7ff bff0 	b.w	800630c <__sinit_lock_release>
 800632c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006330:	6523      	str	r3, [r4, #80]	; 0x50
 8006332:	4b13      	ldr	r3, [pc, #76]	; (8006380 <__sinit+0x68>)
 8006334:	4a13      	ldr	r2, [pc, #76]	; (8006384 <__sinit+0x6c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	62a2      	str	r2, [r4, #40]	; 0x28
 800633a:	42a3      	cmp	r3, r4
 800633c:	bf04      	itt	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	61a3      	streq	r3, [r4, #24]
 8006342:	4620      	mov	r0, r4
 8006344:	f000 f820 	bl	8006388 <__sfp>
 8006348:	6060      	str	r0, [r4, #4]
 800634a:	4620      	mov	r0, r4
 800634c:	f000 f81c 	bl	8006388 <__sfp>
 8006350:	60a0      	str	r0, [r4, #8]
 8006352:	4620      	mov	r0, r4
 8006354:	f000 f818 	bl	8006388 <__sfp>
 8006358:	2200      	movs	r2, #0
 800635a:	60e0      	str	r0, [r4, #12]
 800635c:	2104      	movs	r1, #4
 800635e:	6860      	ldr	r0, [r4, #4]
 8006360:	f7ff ff82 	bl	8006268 <std>
 8006364:	68a0      	ldr	r0, [r4, #8]
 8006366:	2201      	movs	r2, #1
 8006368:	2109      	movs	r1, #9
 800636a:	f7ff ff7d 	bl	8006268 <std>
 800636e:	68e0      	ldr	r0, [r4, #12]
 8006370:	2202      	movs	r2, #2
 8006372:	2112      	movs	r1, #18
 8006374:	f7ff ff78 	bl	8006268 <std>
 8006378:	2301      	movs	r3, #1
 800637a:	61a3      	str	r3, [r4, #24]
 800637c:	e7d2      	b.n	8006324 <__sinit+0xc>
 800637e:	bf00      	nop
 8006380:	080071b4 	.word	0x080071b4
 8006384:	080062b1 	.word	0x080062b1

08006388 <__sfp>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	4607      	mov	r7, r0
 800638c:	f7ff ffac 	bl	80062e8 <__sfp_lock_acquire>
 8006390:	4b1e      	ldr	r3, [pc, #120]	; (800640c <__sfp+0x84>)
 8006392:	681e      	ldr	r6, [r3, #0]
 8006394:	69b3      	ldr	r3, [r6, #24]
 8006396:	b913      	cbnz	r3, 800639e <__sfp+0x16>
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff ffbd 	bl	8006318 <__sinit>
 800639e:	3648      	adds	r6, #72	; 0x48
 80063a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	d503      	bpl.n	80063b0 <__sfp+0x28>
 80063a8:	6833      	ldr	r3, [r6, #0]
 80063aa:	b30b      	cbz	r3, 80063f0 <__sfp+0x68>
 80063ac:	6836      	ldr	r6, [r6, #0]
 80063ae:	e7f7      	b.n	80063a0 <__sfp+0x18>
 80063b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063b4:	b9d5      	cbnz	r5, 80063ec <__sfp+0x64>
 80063b6:	4b16      	ldr	r3, [pc, #88]	; (8006410 <__sfp+0x88>)
 80063b8:	60e3      	str	r3, [r4, #12]
 80063ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063be:	6665      	str	r5, [r4, #100]	; 0x64
 80063c0:	f000 f847 	bl	8006452 <__retarget_lock_init_recursive>
 80063c4:	f7ff ff96 	bl	80062f4 <__sfp_lock_release>
 80063c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063d0:	6025      	str	r5, [r4, #0]
 80063d2:	61a5      	str	r5, [r4, #24]
 80063d4:	2208      	movs	r2, #8
 80063d6:	4629      	mov	r1, r5
 80063d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063dc:	f7ff ff24 	bl	8006228 <memset>
 80063e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063e8:	4620      	mov	r0, r4
 80063ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ec:	3468      	adds	r4, #104	; 0x68
 80063ee:	e7d9      	b.n	80063a4 <__sfp+0x1c>
 80063f0:	2104      	movs	r1, #4
 80063f2:	4638      	mov	r0, r7
 80063f4:	f7ff ff62 	bl	80062bc <__sfmoreglue>
 80063f8:	4604      	mov	r4, r0
 80063fa:	6030      	str	r0, [r6, #0]
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d1d5      	bne.n	80063ac <__sfp+0x24>
 8006400:	f7ff ff78 	bl	80062f4 <__sfp_lock_release>
 8006404:	230c      	movs	r3, #12
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	e7ee      	b.n	80063e8 <__sfp+0x60>
 800640a:	bf00      	nop
 800640c:	080071b4 	.word	0x080071b4
 8006410:	ffff0001 	.word	0xffff0001

08006414 <_fwalk_reent>:
 8006414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006418:	4606      	mov	r6, r0
 800641a:	4688      	mov	r8, r1
 800641c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006420:	2700      	movs	r7, #0
 8006422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006426:	f1b9 0901 	subs.w	r9, r9, #1
 800642a:	d505      	bpl.n	8006438 <_fwalk_reent+0x24>
 800642c:	6824      	ldr	r4, [r4, #0]
 800642e:	2c00      	cmp	r4, #0
 8006430:	d1f7      	bne.n	8006422 <_fwalk_reent+0xe>
 8006432:	4638      	mov	r0, r7
 8006434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006438:	89ab      	ldrh	r3, [r5, #12]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d907      	bls.n	800644e <_fwalk_reent+0x3a>
 800643e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006442:	3301      	adds	r3, #1
 8006444:	d003      	beq.n	800644e <_fwalk_reent+0x3a>
 8006446:	4629      	mov	r1, r5
 8006448:	4630      	mov	r0, r6
 800644a:	47c0      	blx	r8
 800644c:	4307      	orrs	r7, r0
 800644e:	3568      	adds	r5, #104	; 0x68
 8006450:	e7e9      	b.n	8006426 <_fwalk_reent+0x12>

08006452 <__retarget_lock_init_recursive>:
 8006452:	4770      	bx	lr

08006454 <__retarget_lock_acquire_recursive>:
 8006454:	4770      	bx	lr

08006456 <__retarget_lock_release_recursive>:
 8006456:	4770      	bx	lr

08006458 <sbrk_aligned>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4e0e      	ldr	r6, [pc, #56]	; (8006494 <sbrk_aligned+0x3c>)
 800645c:	460c      	mov	r4, r1
 800645e:	6831      	ldr	r1, [r6, #0]
 8006460:	4605      	mov	r5, r0
 8006462:	b911      	cbnz	r1, 800646a <sbrk_aligned+0x12>
 8006464:	f000 fb7a 	bl	8006b5c <_sbrk_r>
 8006468:	6030      	str	r0, [r6, #0]
 800646a:	4621      	mov	r1, r4
 800646c:	4628      	mov	r0, r5
 800646e:	f000 fb75 	bl	8006b5c <_sbrk_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d00a      	beq.n	800648c <sbrk_aligned+0x34>
 8006476:	1cc4      	adds	r4, r0, #3
 8006478:	f024 0403 	bic.w	r4, r4, #3
 800647c:	42a0      	cmp	r0, r4
 800647e:	d007      	beq.n	8006490 <sbrk_aligned+0x38>
 8006480:	1a21      	subs	r1, r4, r0
 8006482:	4628      	mov	r0, r5
 8006484:	f000 fb6a 	bl	8006b5c <_sbrk_r>
 8006488:	3001      	adds	r0, #1
 800648a:	d101      	bne.n	8006490 <sbrk_aligned+0x38>
 800648c:	f04f 34ff 	mov.w	r4, #4294967295
 8006490:	4620      	mov	r0, r4
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	24000248 	.word	0x24000248

08006498 <_malloc_r>:
 8006498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	1ccd      	adds	r5, r1, #3
 800649e:	f025 0503 	bic.w	r5, r5, #3
 80064a2:	3508      	adds	r5, #8
 80064a4:	2d0c      	cmp	r5, #12
 80064a6:	bf38      	it	cc
 80064a8:	250c      	movcc	r5, #12
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	4607      	mov	r7, r0
 80064ae:	db01      	blt.n	80064b4 <_malloc_r+0x1c>
 80064b0:	42a9      	cmp	r1, r5
 80064b2:	d905      	bls.n	80064c0 <_malloc_r+0x28>
 80064b4:	230c      	movs	r3, #12
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	2600      	movs	r6, #0
 80064ba:	4630      	mov	r0, r6
 80064bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c0:	4e2e      	ldr	r6, [pc, #184]	; (800657c <_malloc_r+0xe4>)
 80064c2:	f000 fdbb 	bl	800703c <__malloc_lock>
 80064c6:	6833      	ldr	r3, [r6, #0]
 80064c8:	461c      	mov	r4, r3
 80064ca:	bb34      	cbnz	r4, 800651a <_malloc_r+0x82>
 80064cc:	4629      	mov	r1, r5
 80064ce:	4638      	mov	r0, r7
 80064d0:	f7ff ffc2 	bl	8006458 <sbrk_aligned>
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	4604      	mov	r4, r0
 80064d8:	d14d      	bne.n	8006576 <_malloc_r+0xde>
 80064da:	6834      	ldr	r4, [r6, #0]
 80064dc:	4626      	mov	r6, r4
 80064de:	2e00      	cmp	r6, #0
 80064e0:	d140      	bne.n	8006564 <_malloc_r+0xcc>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	4631      	mov	r1, r6
 80064e6:	4638      	mov	r0, r7
 80064e8:	eb04 0803 	add.w	r8, r4, r3
 80064ec:	f000 fb36 	bl	8006b5c <_sbrk_r>
 80064f0:	4580      	cmp	r8, r0
 80064f2:	d13a      	bne.n	800656a <_malloc_r+0xd2>
 80064f4:	6821      	ldr	r1, [r4, #0]
 80064f6:	3503      	adds	r5, #3
 80064f8:	1a6d      	subs	r5, r5, r1
 80064fa:	f025 0503 	bic.w	r5, r5, #3
 80064fe:	3508      	adds	r5, #8
 8006500:	2d0c      	cmp	r5, #12
 8006502:	bf38      	it	cc
 8006504:	250c      	movcc	r5, #12
 8006506:	4629      	mov	r1, r5
 8006508:	4638      	mov	r0, r7
 800650a:	f7ff ffa5 	bl	8006458 <sbrk_aligned>
 800650e:	3001      	adds	r0, #1
 8006510:	d02b      	beq.n	800656a <_malloc_r+0xd2>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	442b      	add	r3, r5
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	e00e      	b.n	8006538 <_malloc_r+0xa0>
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	1b52      	subs	r2, r2, r5
 800651e:	d41e      	bmi.n	800655e <_malloc_r+0xc6>
 8006520:	2a0b      	cmp	r2, #11
 8006522:	d916      	bls.n	8006552 <_malloc_r+0xba>
 8006524:	1961      	adds	r1, r4, r5
 8006526:	42a3      	cmp	r3, r4
 8006528:	6025      	str	r5, [r4, #0]
 800652a:	bf18      	it	ne
 800652c:	6059      	strne	r1, [r3, #4]
 800652e:	6863      	ldr	r3, [r4, #4]
 8006530:	bf08      	it	eq
 8006532:	6031      	streq	r1, [r6, #0]
 8006534:	5162      	str	r2, [r4, r5]
 8006536:	604b      	str	r3, [r1, #4]
 8006538:	4638      	mov	r0, r7
 800653a:	f104 060b 	add.w	r6, r4, #11
 800653e:	f000 fd83 	bl	8007048 <__malloc_unlock>
 8006542:	f026 0607 	bic.w	r6, r6, #7
 8006546:	1d23      	adds	r3, r4, #4
 8006548:	1af2      	subs	r2, r6, r3
 800654a:	d0b6      	beq.n	80064ba <_malloc_r+0x22>
 800654c:	1b9b      	subs	r3, r3, r6
 800654e:	50a3      	str	r3, [r4, r2]
 8006550:	e7b3      	b.n	80064ba <_malloc_r+0x22>
 8006552:	6862      	ldr	r2, [r4, #4]
 8006554:	42a3      	cmp	r3, r4
 8006556:	bf0c      	ite	eq
 8006558:	6032      	streq	r2, [r6, #0]
 800655a:	605a      	strne	r2, [r3, #4]
 800655c:	e7ec      	b.n	8006538 <_malloc_r+0xa0>
 800655e:	4623      	mov	r3, r4
 8006560:	6864      	ldr	r4, [r4, #4]
 8006562:	e7b2      	b.n	80064ca <_malloc_r+0x32>
 8006564:	4634      	mov	r4, r6
 8006566:	6876      	ldr	r6, [r6, #4]
 8006568:	e7b9      	b.n	80064de <_malloc_r+0x46>
 800656a:	230c      	movs	r3, #12
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	4638      	mov	r0, r7
 8006570:	f000 fd6a 	bl	8007048 <__malloc_unlock>
 8006574:	e7a1      	b.n	80064ba <_malloc_r+0x22>
 8006576:	6025      	str	r5, [r4, #0]
 8006578:	e7de      	b.n	8006538 <_malloc_r+0xa0>
 800657a:	bf00      	nop
 800657c:	24000244 	.word	0x24000244

08006580 <__sfputc_r>:
 8006580:	6893      	ldr	r3, [r2, #8]
 8006582:	3b01      	subs	r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	b410      	push	{r4}
 8006588:	6093      	str	r3, [r2, #8]
 800658a:	da08      	bge.n	800659e <__sfputc_r+0x1e>
 800658c:	6994      	ldr	r4, [r2, #24]
 800658e:	42a3      	cmp	r3, r4
 8006590:	db01      	blt.n	8006596 <__sfputc_r+0x16>
 8006592:	290a      	cmp	r1, #10
 8006594:	d103      	bne.n	800659e <__sfputc_r+0x1e>
 8006596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659a:	f000 bb33 	b.w	8006c04 <__swbuf_r>
 800659e:	6813      	ldr	r3, [r2, #0]
 80065a0:	1c58      	adds	r0, r3, #1
 80065a2:	6010      	str	r0, [r2, #0]
 80065a4:	7019      	strb	r1, [r3, #0]
 80065a6:	4608      	mov	r0, r1
 80065a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <__sfputs_r>:
 80065ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b0:	4606      	mov	r6, r0
 80065b2:	460f      	mov	r7, r1
 80065b4:	4614      	mov	r4, r2
 80065b6:	18d5      	adds	r5, r2, r3
 80065b8:	42ac      	cmp	r4, r5
 80065ba:	d101      	bne.n	80065c0 <__sfputs_r+0x12>
 80065bc:	2000      	movs	r0, #0
 80065be:	e007      	b.n	80065d0 <__sfputs_r+0x22>
 80065c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c4:	463a      	mov	r2, r7
 80065c6:	4630      	mov	r0, r6
 80065c8:	f7ff ffda 	bl	8006580 <__sfputc_r>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d1f3      	bne.n	80065b8 <__sfputs_r+0xa>
 80065d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065d4 <_vfiprintf_r>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	460d      	mov	r5, r1
 80065da:	b09d      	sub	sp, #116	; 0x74
 80065dc:	4614      	mov	r4, r2
 80065de:	4698      	mov	r8, r3
 80065e0:	4606      	mov	r6, r0
 80065e2:	b118      	cbz	r0, 80065ec <_vfiprintf_r+0x18>
 80065e4:	6983      	ldr	r3, [r0, #24]
 80065e6:	b90b      	cbnz	r3, 80065ec <_vfiprintf_r+0x18>
 80065e8:	f7ff fe96 	bl	8006318 <__sinit>
 80065ec:	4b89      	ldr	r3, [pc, #548]	; (8006814 <_vfiprintf_r+0x240>)
 80065ee:	429d      	cmp	r5, r3
 80065f0:	d11b      	bne.n	800662a <_vfiprintf_r+0x56>
 80065f2:	6875      	ldr	r5, [r6, #4]
 80065f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065f6:	07d9      	lsls	r1, r3, #31
 80065f8:	d405      	bmi.n	8006606 <_vfiprintf_r+0x32>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	059a      	lsls	r2, r3, #22
 80065fe:	d402      	bmi.n	8006606 <_vfiprintf_r+0x32>
 8006600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006602:	f7ff ff27 	bl	8006454 <__retarget_lock_acquire_recursive>
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	071b      	lsls	r3, r3, #28
 800660a:	d501      	bpl.n	8006610 <_vfiprintf_r+0x3c>
 800660c:	692b      	ldr	r3, [r5, #16]
 800660e:	b9eb      	cbnz	r3, 800664c <_vfiprintf_r+0x78>
 8006610:	4629      	mov	r1, r5
 8006612:	4630      	mov	r0, r6
 8006614:	f000 fb5a 	bl	8006ccc <__swsetup_r>
 8006618:	b1c0      	cbz	r0, 800664c <_vfiprintf_r+0x78>
 800661a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800661c:	07dc      	lsls	r4, r3, #31
 800661e:	d50e      	bpl.n	800663e <_vfiprintf_r+0x6a>
 8006620:	f04f 30ff 	mov.w	r0, #4294967295
 8006624:	b01d      	add	sp, #116	; 0x74
 8006626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662a:	4b7b      	ldr	r3, [pc, #492]	; (8006818 <_vfiprintf_r+0x244>)
 800662c:	429d      	cmp	r5, r3
 800662e:	d101      	bne.n	8006634 <_vfiprintf_r+0x60>
 8006630:	68b5      	ldr	r5, [r6, #8]
 8006632:	e7df      	b.n	80065f4 <_vfiprintf_r+0x20>
 8006634:	4b79      	ldr	r3, [pc, #484]	; (800681c <_vfiprintf_r+0x248>)
 8006636:	429d      	cmp	r5, r3
 8006638:	bf08      	it	eq
 800663a:	68f5      	ldreq	r5, [r6, #12]
 800663c:	e7da      	b.n	80065f4 <_vfiprintf_r+0x20>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	0598      	lsls	r0, r3, #22
 8006642:	d4ed      	bmi.n	8006620 <_vfiprintf_r+0x4c>
 8006644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006646:	f7ff ff06 	bl	8006456 <__retarget_lock_release_recursive>
 800664a:	e7e9      	b.n	8006620 <_vfiprintf_r+0x4c>
 800664c:	2300      	movs	r3, #0
 800664e:	9309      	str	r3, [sp, #36]	; 0x24
 8006650:	2320      	movs	r3, #32
 8006652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006656:	f8cd 800c 	str.w	r8, [sp, #12]
 800665a:	2330      	movs	r3, #48	; 0x30
 800665c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006820 <_vfiprintf_r+0x24c>
 8006660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006664:	f04f 0901 	mov.w	r9, #1
 8006668:	4623      	mov	r3, r4
 800666a:	469a      	mov	sl, r3
 800666c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006670:	b10a      	cbz	r2, 8006676 <_vfiprintf_r+0xa2>
 8006672:	2a25      	cmp	r2, #37	; 0x25
 8006674:	d1f9      	bne.n	800666a <_vfiprintf_r+0x96>
 8006676:	ebba 0b04 	subs.w	fp, sl, r4
 800667a:	d00b      	beq.n	8006694 <_vfiprintf_r+0xc0>
 800667c:	465b      	mov	r3, fp
 800667e:	4622      	mov	r2, r4
 8006680:	4629      	mov	r1, r5
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff ff93 	bl	80065ae <__sfputs_r>
 8006688:	3001      	adds	r0, #1
 800668a:	f000 80aa 	beq.w	80067e2 <_vfiprintf_r+0x20e>
 800668e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006690:	445a      	add	r2, fp
 8006692:	9209      	str	r2, [sp, #36]	; 0x24
 8006694:	f89a 3000 	ldrb.w	r3, [sl]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80a2 	beq.w	80067e2 <_vfiprintf_r+0x20e>
 800669e:	2300      	movs	r3, #0
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066a8:	f10a 0a01 	add.w	sl, sl, #1
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b4:	931a      	str	r3, [sp, #104]	; 0x68
 80066b6:	4654      	mov	r4, sl
 80066b8:	2205      	movs	r2, #5
 80066ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066be:	4858      	ldr	r0, [pc, #352]	; (8006820 <_vfiprintf_r+0x24c>)
 80066c0:	f7f9 fe0e 	bl	80002e0 <memchr>
 80066c4:	9a04      	ldr	r2, [sp, #16]
 80066c6:	b9d8      	cbnz	r0, 8006700 <_vfiprintf_r+0x12c>
 80066c8:	06d1      	lsls	r1, r2, #27
 80066ca:	bf44      	itt	mi
 80066cc:	2320      	movmi	r3, #32
 80066ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d2:	0713      	lsls	r3, r2, #28
 80066d4:	bf44      	itt	mi
 80066d6:	232b      	movmi	r3, #43	; 0x2b
 80066d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066dc:	f89a 3000 	ldrb.w	r3, [sl]
 80066e0:	2b2a      	cmp	r3, #42	; 0x2a
 80066e2:	d015      	beq.n	8006710 <_vfiprintf_r+0x13c>
 80066e4:	9a07      	ldr	r2, [sp, #28]
 80066e6:	4654      	mov	r4, sl
 80066e8:	2000      	movs	r0, #0
 80066ea:	f04f 0c0a 	mov.w	ip, #10
 80066ee:	4621      	mov	r1, r4
 80066f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f4:	3b30      	subs	r3, #48	; 0x30
 80066f6:	2b09      	cmp	r3, #9
 80066f8:	d94e      	bls.n	8006798 <_vfiprintf_r+0x1c4>
 80066fa:	b1b0      	cbz	r0, 800672a <_vfiprintf_r+0x156>
 80066fc:	9207      	str	r2, [sp, #28]
 80066fe:	e014      	b.n	800672a <_vfiprintf_r+0x156>
 8006700:	eba0 0308 	sub.w	r3, r0, r8
 8006704:	fa09 f303 	lsl.w	r3, r9, r3
 8006708:	4313      	orrs	r3, r2
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	46a2      	mov	sl, r4
 800670e:	e7d2      	b.n	80066b6 <_vfiprintf_r+0xe2>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	1d19      	adds	r1, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	9103      	str	r1, [sp, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	bfbb      	ittet	lt
 800671c:	425b      	neglt	r3, r3
 800671e:	f042 0202 	orrlt.w	r2, r2, #2
 8006722:	9307      	strge	r3, [sp, #28]
 8006724:	9307      	strlt	r3, [sp, #28]
 8006726:	bfb8      	it	lt
 8006728:	9204      	strlt	r2, [sp, #16]
 800672a:	7823      	ldrb	r3, [r4, #0]
 800672c:	2b2e      	cmp	r3, #46	; 0x2e
 800672e:	d10c      	bne.n	800674a <_vfiprintf_r+0x176>
 8006730:	7863      	ldrb	r3, [r4, #1]
 8006732:	2b2a      	cmp	r3, #42	; 0x2a
 8006734:	d135      	bne.n	80067a2 <_vfiprintf_r+0x1ce>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	9203      	str	r2, [sp, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	bfb8      	it	lt
 8006742:	f04f 33ff 	movlt.w	r3, #4294967295
 8006746:	3402      	adds	r4, #2
 8006748:	9305      	str	r3, [sp, #20]
 800674a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006830 <_vfiprintf_r+0x25c>
 800674e:	7821      	ldrb	r1, [r4, #0]
 8006750:	2203      	movs	r2, #3
 8006752:	4650      	mov	r0, sl
 8006754:	f7f9 fdc4 	bl	80002e0 <memchr>
 8006758:	b140      	cbz	r0, 800676c <_vfiprintf_r+0x198>
 800675a:	2340      	movs	r3, #64	; 0x40
 800675c:	eba0 000a 	sub.w	r0, r0, sl
 8006760:	fa03 f000 	lsl.w	r0, r3, r0
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	4303      	orrs	r3, r0
 8006768:	3401      	adds	r4, #1
 800676a:	9304      	str	r3, [sp, #16]
 800676c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006770:	482c      	ldr	r0, [pc, #176]	; (8006824 <_vfiprintf_r+0x250>)
 8006772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006776:	2206      	movs	r2, #6
 8006778:	f7f9 fdb2 	bl	80002e0 <memchr>
 800677c:	2800      	cmp	r0, #0
 800677e:	d03f      	beq.n	8006800 <_vfiprintf_r+0x22c>
 8006780:	4b29      	ldr	r3, [pc, #164]	; (8006828 <_vfiprintf_r+0x254>)
 8006782:	bb1b      	cbnz	r3, 80067cc <_vfiprintf_r+0x1f8>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	3307      	adds	r3, #7
 8006788:	f023 0307 	bic.w	r3, r3, #7
 800678c:	3308      	adds	r3, #8
 800678e:	9303      	str	r3, [sp, #12]
 8006790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006792:	443b      	add	r3, r7
 8006794:	9309      	str	r3, [sp, #36]	; 0x24
 8006796:	e767      	b.n	8006668 <_vfiprintf_r+0x94>
 8006798:	fb0c 3202 	mla	r2, ip, r2, r3
 800679c:	460c      	mov	r4, r1
 800679e:	2001      	movs	r0, #1
 80067a0:	e7a5      	b.n	80066ee <_vfiprintf_r+0x11a>
 80067a2:	2300      	movs	r3, #0
 80067a4:	3401      	adds	r4, #1
 80067a6:	9305      	str	r3, [sp, #20]
 80067a8:	4619      	mov	r1, r3
 80067aa:	f04f 0c0a 	mov.w	ip, #10
 80067ae:	4620      	mov	r0, r4
 80067b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b4:	3a30      	subs	r2, #48	; 0x30
 80067b6:	2a09      	cmp	r2, #9
 80067b8:	d903      	bls.n	80067c2 <_vfiprintf_r+0x1ee>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0c5      	beq.n	800674a <_vfiprintf_r+0x176>
 80067be:	9105      	str	r1, [sp, #20]
 80067c0:	e7c3      	b.n	800674a <_vfiprintf_r+0x176>
 80067c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c6:	4604      	mov	r4, r0
 80067c8:	2301      	movs	r3, #1
 80067ca:	e7f0      	b.n	80067ae <_vfiprintf_r+0x1da>
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4b16      	ldr	r3, [pc, #88]	; (800682c <_vfiprintf_r+0x258>)
 80067d4:	a904      	add	r1, sp, #16
 80067d6:	4630      	mov	r0, r6
 80067d8:	f3af 8000 	nop.w
 80067dc:	4607      	mov	r7, r0
 80067de:	1c78      	adds	r0, r7, #1
 80067e0:	d1d6      	bne.n	8006790 <_vfiprintf_r+0x1bc>
 80067e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e4:	07d9      	lsls	r1, r3, #31
 80067e6:	d405      	bmi.n	80067f4 <_vfiprintf_r+0x220>
 80067e8:	89ab      	ldrh	r3, [r5, #12]
 80067ea:	059a      	lsls	r2, r3, #22
 80067ec:	d402      	bmi.n	80067f4 <_vfiprintf_r+0x220>
 80067ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f0:	f7ff fe31 	bl	8006456 <__retarget_lock_release_recursive>
 80067f4:	89ab      	ldrh	r3, [r5, #12]
 80067f6:	065b      	lsls	r3, r3, #25
 80067f8:	f53f af12 	bmi.w	8006620 <_vfiprintf_r+0x4c>
 80067fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067fe:	e711      	b.n	8006624 <_vfiprintf_r+0x50>
 8006800:	ab03      	add	r3, sp, #12
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	462a      	mov	r2, r5
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <_vfiprintf_r+0x258>)
 8006808:	a904      	add	r1, sp, #16
 800680a:	4630      	mov	r0, r6
 800680c:	f000 f880 	bl	8006910 <_printf_i>
 8006810:	e7e4      	b.n	80067dc <_vfiprintf_r+0x208>
 8006812:	bf00      	nop
 8006814:	080071d8 	.word	0x080071d8
 8006818:	080071f8 	.word	0x080071f8
 800681c:	080071b8 	.word	0x080071b8
 8006820:	08007218 	.word	0x08007218
 8006824:	08007222 	.word	0x08007222
 8006828:	00000000 	.word	0x00000000
 800682c:	080065af 	.word	0x080065af
 8006830:	0800721e 	.word	0x0800721e

08006834 <_printf_common>:
 8006834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006838:	4616      	mov	r6, r2
 800683a:	4699      	mov	r9, r3
 800683c:	688a      	ldr	r2, [r1, #8]
 800683e:	690b      	ldr	r3, [r1, #16]
 8006840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006844:	4293      	cmp	r3, r2
 8006846:	bfb8      	it	lt
 8006848:	4613      	movlt	r3, r2
 800684a:	6033      	str	r3, [r6, #0]
 800684c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006850:	4607      	mov	r7, r0
 8006852:	460c      	mov	r4, r1
 8006854:	b10a      	cbz	r2, 800685a <_printf_common+0x26>
 8006856:	3301      	adds	r3, #1
 8006858:	6033      	str	r3, [r6, #0]
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	0699      	lsls	r1, r3, #26
 800685e:	bf42      	ittt	mi
 8006860:	6833      	ldrmi	r3, [r6, #0]
 8006862:	3302      	addmi	r3, #2
 8006864:	6033      	strmi	r3, [r6, #0]
 8006866:	6825      	ldr	r5, [r4, #0]
 8006868:	f015 0506 	ands.w	r5, r5, #6
 800686c:	d106      	bne.n	800687c <_printf_common+0x48>
 800686e:	f104 0a19 	add.w	sl, r4, #25
 8006872:	68e3      	ldr	r3, [r4, #12]
 8006874:	6832      	ldr	r2, [r6, #0]
 8006876:	1a9b      	subs	r3, r3, r2
 8006878:	42ab      	cmp	r3, r5
 800687a:	dc26      	bgt.n	80068ca <_printf_common+0x96>
 800687c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006880:	1e13      	subs	r3, r2, #0
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	bf18      	it	ne
 8006886:	2301      	movne	r3, #1
 8006888:	0692      	lsls	r2, r2, #26
 800688a:	d42b      	bmi.n	80068e4 <_printf_common+0xb0>
 800688c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006890:	4649      	mov	r1, r9
 8006892:	4638      	mov	r0, r7
 8006894:	47c0      	blx	r8
 8006896:	3001      	adds	r0, #1
 8006898:	d01e      	beq.n	80068d8 <_printf_common+0xa4>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	68e5      	ldr	r5, [r4, #12]
 800689e:	6832      	ldr	r2, [r6, #0]
 80068a0:	f003 0306 	and.w	r3, r3, #6
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	bf08      	it	eq
 80068a8:	1aad      	subeq	r5, r5, r2
 80068aa:	68a3      	ldr	r3, [r4, #8]
 80068ac:	6922      	ldr	r2, [r4, #16]
 80068ae:	bf0c      	ite	eq
 80068b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b4:	2500      	movne	r5, #0
 80068b6:	4293      	cmp	r3, r2
 80068b8:	bfc4      	itt	gt
 80068ba:	1a9b      	subgt	r3, r3, r2
 80068bc:	18ed      	addgt	r5, r5, r3
 80068be:	2600      	movs	r6, #0
 80068c0:	341a      	adds	r4, #26
 80068c2:	42b5      	cmp	r5, r6
 80068c4:	d11a      	bne.n	80068fc <_printf_common+0xc8>
 80068c6:	2000      	movs	r0, #0
 80068c8:	e008      	b.n	80068dc <_printf_common+0xa8>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4652      	mov	r2, sl
 80068ce:	4649      	mov	r1, r9
 80068d0:	4638      	mov	r0, r7
 80068d2:	47c0      	blx	r8
 80068d4:	3001      	adds	r0, #1
 80068d6:	d103      	bne.n	80068e0 <_printf_common+0xac>
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e0:	3501      	adds	r5, #1
 80068e2:	e7c6      	b.n	8006872 <_printf_common+0x3e>
 80068e4:	18e1      	adds	r1, r4, r3
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	2030      	movs	r0, #48	; 0x30
 80068ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ee:	4422      	add	r2, r4
 80068f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068f8:	3302      	adds	r3, #2
 80068fa:	e7c7      	b.n	800688c <_printf_common+0x58>
 80068fc:	2301      	movs	r3, #1
 80068fe:	4622      	mov	r2, r4
 8006900:	4649      	mov	r1, r9
 8006902:	4638      	mov	r0, r7
 8006904:	47c0      	blx	r8
 8006906:	3001      	adds	r0, #1
 8006908:	d0e6      	beq.n	80068d8 <_printf_common+0xa4>
 800690a:	3601      	adds	r6, #1
 800690c:	e7d9      	b.n	80068c2 <_printf_common+0x8e>
	...

08006910 <_printf_i>:
 8006910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	7e0f      	ldrb	r7, [r1, #24]
 8006916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006918:	2f78      	cmp	r7, #120	; 0x78
 800691a:	4691      	mov	r9, r2
 800691c:	4680      	mov	r8, r0
 800691e:	460c      	mov	r4, r1
 8006920:	469a      	mov	sl, r3
 8006922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006926:	d807      	bhi.n	8006938 <_printf_i+0x28>
 8006928:	2f62      	cmp	r7, #98	; 0x62
 800692a:	d80a      	bhi.n	8006942 <_printf_i+0x32>
 800692c:	2f00      	cmp	r7, #0
 800692e:	f000 80d8 	beq.w	8006ae2 <_printf_i+0x1d2>
 8006932:	2f58      	cmp	r7, #88	; 0x58
 8006934:	f000 80a3 	beq.w	8006a7e <_printf_i+0x16e>
 8006938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800693c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006940:	e03a      	b.n	80069b8 <_printf_i+0xa8>
 8006942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006946:	2b15      	cmp	r3, #21
 8006948:	d8f6      	bhi.n	8006938 <_printf_i+0x28>
 800694a:	a101      	add	r1, pc, #4	; (adr r1, 8006950 <_printf_i+0x40>)
 800694c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006950:	080069a9 	.word	0x080069a9
 8006954:	080069bd 	.word	0x080069bd
 8006958:	08006939 	.word	0x08006939
 800695c:	08006939 	.word	0x08006939
 8006960:	08006939 	.word	0x08006939
 8006964:	08006939 	.word	0x08006939
 8006968:	080069bd 	.word	0x080069bd
 800696c:	08006939 	.word	0x08006939
 8006970:	08006939 	.word	0x08006939
 8006974:	08006939 	.word	0x08006939
 8006978:	08006939 	.word	0x08006939
 800697c:	08006ac9 	.word	0x08006ac9
 8006980:	080069ed 	.word	0x080069ed
 8006984:	08006aab 	.word	0x08006aab
 8006988:	08006939 	.word	0x08006939
 800698c:	08006939 	.word	0x08006939
 8006990:	08006aeb 	.word	0x08006aeb
 8006994:	08006939 	.word	0x08006939
 8006998:	080069ed 	.word	0x080069ed
 800699c:	08006939 	.word	0x08006939
 80069a0:	08006939 	.word	0x08006939
 80069a4:	08006ab3 	.word	0x08006ab3
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	1d1a      	adds	r2, r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	602a      	str	r2, [r5, #0]
 80069b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069b8:	2301      	movs	r3, #1
 80069ba:	e0a3      	b.n	8006b04 <_printf_i+0x1f4>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	6829      	ldr	r1, [r5, #0]
 80069c0:	0606      	lsls	r6, r0, #24
 80069c2:	f101 0304 	add.w	r3, r1, #4
 80069c6:	d50a      	bpl.n	80069de <_printf_i+0xce>
 80069c8:	680e      	ldr	r6, [r1, #0]
 80069ca:	602b      	str	r3, [r5, #0]
 80069cc:	2e00      	cmp	r6, #0
 80069ce:	da03      	bge.n	80069d8 <_printf_i+0xc8>
 80069d0:	232d      	movs	r3, #45	; 0x2d
 80069d2:	4276      	negs	r6, r6
 80069d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d8:	485e      	ldr	r0, [pc, #376]	; (8006b54 <_printf_i+0x244>)
 80069da:	230a      	movs	r3, #10
 80069dc:	e019      	b.n	8006a12 <_printf_i+0x102>
 80069de:	680e      	ldr	r6, [r1, #0]
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069e6:	bf18      	it	ne
 80069e8:	b236      	sxthne	r6, r6
 80069ea:	e7ef      	b.n	80069cc <_printf_i+0xbc>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	6820      	ldr	r0, [r4, #0]
 80069f0:	1d19      	adds	r1, r3, #4
 80069f2:	6029      	str	r1, [r5, #0]
 80069f4:	0601      	lsls	r1, r0, #24
 80069f6:	d501      	bpl.n	80069fc <_printf_i+0xec>
 80069f8:	681e      	ldr	r6, [r3, #0]
 80069fa:	e002      	b.n	8006a02 <_printf_i+0xf2>
 80069fc:	0646      	lsls	r6, r0, #25
 80069fe:	d5fb      	bpl.n	80069f8 <_printf_i+0xe8>
 8006a00:	881e      	ldrh	r6, [r3, #0]
 8006a02:	4854      	ldr	r0, [pc, #336]	; (8006b54 <_printf_i+0x244>)
 8006a04:	2f6f      	cmp	r7, #111	; 0x6f
 8006a06:	bf0c      	ite	eq
 8006a08:	2308      	moveq	r3, #8
 8006a0a:	230a      	movne	r3, #10
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a12:	6865      	ldr	r5, [r4, #4]
 8006a14:	60a5      	str	r5, [r4, #8]
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	bfa2      	ittt	ge
 8006a1a:	6821      	ldrge	r1, [r4, #0]
 8006a1c:	f021 0104 	bicge.w	r1, r1, #4
 8006a20:	6021      	strge	r1, [r4, #0]
 8006a22:	b90e      	cbnz	r6, 8006a28 <_printf_i+0x118>
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	d04d      	beq.n	8006ac4 <_printf_i+0x1b4>
 8006a28:	4615      	mov	r5, r2
 8006a2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a2e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a32:	5dc7      	ldrb	r7, [r0, r7]
 8006a34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a38:	4637      	mov	r7, r6
 8006a3a:	42bb      	cmp	r3, r7
 8006a3c:	460e      	mov	r6, r1
 8006a3e:	d9f4      	bls.n	8006a2a <_printf_i+0x11a>
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d10b      	bne.n	8006a5c <_printf_i+0x14c>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	07de      	lsls	r6, r3, #31
 8006a48:	d508      	bpl.n	8006a5c <_printf_i+0x14c>
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	6861      	ldr	r1, [r4, #4]
 8006a4e:	4299      	cmp	r1, r3
 8006a50:	bfde      	ittt	le
 8006a52:	2330      	movle	r3, #48	; 0x30
 8006a54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a5c:	1b52      	subs	r2, r2, r5
 8006a5e:	6122      	str	r2, [r4, #16]
 8006a60:	f8cd a000 	str.w	sl, [sp]
 8006a64:	464b      	mov	r3, r9
 8006a66:	aa03      	add	r2, sp, #12
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	f7ff fee2 	bl	8006834 <_printf_common>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d14c      	bne.n	8006b0e <_printf_i+0x1fe>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	b004      	add	sp, #16
 8006a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7e:	4835      	ldr	r0, [pc, #212]	; (8006b54 <_printf_i+0x244>)
 8006a80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a84:	6829      	ldr	r1, [r5, #0]
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a8c:	6029      	str	r1, [r5, #0]
 8006a8e:	061d      	lsls	r5, r3, #24
 8006a90:	d514      	bpl.n	8006abc <_printf_i+0x1ac>
 8006a92:	07df      	lsls	r7, r3, #31
 8006a94:	bf44      	itt	mi
 8006a96:	f043 0320 	orrmi.w	r3, r3, #32
 8006a9a:	6023      	strmi	r3, [r4, #0]
 8006a9c:	b91e      	cbnz	r6, 8006aa6 <_printf_i+0x196>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	f023 0320 	bic.w	r3, r3, #32
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	2310      	movs	r3, #16
 8006aa8:	e7b0      	b.n	8006a0c <_printf_i+0xfc>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	f043 0320 	orr.w	r3, r3, #32
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	2378      	movs	r3, #120	; 0x78
 8006ab4:	4828      	ldr	r0, [pc, #160]	; (8006b58 <_printf_i+0x248>)
 8006ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aba:	e7e3      	b.n	8006a84 <_printf_i+0x174>
 8006abc:	0659      	lsls	r1, r3, #25
 8006abe:	bf48      	it	mi
 8006ac0:	b2b6      	uxthmi	r6, r6
 8006ac2:	e7e6      	b.n	8006a92 <_printf_i+0x182>
 8006ac4:	4615      	mov	r5, r2
 8006ac6:	e7bb      	b.n	8006a40 <_printf_i+0x130>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	6826      	ldr	r6, [r4, #0]
 8006acc:	6961      	ldr	r1, [r4, #20]
 8006ace:	1d18      	adds	r0, r3, #4
 8006ad0:	6028      	str	r0, [r5, #0]
 8006ad2:	0635      	lsls	r5, r6, #24
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	d501      	bpl.n	8006adc <_printf_i+0x1cc>
 8006ad8:	6019      	str	r1, [r3, #0]
 8006ada:	e002      	b.n	8006ae2 <_printf_i+0x1d2>
 8006adc:	0670      	lsls	r0, r6, #25
 8006ade:	d5fb      	bpl.n	8006ad8 <_printf_i+0x1c8>
 8006ae0:	8019      	strh	r1, [r3, #0]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	4615      	mov	r5, r2
 8006ae8:	e7ba      	b.n	8006a60 <_printf_i+0x150>
 8006aea:	682b      	ldr	r3, [r5, #0]
 8006aec:	1d1a      	adds	r2, r3, #4
 8006aee:	602a      	str	r2, [r5, #0]
 8006af0:	681d      	ldr	r5, [r3, #0]
 8006af2:	6862      	ldr	r2, [r4, #4]
 8006af4:	2100      	movs	r1, #0
 8006af6:	4628      	mov	r0, r5
 8006af8:	f7f9 fbf2 	bl	80002e0 <memchr>
 8006afc:	b108      	cbz	r0, 8006b02 <_printf_i+0x1f2>
 8006afe:	1b40      	subs	r0, r0, r5
 8006b00:	6060      	str	r0, [r4, #4]
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	6123      	str	r3, [r4, #16]
 8006b06:	2300      	movs	r3, #0
 8006b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b0c:	e7a8      	b.n	8006a60 <_printf_i+0x150>
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	462a      	mov	r2, r5
 8006b12:	4649      	mov	r1, r9
 8006b14:	4640      	mov	r0, r8
 8006b16:	47d0      	blx	sl
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d0ab      	beq.n	8006a74 <_printf_i+0x164>
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	079b      	lsls	r3, r3, #30
 8006b20:	d413      	bmi.n	8006b4a <_printf_i+0x23a>
 8006b22:	68e0      	ldr	r0, [r4, #12]
 8006b24:	9b03      	ldr	r3, [sp, #12]
 8006b26:	4298      	cmp	r0, r3
 8006b28:	bfb8      	it	lt
 8006b2a:	4618      	movlt	r0, r3
 8006b2c:	e7a4      	b.n	8006a78 <_printf_i+0x168>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4632      	mov	r2, r6
 8006b32:	4649      	mov	r1, r9
 8006b34:	4640      	mov	r0, r8
 8006b36:	47d0      	blx	sl
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d09b      	beq.n	8006a74 <_printf_i+0x164>
 8006b3c:	3501      	adds	r5, #1
 8006b3e:	68e3      	ldr	r3, [r4, #12]
 8006b40:	9903      	ldr	r1, [sp, #12]
 8006b42:	1a5b      	subs	r3, r3, r1
 8006b44:	42ab      	cmp	r3, r5
 8006b46:	dcf2      	bgt.n	8006b2e <_printf_i+0x21e>
 8006b48:	e7eb      	b.n	8006b22 <_printf_i+0x212>
 8006b4a:	2500      	movs	r5, #0
 8006b4c:	f104 0619 	add.w	r6, r4, #25
 8006b50:	e7f5      	b.n	8006b3e <_printf_i+0x22e>
 8006b52:	bf00      	nop
 8006b54:	08007229 	.word	0x08007229
 8006b58:	0800723a 	.word	0x0800723a

08006b5c <_sbrk_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4d06      	ldr	r5, [pc, #24]	; (8006b78 <_sbrk_r+0x1c>)
 8006b60:	2300      	movs	r3, #0
 8006b62:	4604      	mov	r4, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	f7fa fb0e 	bl	8001188 <_sbrk>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_sbrk_r+0x1a>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_sbrk_r+0x1a>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	2400024c 	.word	0x2400024c

08006b7c <__sread>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	460c      	mov	r4, r1
 8006b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b84:	f000 fab2 	bl	80070ec <_read_r>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	bfab      	itete	ge
 8006b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b90:	181b      	addge	r3, r3, r0
 8006b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b96:	bfac      	ite	ge
 8006b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b9a:	81a3      	strhlt	r3, [r4, #12]
 8006b9c:	bd10      	pop	{r4, pc}

08006b9e <__swrite>:
 8006b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba2:	461f      	mov	r7, r3
 8006ba4:	898b      	ldrh	r3, [r1, #12]
 8006ba6:	05db      	lsls	r3, r3, #23
 8006ba8:	4605      	mov	r5, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	4616      	mov	r6, r2
 8006bae:	d505      	bpl.n	8006bbc <__swrite+0x1e>
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f000 f9c8 	bl	8006f4c <_lseek_r>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	4632      	mov	r2, r6
 8006bca:	463b      	mov	r3, r7
 8006bcc:	4628      	mov	r0, r5
 8006bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd2:	f000 b869 	b.w	8006ca8 <_write_r>

08006bd6 <__sseek>:
 8006bd6:	b510      	push	{r4, lr}
 8006bd8:	460c      	mov	r4, r1
 8006bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bde:	f000 f9b5 	bl	8006f4c <_lseek_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	bf15      	itete	ne
 8006be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strheq	r3, [r4, #12]
 8006bf4:	bf18      	it	ne
 8006bf6:	81a3      	strhne	r3, [r4, #12]
 8006bf8:	bd10      	pop	{r4, pc}

08006bfa <__sclose>:
 8006bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfe:	f000 b8d3 	b.w	8006da8 <_close_r>
	...

08006c04 <__swbuf_r>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	460e      	mov	r6, r1
 8006c08:	4614      	mov	r4, r2
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	b118      	cbz	r0, 8006c16 <__swbuf_r+0x12>
 8006c0e:	6983      	ldr	r3, [r0, #24]
 8006c10:	b90b      	cbnz	r3, 8006c16 <__swbuf_r+0x12>
 8006c12:	f7ff fb81 	bl	8006318 <__sinit>
 8006c16:	4b21      	ldr	r3, [pc, #132]	; (8006c9c <__swbuf_r+0x98>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	d12b      	bne.n	8006c74 <__swbuf_r+0x70>
 8006c1c:	686c      	ldr	r4, [r5, #4]
 8006c1e:	69a3      	ldr	r3, [r4, #24]
 8006c20:	60a3      	str	r3, [r4, #8]
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	071a      	lsls	r2, r3, #28
 8006c26:	d52f      	bpl.n	8006c88 <__swbuf_r+0x84>
 8006c28:	6923      	ldr	r3, [r4, #16]
 8006c2a:	b36b      	cbz	r3, 8006c88 <__swbuf_r+0x84>
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	6820      	ldr	r0, [r4, #0]
 8006c30:	1ac0      	subs	r0, r0, r3
 8006c32:	6963      	ldr	r3, [r4, #20]
 8006c34:	b2f6      	uxtb	r6, r6
 8006c36:	4283      	cmp	r3, r0
 8006c38:	4637      	mov	r7, r6
 8006c3a:	dc04      	bgt.n	8006c46 <__swbuf_r+0x42>
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f948 	bl	8006ed4 <_fflush_r>
 8006c44:	bb30      	cbnz	r0, 8006c94 <__swbuf_r+0x90>
 8006c46:	68a3      	ldr	r3, [r4, #8]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	60a3      	str	r3, [r4, #8]
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	701e      	strb	r6, [r3, #0]
 8006c54:	6963      	ldr	r3, [r4, #20]
 8006c56:	3001      	adds	r0, #1
 8006c58:	4283      	cmp	r3, r0
 8006c5a:	d004      	beq.n	8006c66 <__swbuf_r+0x62>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	07db      	lsls	r3, r3, #31
 8006c60:	d506      	bpl.n	8006c70 <__swbuf_r+0x6c>
 8006c62:	2e0a      	cmp	r6, #10
 8006c64:	d104      	bne.n	8006c70 <__swbuf_r+0x6c>
 8006c66:	4621      	mov	r1, r4
 8006c68:	4628      	mov	r0, r5
 8006c6a:	f000 f933 	bl	8006ed4 <_fflush_r>
 8006c6e:	b988      	cbnz	r0, 8006c94 <__swbuf_r+0x90>
 8006c70:	4638      	mov	r0, r7
 8006c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <__swbuf_r+0x9c>)
 8006c76:	429c      	cmp	r4, r3
 8006c78:	d101      	bne.n	8006c7e <__swbuf_r+0x7a>
 8006c7a:	68ac      	ldr	r4, [r5, #8]
 8006c7c:	e7cf      	b.n	8006c1e <__swbuf_r+0x1a>
 8006c7e:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <__swbuf_r+0xa0>)
 8006c80:	429c      	cmp	r4, r3
 8006c82:	bf08      	it	eq
 8006c84:	68ec      	ldreq	r4, [r5, #12]
 8006c86:	e7ca      	b.n	8006c1e <__swbuf_r+0x1a>
 8006c88:	4621      	mov	r1, r4
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 f81e 	bl	8006ccc <__swsetup_r>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d0cb      	beq.n	8006c2c <__swbuf_r+0x28>
 8006c94:	f04f 37ff 	mov.w	r7, #4294967295
 8006c98:	e7ea      	b.n	8006c70 <__swbuf_r+0x6c>
 8006c9a:	bf00      	nop
 8006c9c:	080071d8 	.word	0x080071d8
 8006ca0:	080071f8 	.word	0x080071f8
 8006ca4:	080071b8 	.word	0x080071b8

08006ca8 <_write_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4d07      	ldr	r5, [pc, #28]	; (8006cc8 <_write_r+0x20>)
 8006cac:	4604      	mov	r4, r0
 8006cae:	4608      	mov	r0, r1
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	602a      	str	r2, [r5, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f7fa fa15 	bl	80010e6 <_write>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_write_r+0x1e>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_write_r+0x1e>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	2400024c 	.word	0x2400024c

08006ccc <__swsetup_r>:
 8006ccc:	4b32      	ldr	r3, [pc, #200]	; (8006d98 <__swsetup_r+0xcc>)
 8006cce:	b570      	push	{r4, r5, r6, lr}
 8006cd0:	681d      	ldr	r5, [r3, #0]
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	b125      	cbz	r5, 8006ce2 <__swsetup_r+0x16>
 8006cd8:	69ab      	ldr	r3, [r5, #24]
 8006cda:	b913      	cbnz	r3, 8006ce2 <__swsetup_r+0x16>
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f7ff fb1b 	bl	8006318 <__sinit>
 8006ce2:	4b2e      	ldr	r3, [pc, #184]	; (8006d9c <__swsetup_r+0xd0>)
 8006ce4:	429c      	cmp	r4, r3
 8006ce6:	d10f      	bne.n	8006d08 <__swsetup_r+0x3c>
 8006ce8:	686c      	ldr	r4, [r5, #4]
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cf0:	0719      	lsls	r1, r3, #28
 8006cf2:	d42c      	bmi.n	8006d4e <__swsetup_r+0x82>
 8006cf4:	06dd      	lsls	r5, r3, #27
 8006cf6:	d411      	bmi.n	8006d1c <__swsetup_r+0x50>
 8006cf8:	2309      	movs	r3, #9
 8006cfa:	6033      	str	r3, [r6, #0]
 8006cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	f04f 30ff 	mov.w	r0, #4294967295
 8006d06:	e03e      	b.n	8006d86 <__swsetup_r+0xba>
 8006d08:	4b25      	ldr	r3, [pc, #148]	; (8006da0 <__swsetup_r+0xd4>)
 8006d0a:	429c      	cmp	r4, r3
 8006d0c:	d101      	bne.n	8006d12 <__swsetup_r+0x46>
 8006d0e:	68ac      	ldr	r4, [r5, #8]
 8006d10:	e7eb      	b.n	8006cea <__swsetup_r+0x1e>
 8006d12:	4b24      	ldr	r3, [pc, #144]	; (8006da4 <__swsetup_r+0xd8>)
 8006d14:	429c      	cmp	r4, r3
 8006d16:	bf08      	it	eq
 8006d18:	68ec      	ldreq	r4, [r5, #12]
 8006d1a:	e7e6      	b.n	8006cea <__swsetup_r+0x1e>
 8006d1c:	0758      	lsls	r0, r3, #29
 8006d1e:	d512      	bpl.n	8006d46 <__swsetup_r+0x7a>
 8006d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d22:	b141      	cbz	r1, 8006d36 <__swsetup_r+0x6a>
 8006d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d28:	4299      	cmp	r1, r3
 8006d2a:	d002      	beq.n	8006d32 <__swsetup_r+0x66>
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 f991 	bl	8007054 <_free_r>
 8006d32:	2300      	movs	r3, #0
 8006d34:	6363      	str	r3, [r4, #52]	; 0x34
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6063      	str	r3, [r4, #4]
 8006d42:	6923      	ldr	r3, [r4, #16]
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	f043 0308 	orr.w	r3, r3, #8
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	6923      	ldr	r3, [r4, #16]
 8006d50:	b94b      	cbnz	r3, 8006d66 <__swsetup_r+0x9a>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d5c:	d003      	beq.n	8006d66 <__swsetup_r+0x9a>
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 f92b 	bl	8006fbc <__smakebuf_r>
 8006d66:	89a0      	ldrh	r0, [r4, #12]
 8006d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d6c:	f010 0301 	ands.w	r3, r0, #1
 8006d70:	d00a      	beq.n	8006d88 <__swsetup_r+0xbc>
 8006d72:	2300      	movs	r3, #0
 8006d74:	60a3      	str	r3, [r4, #8]
 8006d76:	6963      	ldr	r3, [r4, #20]
 8006d78:	425b      	negs	r3, r3
 8006d7a:	61a3      	str	r3, [r4, #24]
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	b943      	cbnz	r3, 8006d92 <__swsetup_r+0xc6>
 8006d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d84:	d1ba      	bne.n	8006cfc <__swsetup_r+0x30>
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	0781      	lsls	r1, r0, #30
 8006d8a:	bf58      	it	pl
 8006d8c:	6963      	ldrpl	r3, [r4, #20]
 8006d8e:	60a3      	str	r3, [r4, #8]
 8006d90:	e7f4      	b.n	8006d7c <__swsetup_r+0xb0>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e7f7      	b.n	8006d86 <__swsetup_r+0xba>
 8006d96:	bf00      	nop
 8006d98:	24000010 	.word	0x24000010
 8006d9c:	080071d8 	.word	0x080071d8
 8006da0:	080071f8 	.word	0x080071f8
 8006da4:	080071b8 	.word	0x080071b8

08006da8 <_close_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4d06      	ldr	r5, [pc, #24]	; (8006dc4 <_close_r+0x1c>)
 8006dac:	2300      	movs	r3, #0
 8006dae:	4604      	mov	r4, r0
 8006db0:	4608      	mov	r0, r1
 8006db2:	602b      	str	r3, [r5, #0]
 8006db4:	f7fa f9b3 	bl	800111e <_close>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_close_r+0x1a>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_close_r+0x1a>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	2400024c 	.word	0x2400024c

08006dc8 <__sflush_r>:
 8006dc8:	898a      	ldrh	r2, [r1, #12]
 8006dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dce:	4605      	mov	r5, r0
 8006dd0:	0710      	lsls	r0, r2, #28
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	d458      	bmi.n	8006e88 <__sflush_r+0xc0>
 8006dd6:	684b      	ldr	r3, [r1, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dc05      	bgt.n	8006de8 <__sflush_r+0x20>
 8006ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dc02      	bgt.n	8006de8 <__sflush_r+0x20>
 8006de2:	2000      	movs	r0, #0
 8006de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dea:	2e00      	cmp	r6, #0
 8006dec:	d0f9      	beq.n	8006de2 <__sflush_r+0x1a>
 8006dee:	2300      	movs	r3, #0
 8006df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006df4:	682f      	ldr	r7, [r5, #0]
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	d032      	beq.n	8006e60 <__sflush_r+0x98>
 8006dfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	075a      	lsls	r2, r3, #29
 8006e00:	d505      	bpl.n	8006e0e <__sflush_r+0x46>
 8006e02:	6863      	ldr	r3, [r4, #4]
 8006e04:	1ac0      	subs	r0, r0, r3
 8006e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e08:	b10b      	cbz	r3, 8006e0e <__sflush_r+0x46>
 8006e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e0c:	1ac0      	subs	r0, r0, r3
 8006e0e:	2300      	movs	r3, #0
 8006e10:	4602      	mov	r2, r0
 8006e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e14:	6a21      	ldr	r1, [r4, #32]
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b0      	blx	r6
 8006e1a:	1c43      	adds	r3, r0, #1
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	d106      	bne.n	8006e2e <__sflush_r+0x66>
 8006e20:	6829      	ldr	r1, [r5, #0]
 8006e22:	291d      	cmp	r1, #29
 8006e24:	d82c      	bhi.n	8006e80 <__sflush_r+0xb8>
 8006e26:	4a2a      	ldr	r2, [pc, #168]	; (8006ed0 <__sflush_r+0x108>)
 8006e28:	40ca      	lsrs	r2, r1
 8006e2a:	07d6      	lsls	r6, r2, #31
 8006e2c:	d528      	bpl.n	8006e80 <__sflush_r+0xb8>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	6062      	str	r2, [r4, #4]
 8006e32:	04d9      	lsls	r1, r3, #19
 8006e34:	6922      	ldr	r2, [r4, #16]
 8006e36:	6022      	str	r2, [r4, #0]
 8006e38:	d504      	bpl.n	8006e44 <__sflush_r+0x7c>
 8006e3a:	1c42      	adds	r2, r0, #1
 8006e3c:	d101      	bne.n	8006e42 <__sflush_r+0x7a>
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	b903      	cbnz	r3, 8006e44 <__sflush_r+0x7c>
 8006e42:	6560      	str	r0, [r4, #84]	; 0x54
 8006e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e46:	602f      	str	r7, [r5, #0]
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	d0ca      	beq.n	8006de2 <__sflush_r+0x1a>
 8006e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e50:	4299      	cmp	r1, r3
 8006e52:	d002      	beq.n	8006e5a <__sflush_r+0x92>
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 f8fd 	bl	8007054 <_free_r>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e5e:	e7c1      	b.n	8006de4 <__sflush_r+0x1c>
 8006e60:	6a21      	ldr	r1, [r4, #32]
 8006e62:	2301      	movs	r3, #1
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b0      	blx	r6
 8006e68:	1c41      	adds	r1, r0, #1
 8006e6a:	d1c7      	bne.n	8006dfc <__sflush_r+0x34>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0c4      	beq.n	8006dfc <__sflush_r+0x34>
 8006e72:	2b1d      	cmp	r3, #29
 8006e74:	d001      	beq.n	8006e7a <__sflush_r+0xb2>
 8006e76:	2b16      	cmp	r3, #22
 8006e78:	d101      	bne.n	8006e7e <__sflush_r+0xb6>
 8006e7a:	602f      	str	r7, [r5, #0]
 8006e7c:	e7b1      	b.n	8006de2 <__sflush_r+0x1a>
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	e7ad      	b.n	8006de4 <__sflush_r+0x1c>
 8006e88:	690f      	ldr	r7, [r1, #16]
 8006e8a:	2f00      	cmp	r7, #0
 8006e8c:	d0a9      	beq.n	8006de2 <__sflush_r+0x1a>
 8006e8e:	0793      	lsls	r3, r2, #30
 8006e90:	680e      	ldr	r6, [r1, #0]
 8006e92:	bf08      	it	eq
 8006e94:	694b      	ldreq	r3, [r1, #20]
 8006e96:	600f      	str	r7, [r1, #0]
 8006e98:	bf18      	it	ne
 8006e9a:	2300      	movne	r3, #0
 8006e9c:	eba6 0807 	sub.w	r8, r6, r7
 8006ea0:	608b      	str	r3, [r1, #8]
 8006ea2:	f1b8 0f00 	cmp.w	r8, #0
 8006ea6:	dd9c      	ble.n	8006de2 <__sflush_r+0x1a>
 8006ea8:	6a21      	ldr	r1, [r4, #32]
 8006eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006eac:	4643      	mov	r3, r8
 8006eae:	463a      	mov	r2, r7
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b0      	blx	r6
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	dc06      	bgt.n	8006ec6 <__sflush_r+0xfe>
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec4:	e78e      	b.n	8006de4 <__sflush_r+0x1c>
 8006ec6:	4407      	add	r7, r0
 8006ec8:	eba8 0800 	sub.w	r8, r8, r0
 8006ecc:	e7e9      	b.n	8006ea2 <__sflush_r+0xda>
 8006ece:	bf00      	nop
 8006ed0:	20400001 	.word	0x20400001

08006ed4 <_fflush_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	690b      	ldr	r3, [r1, #16]
 8006ed8:	4605      	mov	r5, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	b913      	cbnz	r3, 8006ee4 <_fflush_r+0x10>
 8006ede:	2500      	movs	r5, #0
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	b118      	cbz	r0, 8006eee <_fflush_r+0x1a>
 8006ee6:	6983      	ldr	r3, [r0, #24]
 8006ee8:	b90b      	cbnz	r3, 8006eee <_fflush_r+0x1a>
 8006eea:	f7ff fa15 	bl	8006318 <__sinit>
 8006eee:	4b14      	ldr	r3, [pc, #80]	; (8006f40 <_fflush_r+0x6c>)
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	d11b      	bne.n	8006f2c <_fflush_r+0x58>
 8006ef4:	686c      	ldr	r4, [r5, #4]
 8006ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ef      	beq.n	8006ede <_fflush_r+0xa>
 8006efe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f00:	07d0      	lsls	r0, r2, #31
 8006f02:	d404      	bmi.n	8006f0e <_fflush_r+0x3a>
 8006f04:	0599      	lsls	r1, r3, #22
 8006f06:	d402      	bmi.n	8006f0e <_fflush_r+0x3a>
 8006f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0a:	f7ff faa3 	bl	8006454 <__retarget_lock_acquire_recursive>
 8006f0e:	4628      	mov	r0, r5
 8006f10:	4621      	mov	r1, r4
 8006f12:	f7ff ff59 	bl	8006dc8 <__sflush_r>
 8006f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f18:	07da      	lsls	r2, r3, #31
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	d4e0      	bmi.n	8006ee0 <_fflush_r+0xc>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	059b      	lsls	r3, r3, #22
 8006f22:	d4dd      	bmi.n	8006ee0 <_fflush_r+0xc>
 8006f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f26:	f7ff fa96 	bl	8006456 <__retarget_lock_release_recursive>
 8006f2a:	e7d9      	b.n	8006ee0 <_fflush_r+0xc>
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <_fflush_r+0x70>)
 8006f2e:	429c      	cmp	r4, r3
 8006f30:	d101      	bne.n	8006f36 <_fflush_r+0x62>
 8006f32:	68ac      	ldr	r4, [r5, #8]
 8006f34:	e7df      	b.n	8006ef6 <_fflush_r+0x22>
 8006f36:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <_fflush_r+0x74>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	bf08      	it	eq
 8006f3c:	68ec      	ldreq	r4, [r5, #12]
 8006f3e:	e7da      	b.n	8006ef6 <_fflush_r+0x22>
 8006f40:	080071d8 	.word	0x080071d8
 8006f44:	080071f8 	.word	0x080071f8
 8006f48:	080071b8 	.word	0x080071b8

08006f4c <_lseek_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	; (8006f6c <_lseek_r+0x20>)
 8006f50:	4604      	mov	r4, r0
 8006f52:	4608      	mov	r0, r1
 8006f54:	4611      	mov	r1, r2
 8006f56:	2200      	movs	r2, #0
 8006f58:	602a      	str	r2, [r5, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f7fa f906 	bl	800116c <_lseek>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_lseek_r+0x1e>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_lseek_r+0x1e>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	2400024c 	.word	0x2400024c

08006f70 <__swhatbuf_r>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	460e      	mov	r6, r1
 8006f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f78:	2900      	cmp	r1, #0
 8006f7a:	b096      	sub	sp, #88	; 0x58
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	da08      	bge.n	8006f94 <__swhatbuf_r+0x24>
 8006f82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	602a      	str	r2, [r5, #0]
 8006f8a:	061a      	lsls	r2, r3, #24
 8006f8c:	d410      	bmi.n	8006fb0 <__swhatbuf_r+0x40>
 8006f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f92:	e00e      	b.n	8006fb2 <__swhatbuf_r+0x42>
 8006f94:	466a      	mov	r2, sp
 8006f96:	f000 f8bb 	bl	8007110 <_fstat_r>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	dbf1      	blt.n	8006f82 <__swhatbuf_r+0x12>
 8006f9e:	9a01      	ldr	r2, [sp, #4]
 8006fa0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fa4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fa8:	425a      	negs	r2, r3
 8006faa:	415a      	adcs	r2, r3
 8006fac:	602a      	str	r2, [r5, #0]
 8006fae:	e7ee      	b.n	8006f8e <__swhatbuf_r+0x1e>
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	b016      	add	sp, #88	; 0x58
 8006fb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006fbc <__smakebuf_r>:
 8006fbc:	898b      	ldrh	r3, [r1, #12]
 8006fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fc0:	079d      	lsls	r5, r3, #30
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	d507      	bpl.n	8006fd8 <__smakebuf_r+0x1c>
 8006fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	6163      	str	r3, [r4, #20]
 8006fd4:	b002      	add	sp, #8
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	ab01      	add	r3, sp, #4
 8006fda:	466a      	mov	r2, sp
 8006fdc:	f7ff ffc8 	bl	8006f70 <__swhatbuf_r>
 8006fe0:	9900      	ldr	r1, [sp, #0]
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7ff fa57 	bl	8006498 <_malloc_r>
 8006fea:	b948      	cbnz	r0, 8007000 <__smakebuf_r+0x44>
 8006fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff0:	059a      	lsls	r2, r3, #22
 8006ff2:	d4ef      	bmi.n	8006fd4 <__smakebuf_r+0x18>
 8006ff4:	f023 0303 	bic.w	r3, r3, #3
 8006ff8:	f043 0302 	orr.w	r3, r3, #2
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	e7e3      	b.n	8006fc8 <__smakebuf_r+0xc>
 8007000:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <__smakebuf_r+0x7c>)
 8007002:	62b3      	str	r3, [r6, #40]	; 0x28
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	6020      	str	r0, [r4, #0]
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	9b00      	ldr	r3, [sp, #0]
 8007010:	6163      	str	r3, [r4, #20]
 8007012:	9b01      	ldr	r3, [sp, #4]
 8007014:	6120      	str	r0, [r4, #16]
 8007016:	b15b      	cbz	r3, 8007030 <__smakebuf_r+0x74>
 8007018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f889 	bl	8007134 <_isatty_r>
 8007022:	b128      	cbz	r0, 8007030 <__smakebuf_r+0x74>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	89a0      	ldrh	r0, [r4, #12]
 8007032:	4305      	orrs	r5, r0
 8007034:	81a5      	strh	r5, [r4, #12]
 8007036:	e7cd      	b.n	8006fd4 <__smakebuf_r+0x18>
 8007038:	080062b1 	.word	0x080062b1

0800703c <__malloc_lock>:
 800703c:	4801      	ldr	r0, [pc, #4]	; (8007044 <__malloc_lock+0x8>)
 800703e:	f7ff ba09 	b.w	8006454 <__retarget_lock_acquire_recursive>
 8007042:	bf00      	nop
 8007044:	24000240 	.word	0x24000240

08007048 <__malloc_unlock>:
 8007048:	4801      	ldr	r0, [pc, #4]	; (8007050 <__malloc_unlock+0x8>)
 800704a:	f7ff ba04 	b.w	8006456 <__retarget_lock_release_recursive>
 800704e:	bf00      	nop
 8007050:	24000240 	.word	0x24000240

08007054 <_free_r>:
 8007054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007056:	2900      	cmp	r1, #0
 8007058:	d044      	beq.n	80070e4 <_free_r+0x90>
 800705a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800705e:	9001      	str	r0, [sp, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	f1a1 0404 	sub.w	r4, r1, #4
 8007066:	bfb8      	it	lt
 8007068:	18e4      	addlt	r4, r4, r3
 800706a:	f7ff ffe7 	bl	800703c <__malloc_lock>
 800706e:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <_free_r+0x94>)
 8007070:	9801      	ldr	r0, [sp, #4]
 8007072:	6813      	ldr	r3, [r2, #0]
 8007074:	b933      	cbnz	r3, 8007084 <_free_r+0x30>
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	6014      	str	r4, [r2, #0]
 800707a:	b003      	add	sp, #12
 800707c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007080:	f7ff bfe2 	b.w	8007048 <__malloc_unlock>
 8007084:	42a3      	cmp	r3, r4
 8007086:	d908      	bls.n	800709a <_free_r+0x46>
 8007088:	6825      	ldr	r5, [r4, #0]
 800708a:	1961      	adds	r1, r4, r5
 800708c:	428b      	cmp	r3, r1
 800708e:	bf01      	itttt	eq
 8007090:	6819      	ldreq	r1, [r3, #0]
 8007092:	685b      	ldreq	r3, [r3, #4]
 8007094:	1949      	addeq	r1, r1, r5
 8007096:	6021      	streq	r1, [r4, #0]
 8007098:	e7ed      	b.n	8007076 <_free_r+0x22>
 800709a:	461a      	mov	r2, r3
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b10b      	cbz	r3, 80070a4 <_free_r+0x50>
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d9fa      	bls.n	800709a <_free_r+0x46>
 80070a4:	6811      	ldr	r1, [r2, #0]
 80070a6:	1855      	adds	r5, r2, r1
 80070a8:	42a5      	cmp	r5, r4
 80070aa:	d10b      	bne.n	80070c4 <_free_r+0x70>
 80070ac:	6824      	ldr	r4, [r4, #0]
 80070ae:	4421      	add	r1, r4
 80070b0:	1854      	adds	r4, r2, r1
 80070b2:	42a3      	cmp	r3, r4
 80070b4:	6011      	str	r1, [r2, #0]
 80070b6:	d1e0      	bne.n	800707a <_free_r+0x26>
 80070b8:	681c      	ldr	r4, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	6053      	str	r3, [r2, #4]
 80070be:	4421      	add	r1, r4
 80070c0:	6011      	str	r1, [r2, #0]
 80070c2:	e7da      	b.n	800707a <_free_r+0x26>
 80070c4:	d902      	bls.n	80070cc <_free_r+0x78>
 80070c6:	230c      	movs	r3, #12
 80070c8:	6003      	str	r3, [r0, #0]
 80070ca:	e7d6      	b.n	800707a <_free_r+0x26>
 80070cc:	6825      	ldr	r5, [r4, #0]
 80070ce:	1961      	adds	r1, r4, r5
 80070d0:	428b      	cmp	r3, r1
 80070d2:	bf04      	itt	eq
 80070d4:	6819      	ldreq	r1, [r3, #0]
 80070d6:	685b      	ldreq	r3, [r3, #4]
 80070d8:	6063      	str	r3, [r4, #4]
 80070da:	bf04      	itt	eq
 80070dc:	1949      	addeq	r1, r1, r5
 80070de:	6021      	streq	r1, [r4, #0]
 80070e0:	6054      	str	r4, [r2, #4]
 80070e2:	e7ca      	b.n	800707a <_free_r+0x26>
 80070e4:	b003      	add	sp, #12
 80070e6:	bd30      	pop	{r4, r5, pc}
 80070e8:	24000244 	.word	0x24000244

080070ec <_read_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d07      	ldr	r5, [pc, #28]	; (800710c <_read_r+0x20>)
 80070f0:	4604      	mov	r4, r0
 80070f2:	4608      	mov	r0, r1
 80070f4:	4611      	mov	r1, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	602a      	str	r2, [r5, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f7f9 ffd6 	bl	80010ac <_read>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_read_r+0x1e>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_read_r+0x1e>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	2400024c 	.word	0x2400024c

08007110 <_fstat_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d07      	ldr	r5, [pc, #28]	; (8007130 <_fstat_r+0x20>)
 8007114:	2300      	movs	r3, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	4611      	mov	r1, r2
 800711c:	602b      	str	r3, [r5, #0]
 800711e:	f7fa f80a 	bl	8001136 <_fstat>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d102      	bne.n	800712c <_fstat_r+0x1c>
 8007126:	682b      	ldr	r3, [r5, #0]
 8007128:	b103      	cbz	r3, 800712c <_fstat_r+0x1c>
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	bd38      	pop	{r3, r4, r5, pc}
 800712e:	bf00      	nop
 8007130:	2400024c 	.word	0x2400024c

08007134 <_isatty_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d06      	ldr	r5, [pc, #24]	; (8007150 <_isatty_r+0x1c>)
 8007138:	2300      	movs	r3, #0
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	602b      	str	r3, [r5, #0]
 8007140:	f7fa f809 	bl	8001156 <_isatty>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_isatty_r+0x1a>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_isatty_r+0x1a>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	2400024c 	.word	0x2400024c

08007154 <_init>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	bf00      	nop
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr

08007160 <_fini>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr
