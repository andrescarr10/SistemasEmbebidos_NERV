
freeRTOS_stm3h7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009218  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f4  080095f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095fc  080095fc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08009604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b70  24000078  0800967c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004be8  0800967c  00024be8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c07  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000435b  00000000  00000000  00046cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  0004b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  0004cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d6a8  00000000  00000000  0004e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022936  00000000  00000000  0008bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00193f20  00000000  00000000  000ae72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024264e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080b4  00000000  00000000  002426a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080094a0 	.word	0x080094a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	080094a0 	.word	0x080094a0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <main+0xb0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 f9e9 	bl	8000bb0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fc43 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f845 	bl	8000870 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <main+0xb0>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <main+0xb0>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <main+0xb0>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f000 ff5b 	bl	80016c0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f000 ff71 	bl	80016f4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <main+0xb0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 f9bb 	bl	8000bb0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f91f 	bl	8000a7c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083e:	f000 f8d1 	bl	80009e4 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000842:	f000 f88f 	bl	8000964 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000846:	f005 f873 	bl	8005930 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <main+0xb4>)
 800084c:	2100      	movs	r1, #0
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <main+0xb8>)
 8000850:	f005 f8b8 	bl	80059c4 <osThreadNew>
 8000854:	4603      	mov	r3, r0
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <main+0xbc>)
 8000858:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800085a:	f005 f88d 	bl	8005978 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0xae>
 8000860:	58024400 	.word	0x58024400
 8000864:	08009510 	.word	0x08009510
 8000868:	08000b65 	.word	0x08000b65
 800086c:	24000170 	.word	0x24000170

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	; 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	224c      	movs	r2, #76	; 0x4c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f007 ff05 	bl	800868e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f007 feff 	bl	800868e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000890:	2004      	movs	r0, #4
 8000892:	f001 f86b 	bl	800196c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <SystemClock_Config+0xec>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a2f      	ldr	r2, [pc, #188]	; (800095c <SystemClock_Config+0xec>)
 80008a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <SystemClock_Config+0xec>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <SystemClock_Config+0xf0>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b4:	4a2a      	ldr	r2, [pc, #168]	; (8000960 <SystemClock_Config+0xf0>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <SystemClock_Config+0xf0>)
 80008be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c8:	bf00      	nop
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <SystemClock_Config+0xec>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d6:	d1f8      	bne.n	80008ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008ee:	23f0      	movs	r3, #240	; 0xf0
 80008f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008fe:	2308      	movs	r3, #8
 8000900:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000902:	2300      	movs	r3, #0
 8000904:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f886 	bl	8001a20 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800091a:	f000 f949 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	233f      	movs	r3, #63	; 0x3f
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2303      	movs	r3, #3
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800092a:	2308      	movs	r3, #8
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2104      	movs	r1, #4
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fc99 	bl	800227c <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000950:	f000 f92e 	bl	8000bb0 <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3770      	adds	r7, #112	; 0x70
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58024800 	.word	0x58024800
 8000960:	58000400 	.word	0x58000400

08000964 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_I2C2_Init+0x74>)
 800096a:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <MX_I2C2_Init+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <MX_I2C2_Init+0x7c>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_I2C2_Init+0x74>)
 800097c:	2201      	movs	r2, #1
 800097e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <MX_I2C2_Init+0x74>)
 80009a0:	f000 febc 	bl	800171c <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009aa:	f000 f901 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <MX_I2C2_Init+0x74>)
 80009b2:	f000 ff43 	bl	800183c <HAL_I2CEx_ConfigAnalogFilter>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009bc:	f000 f8f8 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_I2C2_Init+0x74>)
 80009c4:	f000 ff85 	bl	80018d2 <HAL_I2CEx_ConfigDigitalFilter>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 f8ef 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000094 	.word	0x24000094
 80009dc:	40005800 	.word	0x40005800
 80009e0:	307075b1 	.word	0x307075b1

080009e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009ea:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <MX_USART3_UART_Init+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a2e:	f003 fe35 	bl	800469c <HAL_UART_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 f8ba 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a40:	f004 fe68 	bl	8005714 <HAL_UARTEx_SetTxFifoThreshold>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4a:	f000 f8b1 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4808      	ldr	r0, [pc, #32]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a52:	f004 fe9d 	bl	8005790 <HAL_UARTEx_SetRxFifoThreshold>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a5c:	f000 f8a8 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_USART3_UART_Init+0x90>)
 8000a62:	f004 fe1e 	bl	80056a2 <HAL_UARTEx_DisableFifoMode>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a6c:	f000 f8a0 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	240000e0 	.word	0x240000e0
 8000a78:	40004800 	.word	0x40004800

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b10:	4812      	ldr	r0, [pc, #72]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000b12:	f000 fda1 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_GPIO_Init+0xe4>)
 8000b2c:	f000 fbe4 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b30:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0xe0>)
 8000b4a:	f000 fbd5 	bl	80012f8 <HAL_GPIO_Init>

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400
 8000b60:	58020800 	.word	0x58020800

08000b64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <StartDefaultTask+0x20>)
 8000b70:	f000 fd8b 	bl	800168a <HAL_GPIO_TogglePin>
	  printf("Hello from FreeRTOS STM32H7 world!");
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <StartDefaultTask+0x24>)
 8000b76:	f007 fe27 	bl	80087c8 <iprintf>
    osDelay(1000);
 8000b7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b7e:	f004 ffb3 	bl	8005ae8 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b82:	e7f3      	b.n	8000b6c <StartDefaultTask+0x8>
 8000b84:	58020400 	.word	0x58020400
 8000b88:	080094c4 	.word	0x080094c4

08000b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9e:	f000 fa9f 	bl	80010e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40001400 	.word	0x40001400

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bc4:	1d39      	adds	r1, r7, #4
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <__io_putchar+0x20>)
 8000bce:	f003 fdb5 	bl	800473c <HAL_UART_Transmit>
  return ch;
 8000bd2:	687b      	ldr	r3, [r7, #4]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	240000e0 	.word	0x240000e0

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x38>)
 8000be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bec:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_MspInit+0x38>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_MspInit+0x38>)
 8000bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	210f      	movs	r1, #15
 8000c08:	f06f 0001 	mvn.w	r0, #1
 8000c0c:	f000 fb4c 	bl	80012a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	58024400 	.word	0x58024400

08000c1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0b8      	sub	sp, #224	; 0xe0
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	22bc      	movs	r2, #188	; 0xbc
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f007 fd26 	bl	800868e <memset>
  if(hi2c->Instance==I2C2)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a25      	ldr	r2, [pc, #148]	; (8000cdc <HAL_I2C_MspInit+0xc0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d142      	bne.n	8000cd2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fedc 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c66:	f7ff ffa3 	bl	8000bb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_I2C_MspInit+0xc4>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_I2C_MspInit+0xc4>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_I2C_MspInit+0xc4>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c90:	2312      	movs	r3, #18
 8000c92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cac:	4619      	mov	r1, r3
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <HAL_I2C_MspInit+0xc8>)
 8000cb0:	f000 fb22 	bl	80012f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_I2C_MspInit+0xc4>)
 8000cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <HAL_I2C_MspInit+0xc4>)
 8000cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_I2C_MspInit+0xc4>)
 8000cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	37e0      	adds	r7, #224	; 0xe0
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40005800 	.word	0x40005800
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	58020400 	.word	0x58020400

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0b8      	sub	sp, #224	; 0xe0
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	22bc      	movs	r2, #188	; 0xbc
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f007 fcc0 	bl	800868e <memset>
  if(huart->Instance==USART3)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <HAL_UART_MspInit+0xc0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d142      	bne.n	8000d9e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fe76 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d32:	f7ff ff3d 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_UART_MspInit+0xc4>)
 8000d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <HAL_UART_MspInit+0xc4>)
 8000d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_UART_MspInit+0xc4>)
 8000d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0xc4>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	4a14      	ldr	r2, [pc, #80]	; (8000dac <HAL_UART_MspInit+0xc4>)
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0xc4>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0xc8>)
 8000d9a:	f000 faad 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	37e0      	adds	r7, #224	; 0xe0
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004800 	.word	0x40004800
 8000dac:	58024400 	.word	0x58024400
 8000db0:	58020c00 	.word	0x58020c00

08000db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b090      	sub	sp, #64	; 0x40
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	d827      	bhi.n	8000e12 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	2037      	movs	r0, #55	; 0x37
 8000dc8:	f000 fa6e 	bl	80012a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000dcc:	2037      	movs	r0, #55	; 0x37
 8000dce:	f000 fa85 	bl	80012dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000dd2:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_InitTick+0xc4>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <HAL_InitTick+0xc8>)
 8000dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dde:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <HAL_InitTick+0xc8>)
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <HAL_InitTick+0xc8>)
 8000dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dee:	f003 0320 	and.w	r3, r3, #32
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df6:	f107 0210 	add.w	r2, r7, #16
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fdc7 	bl	8002994 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d106      	bne.n	8000e1e <HAL_InitTick+0x6a>
 8000e10:	e001      	b.n	8000e16 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e02b      	b.n	8000e6e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e16:	f001 fd91 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8000e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e1c:	e004      	b.n	8000e28 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e1e:	f001 fd8d 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8000e22:	4603      	mov	r3, r0
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e2a:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <HAL_InitTick+0xcc>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	3b01      	subs	r3, #1
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_InitTick+0xd0>)
 8000e38:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_InitTick+0xd4>)
 8000e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_InitTick+0xd0>)
 8000e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e42:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <HAL_InitTick+0xd0>)
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_InitTick+0xd0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_InitTick+0xd0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <HAL_InitTick+0xd0>)
 8000e58:	f003 f946 	bl	80040e8 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d104      	bne.n	8000e6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000e62:	4808      	ldr	r0, [pc, #32]	; (8000e84 <HAL_InitTick+0xd0>)
 8000e64:	f003 f9a2 	bl	80041ac <HAL_TIM_Base_Start_IT>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	e000      	b.n	8000e6e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3740      	adds	r7, #64	; 0x40
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	24000008 	.word	0x24000008
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	431bde83 	.word	0x431bde83
 8000e84:	24000174 	.word	0x24000174
 8000e88:	40001400 	.word	0x40001400

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM7_IRQHandler+0x10>)
 8000ebe:	f003 f9ed 	bl	800429c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24000174 	.word	0x24000174

08000ecc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ede:	f3af 8000 	nop.w
 8000ee2:	4601      	mov	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
	}

return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e009      	b.n	8000f2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fe4b 	bl	8000bbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf1      	blt.n	8000f18 <_write+0x12>
	}
	return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_close>:

int _close(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f66:	605a      	str	r2, [r3, #4]
	return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_isatty>:

int _isatty(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
	return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f007 fa28 	bl	800842c <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	24080000 	.word	0x24080000
 8001008:	00000400 	.word	0x00000400
 800100c:	240001c0 	.word	0x240001c0
 8001010:	24004be8 	.word	0x24004be8

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff fb34 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f007 faef 	bl	8008624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fbb3 	bl	80007b0 <main>
  bx  lr
 800104a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001050:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001054:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001058:	08009604 	.word	0x08009604
  ldr r2, =_sbss
 800105c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001060:	24004be8 	.word	0x24004be8

08001064 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC3_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106e:	2003      	movs	r0, #3
 8001070:	f000 f90f 	bl	8001292 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001074:	f001 fab8 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8001078:	4602      	mov	r2, r0
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_Init+0x68>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	4913      	ldr	r1, [pc, #76]	; (80010d4 <HAL_Init+0x6c>)
 8001086:	5ccb      	ldrb	r3, [r1, r3]
 8001088:	f003 031f 	and.w	r3, r3, #31
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_Init+0x68>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_Init+0x6c>)
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_Init+0x70>)
 80010aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_Init+0x74>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b2:	200f      	movs	r0, #15
 80010b4:	f7ff fe7e 	bl	8000db4 <HAL_InitTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e002      	b.n	80010c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010c2:	f7ff fd8d 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	58024400 	.word	0x58024400
 80010d4:	08009500 	.word	0x08009500
 80010d8:	24000004 	.word	0x24000004
 80010dc:	24000000 	.word	0x24000000

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2400000c 	.word	0x2400000c
 8001104:	240001c4 	.word	0x240001c4

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	240001c4 	.word	0x240001c4

08001120 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetREVID+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0c1b      	lsrs	r3, r3, #16
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	5c001000 	.word	0x5c001000

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	4313      	orrs	r3, r2
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	05fa0000 	.word	0x05fa0000

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff4c 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b6:	f7ff ff63 	bl	8001180 <__NVIC_GetPriorityGrouping>
 80012ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	6978      	ldr	r0, [r7, #20]
 80012c2:	f7ff ffb3 	bl	800122c <NVIC_EncodePriority>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff82 	bl	80011d8 <__NVIC_SetPriority>
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff56 	bl	800119c <__NVIC_EnableIRQ>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001306:	4b89      	ldr	r3, [pc, #548]	; (800152c <HAL_GPIO_Init+0x234>)
 8001308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800130a:	e194      	b.n	8001636 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8186 	beq.w	8001630 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d005      	beq.n	800133c <HAL_GPIO_Init+0x44>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d017      	beq.n	80013da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d123      	bne.n	800142e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	69b9      	ldr	r1, [r7, #24]
 800142a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0203 	and.w	r2, r3, #3
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80e0 	beq.w	8001630 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_GPIO_Init+0x238>)
 8001472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001476:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <HAL_GPIO_Init+0x238>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_GPIO_Init+0x238>)
 8001482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a29      	ldr	r2, [pc, #164]	; (8001534 <HAL_GPIO_Init+0x23c>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a20      	ldr	r2, [pc, #128]	; (8001538 <HAL_GPIO_Init+0x240>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d052      	beq.n	8001560 <HAL_GPIO_Init+0x268>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_GPIO_Init+0x244>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d031      	beq.n	8001526 <HAL_GPIO_Init+0x22e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <HAL_GPIO_Init+0x248>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d02b      	beq.n	8001522 <HAL_GPIO_Init+0x22a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_GPIO_Init+0x24c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d025      	beq.n	800151e <HAL_GPIO_Init+0x226>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_GPIO_Init+0x250>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01f      	beq.n	800151a <HAL_GPIO_Init+0x222>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_GPIO_Init+0x254>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x21e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_GPIO_Init+0x258>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x21a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_GPIO_Init+0x25c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x216>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x260>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x212>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_GPIO_Init+0x264>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x20e>
 8001502:	2309      	movs	r3, #9
 8001504:	e02d      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001506:	230a      	movs	r3, #10
 8001508:	e02b      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800150a:	2308      	movs	r3, #8
 800150c:	e029      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800150e:	2307      	movs	r3, #7
 8001510:	e027      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001512:	2306      	movs	r3, #6
 8001514:	e025      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001516:	2305      	movs	r3, #5
 8001518:	e023      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800151a:	2304      	movs	r3, #4
 800151c:	e021      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800151e:	2303      	movs	r3, #3
 8001520:	e01f      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001522:	2302      	movs	r3, #2
 8001524:	e01d      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001526:	2301      	movs	r3, #1
 8001528:	e01b      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800152a:	bf00      	nop
 800152c:	58000080 	.word	0x58000080
 8001530:	58024400 	.word	0x58024400
 8001534:	58000400 	.word	0x58000400
 8001538:	58020000 	.word	0x58020000
 800153c:	58020400 	.word	0x58020400
 8001540:	58020800 	.word	0x58020800
 8001544:	58020c00 	.word	0x58020c00
 8001548:	58021000 	.word	0x58021000
 800154c:	58021400 	.word	0x58021400
 8001550:	58021800 	.word	0x58021800
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58022000 	.word	0x58022000
 800155c:	58022400 	.word	0x58022400
 8001560:	2300      	movs	r3, #0
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001572:	4938      	ldr	r1, [pc, #224]	; (8001654 <HAL_GPIO_Init+0x35c>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	3301      	adds	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f ae63 	bne.w	800130c <HAL_GPIO_Init+0x14>
  }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3724      	adds	r7, #36	; 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	58000400 	.word	0x58000400

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	041a      	lsls	r2, r3, #16
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	400b      	ands	r3, r1
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	619a      	str	r2, [r3, #24]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80016c8:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_HSEM_FastTake+0x2c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3320      	adds	r3, #32
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_HSEM_FastTake+0x30>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	58026400 	.word	0x58026400
 80016f0:	80000300 	.word	0x80000300

080016f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016fe:	4906      	ldr	r1, [pc, #24]	; (8001718 <HAL_HSEM_Release+0x24>)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	58026400 	.word	0x58026400

0800171c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e07f      	b.n	800182e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fa6a 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800176c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800177c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e006      	b.n	80017a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d104      	bne.n	80017b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_I2C_Init+0x11c>)
 80017c2:	430b      	orrs	r3, r1
 80017c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69d9      	ldr	r1, [r3, #28]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1a      	ldr	r2, [r3, #32]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	02008000 	.word	0x02008000

0800183c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b20      	cmp	r3, #32
 8001850:	d138      	bne.n	80018c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800185c:	2302      	movs	r3, #2
 800185e:	e032      	b.n	80018c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2224      	movs	r2, #36	; 0x24
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800188e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6819      	ldr	r1, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018c4:	2302      	movs	r3, #2
  }
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	d139      	bne.n	800195c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e033      	b.n	800195e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2224      	movs	r2, #36	; 0x24
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001924:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800195c:	2302      	movs	r3, #2
  }
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	2b06      	cmp	r3, #6
 800197e:	d00a      	beq.n	8001996 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001980:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e040      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e03e      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800199e:	491f      	ldr	r1, [pc, #124]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019a6:	f7ff fbaf 	bl	8001108 <HAL_GetTick>
 80019aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019ac:	e009      	b.n	80019c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019ae:	f7ff fbab 	bl	8001108 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019bc:	d901      	bls.n	80019c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e028      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ce:	d1ee      	bne.n	80019ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b1e      	cmp	r3, #30
 80019d4:	d008      	beq.n	80019e8 <HAL_PWREx_ConfigSupply+0x7c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b2e      	cmp	r3, #46	; 0x2e
 80019da:	d005      	beq.n	80019e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b1d      	cmp	r3, #29
 80019e0:	d002      	beq.n	80019e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b2d      	cmp	r3, #45	; 0x2d
 80019e6:	d114      	bne.n	8001a12 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80019e8:	f7ff fb8e 	bl	8001108 <HAL_GetTick>
 80019ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80019ee:	e009      	b.n	8001a04 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019f0:	f7ff fb8a 	bl	8001108 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019fe:	d901      	bls.n	8001a04 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e007      	b.n	8001a14 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d1ee      	bne.n	80019f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	58024800 	.word	0x58024800

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f000 bc1d 	b.w	800226e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8087 	beq.w	8001b50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a42:	4b99      	ldr	r3, [pc, #612]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a4c:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d007      	beq.n	8001a68 <HAL_RCC_OscConfig+0x48>
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	2b18      	cmp	r3, #24
 8001a5c:	d110      	bne.n	8001a80 <HAL_RCC_OscConfig+0x60>
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d06c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x12e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d168      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e3f6      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d106      	bne.n	8001a98 <HAL_RCC_OscConfig+0x78>
 8001a8a:	4b87      	ldr	r3, [pc, #540]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a86      	ldr	r2, [pc, #536]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e02e      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10c      	bne.n	8001aba <HAL_RCC_OscConfig+0x9a>
 8001aa0:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a80      	ldr	r2, [pc, #512]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b7e      	ldr	r3, [pc, #504]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7d      	ldr	r2, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e01d      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0xbe>
 8001ac4:	4b78      	ldr	r3, [pc, #480]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a74      	ldr	r2, [pc, #464]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0xd6>
 8001ade:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a71      	ldr	r2, [pc, #452]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d013      	beq.n	8001b26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff fb03 	bl	8001108 <HAL_GetTick>
 8001b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b06:	f7ff faff 	bl	8001108 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	; 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e3aa      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b18:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0xe6>
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff faef 	bl	8001108 <HAL_GetTick>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2e:	f7ff faeb 	bl	8001108 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b64      	cmp	r3, #100	; 0x64
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e396      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b40:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x10e>
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80cb 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b68:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_RCC_OscConfig+0x164>
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b18      	cmp	r3, #24
 8001b78:	d156      	bne.n	8001c28 <HAL_RCC_OscConfig+0x208>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d151      	bne.n	8001c28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_OscConfig+0x17c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e368      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b9c:	4b42      	ldr	r3, [pc, #264]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 0219 	bic.w	r2, r3, #25
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	493f      	ldr	r1, [pc, #252]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bae:	f7ff faab 	bl	8001108 <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff faa7 	bl	8001108 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e352      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc8:	4b37      	ldr	r3, [pc, #220]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	f7ff faa4 	bl	8001120 <HAL_GetREVID>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d817      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x1f2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d108      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1dc>
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001bf2:	4a2d      	ldr	r2, [pc, #180]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfa:	e07b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	031b      	lsls	r3, r3, #12
 8001c0a:	4927      	ldr	r1, [pc, #156]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c10:	e070      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	061b      	lsls	r3, r3, #24
 8001c20:	4921      	ldr	r1, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c26:	e065      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d048      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 0219 	bic.w	r2, r3, #25
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	491a      	ldr	r1, [pc, #104]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff fa61 	bl	8001108 <HAL_GetTick>
 8001c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fa5d 	bl	8001108 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e308      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	f7ff fa5a 	bl	8001120 <HAL_GetREVID>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d81a      	bhi.n	8001cac <HAL_RCC_OscConfig+0x28c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b40      	cmp	r3, #64	; 0x40
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCC_OscConfig+0x270>
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	6053      	str	r3, [r2, #4]
 8001c8e:	e031      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	031b      	lsls	r3, r3, #12
 8001c9e:	4902      	ldr	r1, [pc, #8]	; (8001ca8 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
 8001ca4:	e026      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
 8001ca6:	bf00      	nop
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	4b9a      	ldr	r3, [pc, #616]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	4997      	ldr	r1, [pc, #604]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
 8001cc0:	e018      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	4b95      	ldr	r3, [pc, #596]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a94      	ldr	r2, [pc, #592]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff fa1b 	bl	8001108 <HAL_GetTick>
 8001cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fa17 	bl	8001108 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e2c2      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce8:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a9 	beq.w	8001e54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d02:	4b85      	ldr	r3, [pc, #532]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d0c:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d007      	beq.n	8001d28 <HAL_RCC_OscConfig+0x308>
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	d13a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x374>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d135      	bne.n	8001d94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d28:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_OscConfig+0x320>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e296      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d40:	f7ff f9ee 	bl	8001120 <HAL_GetREVID>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d817      	bhi.n	8001d7e <HAL_RCC_OscConfig+0x35e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_OscConfig+0x348>
 8001d56:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d5e:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d66:	e075      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d68:	4b6b      	ldr	r3, [pc, #428]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	069b      	lsls	r3, r3, #26
 8001d76:	4968      	ldr	r1, [pc, #416]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7c:	e06a      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d7e:	4b66      	ldr	r3, [pc, #408]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	061b      	lsls	r3, r3, #24
 8001d8c:	4962      	ldr	r1, [pc, #392]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d92:	e05f      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d042      	beq.n	8001e22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d9c:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f9ae 	bl	8001108 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001db0:	f7ff f9aa 	bl	8001108 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e255      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dce:	f7ff f9a7 	bl	8001120 <HAL_GetREVID>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d817      	bhi.n	8001e0c <HAL_RCC_OscConfig+0x3ec>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d108      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3d6>
 8001de4:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001df2:	6053      	str	r3, [r2, #4]
 8001df4:	e02e      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
 8001df6:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	069b      	lsls	r3, r3, #26
 8001e04:	4944      	ldr	r1, [pc, #272]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
 8001e0a:	e023      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
 8001e0c:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	493f      	ldr	r1, [pc, #252]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
 8001e20:	e018      	b.n	8001e54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff f96b 	bl	8001108 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e36:	f7ff f967 	bl	8001108 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e212      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d036      	beq.n	8001ece <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff f948 	bl	8001108 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff f944 	bl	8001108 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1ef      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x45c>
 8001e9a:	e018      	b.n	8001ece <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff f92e 	bl	8001108 <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff f92a 	bl	8001108 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1d5      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d039      	beq.n	8001f4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eee:	f7ff f90b 	bl	8001108 <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ef6:	f7ff f907 	bl	8001108 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1b2      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4d6>
 8001f14:	e01b      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
 8001f16:	bf00      	nop
 8001f18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f1c:	4b9b      	ldr	r3, [pc, #620]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a9a      	ldr	r2, [pc, #616]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f28:	f7ff f8ee 	bl	8001108 <HAL_GetTick>
 8001f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f30:	f7ff f8ea 	bl	8001108 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e195      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f42:	4b92      	ldr	r3, [pc, #584]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8081 	beq.w	800205e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f5c:	4b8c      	ldr	r3, [pc, #560]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a8b      	ldr	r2, [pc, #556]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f68:	f7ff f8ce 	bl	8001108 <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7ff f8ca 	bl	8001108 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e175      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f82:	4b83      	ldr	r3, [pc, #524]	; (8002190 <HAL_RCC_OscConfig+0x770>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x584>
 8001f96:	4b7d      	ldr	r3, [pc, #500]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a7c      	ldr	r2, [pc, #496]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa2:	e02d      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5a6>
 8001fac:	4b77      	ldr	r3, [pc, #476]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	4a76      	ldr	r2, [pc, #472]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb8:	4b74      	ldr	r3, [pc, #464]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a73      	ldr	r2, [pc, #460]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c8>
 8001fce:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a6b      	ldr	r2, [pc, #428]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0x5e0>
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a67      	ldr	r2, [pc, #412]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff4:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a64      	ldr	r2, [pc, #400]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8001ffa:	f023 0304 	bic.w	r3, r3, #4
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff f87e 	bl	8001108 <HAL_GetTick>
 800200c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff f87a 	bl	8001108 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e123      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002026:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ee      	beq.n	8002010 <HAL_RCC_OscConfig+0x5f0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f868 	bl	8001108 <HAL_GetTick>
 8002038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff f864 	bl	8001108 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e10d      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ee      	bne.n	800203c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8102 	beq.w	800226c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002068:	4b48      	ldr	r3, [pc, #288]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002070:	2b18      	cmp	r3, #24
 8002072:	f000 80bd 	beq.w	80021f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b02      	cmp	r3, #2
 800207c:	f040 809e 	bne.w	80021bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b42      	ldr	r3, [pc, #264]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a41      	ldr	r2, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7ff f83c 	bl	8001108 <HAL_GetTick>
 8002090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f838 	bl	8001108 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e0e3      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b6:	4b37      	ldr	r3, [pc, #220]	; (8002194 <HAL_RCC_OscConfig+0x774>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	430a      	orrs	r2, r1
 80020c6:	4931      	ldr	r1, [pc, #196]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	628b      	str	r3, [r1, #40]	; 0x28
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	3b01      	subs	r3, #1
 80020d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	3b01      	subs	r3, #1
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	b29b      	uxth	r3, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	3b01      	subs	r3, #1
 80020f6:	061b      	lsls	r3, r3, #24
 80020f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020fc:	4923      	ldr	r1, [pc, #140]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x778>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800211a:	00d2      	lsls	r2, r2, #3
 800211c:	491b      	ldr	r1, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800211e:	4313      	orrs	r3, r2
 8002120:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f023 020c 	bic.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4917      	ldr	r1, [pc, #92]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f023 0202 	bic.w	r2, r3, #2
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	4912      	ldr	r1, [pc, #72]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002142:	4313      	orrs	r3, r2
 8002144:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_RCC_OscConfig+0x76c>)
 800217c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7fe ffc1 	bl	8001108 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002188:	e011      	b.n	80021ae <HAL_RCC_OscConfig+0x78e>
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400
 8002190:	58024800 	.word	0x58024800
 8002194:	fffffc0c 	.word	0xfffffc0c
 8002198:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe ffb4 	bl	8001108 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e05f      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x77c>
 80021ba:	e057      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff9e 	bl	8001108 <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe ff9a 	bl	8001108 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e045      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x7b0>
 80021ee:	e03d      	b.n	800226c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_OscConfig+0x858>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	2b01      	cmp	r3, #1
 8002202:	d031      	beq.n	8002268 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d12a      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d122      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d11a      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0a5b      	lsrs	r3, r3, #9
 8002236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d111      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	0e1b      	lsrs	r3, r3, #24
 800225a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3730      	adds	r7, #48	; 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58024400 	.word	0x58024400

0800227c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e19c      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b87      	ldr	r3, [pc, #540]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 020f 	bic.w	r2, r3, #15
 80022a6:	4985      	ldr	r1, [pc, #532]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b83      	ldr	r3, [pc, #524]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e184      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d010      	beq.n	80022ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	4b7b      	ldr	r3, [pc, #492]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d8:	429a      	cmp	r2, r3
 80022da:	d908      	bls.n	80022ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022dc:	4b78      	ldr	r3, [pc, #480]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4975      	ldr	r1, [pc, #468]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d010      	beq.n	800231c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	4b70      	ldr	r3, [pc, #448]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002306:	429a      	cmp	r2, r3
 8002308:	d908      	bls.n	800231c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	496a      	ldr	r1, [pc, #424]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002318:	4313      	orrs	r3, r2
 800231a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d010      	beq.n	800234a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	4b64      	ldr	r3, [pc, #400]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002334:	429a      	cmp	r2, r3
 8002336:	d908      	bls.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002338:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	495e      	ldr	r1, [pc, #376]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002346:	4313      	orrs	r3, r2
 8002348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	d010      	beq.n	8002378 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002362:	429a      	cmp	r2, r3
 8002364:	d908      	bls.n	8002378 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002366:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4953      	ldr	r1, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002374:	4313      	orrs	r3, r2
 8002376:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d010      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	4b4d      	ldr	r3, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	429a      	cmp	r2, r3
 8002392:	d908      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f023 020f 	bic.w	r2, r3, #15
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4947      	ldr	r1, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d055      	beq.n	800245e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023b2:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4940      	ldr	r1, [pc, #256]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023cc:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d121      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0f6      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d115      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0ea      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0de      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240c:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0d6      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f023 0207 	bic.w	r2, r3, #7
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4925      	ldr	r1, [pc, #148]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800242a:	4313      	orrs	r3, r2
 800242c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fe6b 	bl	8001108 <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002434:	e00a      	b.n	800244c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002436:	f7fe fe67 	bl	8001108 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0be      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244c:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	429a      	cmp	r2, r3
 800245c:	d1eb      	bne.n	8002436 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	429a      	cmp	r2, r3
 8002478:	d208      	bcs.n	800248c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f023 020f 	bic.w	r2, r3, #15
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x244>)
 8002488:	4313      	orrs	r3, r2
 800248a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d214      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 020f 	bic.w	r2, r3, #15
 80024a2:	4906      	ldr	r1, [pc, #24]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_RCC_ClockConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e086      	b.n	80025ca <HAL_RCC_ClockConfig+0x34e>
 80024bc:	52002000 	.word	0x52002000
 80024c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024dc:	429a      	cmp	r2, r3
 80024de:	d208      	bcs.n	80024f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024e0:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	4939      	ldr	r1, [pc, #228]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800250a:	429a      	cmp	r2, r3
 800250c:	d208      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	492e      	ldr	r1, [pc, #184]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800251c:	4313      	orrs	r3, r2
 800251e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d010      	beq.n	800254e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002538:	429a      	cmp	r2, r3
 800253a:	d208      	bcs.n	800254e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4922      	ldr	r1, [pc, #136]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800254a:	4313      	orrs	r3, r2
 800254c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002566:	429a      	cmp	r2, r3
 8002568:	d208      	bcs.n	800257c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4917      	ldr	r1, [pc, #92]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002578:	4313      	orrs	r3, r2
 800257a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800257c:	f000 f834 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	4912      	ldr	r1, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x35c>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
 8002598:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_RCC_ClockConfig+0x358>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_RCC_ClockConfig+0x35c>)
 80025a4:	5cd3      	ldrb	r3, [r2, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x360>)
 80025b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x364>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_RCC_ClockConfig+0x368>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fbf8 	bl	8000db4 <HAL_InitTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	58024400 	.word	0x58024400
 80025d8:	08009500 	.word	0x08009500
 80025dc:	24000004 	.word	0x24000004
 80025e0:	24000000 	.word	0x24000000
 80025e4:	24000008 	.word	0x24000008

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ee:	4bb3      	ldr	r3, [pc, #716]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	f200 8155 	bhi.w	80028a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_RCC_GetSysClockFreq+0x1c>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002669 	.word	0x08002669
 8002608:	080028a7 	.word	0x080028a7
 800260c:	080028a7 	.word	0x080028a7
 8002610:	080028a7 	.word	0x080028a7
 8002614:	080028a7 	.word	0x080028a7
 8002618:	080028a7 	.word	0x080028a7
 800261c:	080028a7 	.word	0x080028a7
 8002620:	080028a7 	.word	0x080028a7
 8002624:	0800268f 	.word	0x0800268f
 8002628:	080028a7 	.word	0x080028a7
 800262c:	080028a7 	.word	0x080028a7
 8002630:	080028a7 	.word	0x080028a7
 8002634:	080028a7 	.word	0x080028a7
 8002638:	080028a7 	.word	0x080028a7
 800263c:	080028a7 	.word	0x080028a7
 8002640:	080028a7 	.word	0x080028a7
 8002644:	08002695 	.word	0x08002695
 8002648:	080028a7 	.word	0x080028a7
 800264c:	080028a7 	.word	0x080028a7
 8002650:	080028a7 	.word	0x080028a7
 8002654:	080028a7 	.word	0x080028a7
 8002658:	080028a7 	.word	0x080028a7
 800265c:	080028a7 	.word	0x080028a7
 8002660:	080028a7 	.word	0x080028a7
 8002664:	0800269b 	.word	0x0800269b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002668:	4b94      	ldr	r3, [pc, #592]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002674:	4b91      	ldr	r3, [pc, #580]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	4a90      	ldr	r2, [pc, #576]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002686:	e111      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002688:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800268a:	61bb      	str	r3, [r7, #24]
    break;
 800268c:	e10e      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800268e:	4b8d      	ldr	r3, [pc, #564]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002690:	61bb      	str	r3, [r7, #24]
    break;
 8002692:	e10b      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002694:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002696:	61bb      	str	r3, [r7, #24]
    break;
 8002698:	e108      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800269a:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026a4:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026b0:	4b82      	ldr	r3, [pc, #520]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026ba:	4b80      	ldr	r3, [pc, #512]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	08db      	lsrs	r3, r3, #3
 80026c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80e1 	beq.w	80028a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	f000 8083 	beq.w	80027ec <HAL_RCC_GetSysClockFreq+0x204>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	f200 80a1 	bhi.w	8002830 <HAL_RCC_GetSysClockFreq+0x248>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x114>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d056      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026fa:	e099      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02d      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002708:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	08db      	lsrs	r3, r3, #3
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	4a6b      	ldr	r2, [pc, #428]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002732:	4b62      	ldr	r3, [pc, #392]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002742:	ed97 6a02 	vldr	s12, [r7, #8]
 8002746:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800274a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800274e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800275a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002762:	e087      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002776:	4b51      	ldr	r3, [pc, #324]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002786:	ed97 6a02 	vldr	s12, [r7, #8]
 800278a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800278e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800279a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027a6:	e065      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80027d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027ea:	e043      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80028d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002812:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800281a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800281e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800282e:	e021      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800283e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002852:	ed97 6a02 	vldr	s12, [r7, #8]
 8002856:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800285a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002872:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	0a5b      	lsrs	r3, r3, #9
 800287a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287e:	3301      	adds	r3, #1
 8002880:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800288c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002898:	ee17 3a90 	vmov	r3, s15
 800289c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800289e:	e005      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    break;
 80028a4:	e002      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028a8:	61bb      	str	r3, [r7, #24]
    break;
 80028aa:	bf00      	nop
  }

  return sysclockfreq;
 80028ac:	69bb      	ldr	r3, [r7, #24]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	58024400 	.word	0x58024400
 80028c0:	03d09000 	.word	0x03d09000
 80028c4:	003d0900 	.word	0x003d0900
 80028c8:	007a1200 	.word	0x007a1200
 80028cc:	46000000 	.word	0x46000000
 80028d0:	4c742400 	.word	0x4c742400
 80028d4:	4a742400 	.word	0x4a742400
 80028d8:	4af42400 	.word	0x4af42400

080028dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028e2:	f7ff fe81 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_GetHCLKFreq+0x50>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	490f      	ldr	r1, [pc, #60]	; (8002930 <HAL_RCC_GetHCLKFreq+0x54>)
 80028f4:	5ccb      	ldrb	r3, [r1, r3]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_GetHCLKFreq+0x50>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_GetHCLKFreq+0x54>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_RCC_GetHCLKFreq+0x58>)
 8002918:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800291a:	4a07      	ldr	r2, [pc, #28]	; (8002938 <HAL_RCC_GetHCLKFreq+0x5c>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCC_GetHCLKFreq+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	58024400 	.word	0x58024400
 8002930:	08009500 	.word	0x08009500
 8002934:	24000004 	.word	0x24000004
 8002938:	24000000 	.word	0x24000000

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002940:	f7ff ffcc 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4904      	ldr	r1, [pc, #16]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	58024400 	.word	0x58024400
 8002964:	08009500 	.word	0x08009500

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800296c:	f7ff ffb6 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	08009500 	.word	0x08009500

08002994 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	223f      	movs	r2, #63	; 0x3f
 80029a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_GetClockConfig+0x7c>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0207 	and.w	r2, r3, #7
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_RCC_GetClockConfig+0x7c>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_RCC_GetClockConfig+0x7c>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_RCC_GetClockConfig+0x7c>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_RCC_GetClockConfig+0x7c>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_GetClockConfig+0x7c>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_RCC_GetClockConfig+0x7c>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_GetClockConfig+0x80>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 020f 	and.w	r2, r3, #15
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	601a      	str	r2, [r3, #0]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	58024400 	.word	0x58024400
 8002a14:	52002000 	.word	0x52002000

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a20:	2300      	movs	r3, #0
 8002a22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a24:	2300      	movs	r3, #0
 8002a26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03f      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a3c:	d02a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a42:	d824      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a48:	d018      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a4e:	d81e      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a58:	d007      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5c:	4ba3      	ldr	r3, [pc, #652]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	4aa2      	ldr	r2, [pc, #648]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a68:	e015      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2102      	movs	r1, #2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 f9d5 	bl	8003e20 <RCCEx_PLL2_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a7a:	e00c      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3324      	adds	r3, #36	; 0x24
 8002a80:	2102      	movs	r1, #2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fa7e 	bl	8003f84 <RCCEx_PLL3_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002a8c:	e003      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
      break;
 8002a92:	e000      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a9c:	4b93      	ldr	r3, [pc, #588]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa8:	4990      	ldr	r1, [pc, #576]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	650b      	str	r3, [r1, #80]	; 0x50
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d03d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d826      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002ae5 	.word	0x08002ae5
 8002ad4:	08002af3 	.word	0x08002af3
 8002ad8:	08002b05 	.word	0x08002b05
 8002adc:	08002b1d 	.word	0x08002b1d
 8002ae0:	08002b1d 	.word	0x08002b1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae4:	4b81      	ldr	r3, [pc, #516]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4a80      	ldr	r2, [pc, #512]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002af0:	e015      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f991 	bl	8003e20 <RCCEx_PLL2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b02:	e00c      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3324      	adds	r3, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 fa3a 	bl	8003f84 <RCCEx_PLL3_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b14:	e003      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1a:	e000      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b24:	4b71      	ldr	r3, [pc, #452]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b28:	f023 0207 	bic.w	r2, r3, #7
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	496e      	ldr	r1, [pc, #440]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	650b      	str	r3, [r1, #80]	; 0x50
 8002b36:	e001      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d042      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b50:	d02b      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d825      	bhi.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b58:	2bc0      	cmp	r3, #192	; 0xc0
 8002b5a:	d028      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002b5c:	2bc0      	cmp	r3, #192	; 0xc0
 8002b5e:	d821      	bhi.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b60:	2b80      	cmp	r3, #128	; 0x80
 8002b62:	d016      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d81d      	bhi.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d007      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002b70:	e018      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b72:	4b5e      	ldr	r3, [pc, #376]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	4a5d      	ldr	r2, [pc, #372]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b7e:	e017      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 f94a 	bl	8003e20 <RCCEx_PLL2_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002b90:	e00e      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3324      	adds	r3, #36	; 0x24
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 f9f3 	bl	8003f84 <RCCEx_PLL3_Config>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ba2:	e005      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002bb6:	4b4d      	ldr	r3, [pc, #308]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	494a      	ldr	r1, [pc, #296]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	650b      	str	r3, [r1, #80]	; 0x50
 8002bc8:	e001      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d049      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002be0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002be4:	d030      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002be6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bea:	d82a      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002bec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002bf0:	d02c      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002bf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002bf6:	d824      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfc:	d018      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c02:	d81e      	bhi.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c0c:	d007      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002c0e:	e018      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	4a35      	ldr	r2, [pc, #212]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c1c:	e017      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 f8fb 	bl	8003e20 <RCCEx_PLL2_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002c2e:	e00e      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3324      	adds	r3, #36	; 0x24
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 f9a4 	bl	8003f84 <RCCEx_PLL3_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c40:	e005      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
      break;
 8002c46:	e002      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c62:	4922      	ldr	r1, [pc, #136]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	658b      	str	r3, [r1, #88]	; 0x58
 8002c68:	e001      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d04b      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c84:	d030      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002c86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c8a:	d82a      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c90:	d02e      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002c92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c96:	d824      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c9c:	d018      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ca2:	d81e      	bhi.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cac:	d007      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002cae:	e018      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002cbc:	e019      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 f8ab 	bl	8003e20 <RCCEx_PLL2_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002cce:	e010      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3324      	adds	r3, #36	; 0x24
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 f954 	bl	8003f84 <RCCEx_PLL3_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ce0:	e007      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce6:	e004      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002ce8:	bf00      	nop
 8002cea:	e002      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002cec:	58024400 	.word	0x58024400
      break;
 8002cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002cf8:	4b99      	ldr	r3, [pc, #612]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d06:	4996      	ldr	r1, [pc, #600]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8002d0c:	e001      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d032      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d22:	2b30      	cmp	r3, #48	; 0x30
 8002d24:	d01c      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002d26:	2b30      	cmp	r3, #48	; 0x30
 8002d28:	d817      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d00c      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d813      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d10f      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d3a:	4b89      	ldr	r3, [pc, #548]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	4a88      	ldr	r2, [pc, #544]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002d46:	e00e      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 f866 	bl	8003e20 <RCCEx_PLL2_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002d58:	e005      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d6c:	4b7c      	ldr	r3, [pc, #496]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	4979      	ldr	r1, [pc, #484]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d7e:	e001      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d047      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d98:	d030      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d9e:	d82a      	bhi.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002da0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002da4:	d02c      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002da6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002daa:	d824      	bhi.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db0:	d018      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db6:	d81e      	bhi.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc0:	d007      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002dc2:	e018      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002dd0:	e017      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 f821 	bl	8003e20 <RCCEx_PLL2_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002de2:	e00e      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3324      	adds	r3, #36	; 0x24
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 f8ca 	bl	8003f84 <RCCEx_PLL3_Config>
 8002df0:	4603      	mov	r3, r0
 8002df2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002df4:	e005      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfa:	e002      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e08:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	4952      	ldr	r1, [pc, #328]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	650b      	str	r3, [r1, #80]	; 0x50
 8002e1a:	e001      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d049      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e34:	d02e      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e3a:	d828      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002e3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e40:	d02a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002e42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e46:	d822      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002e48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e4c:	d026      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002e4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e52:	d81c      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e58:	d010      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e5e:	d816      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01d      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d111      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 ffd5 	bl	8003e20 <RCCEx_PLL2_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e7a:	e012      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3324      	adds	r3, #36	; 0x24
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f87e 	bl	8003f84 <RCCEx_PLL3_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002e8c:	e009      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
      break;
 8002e92:	e006      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e94:	bf00      	nop
 8002e96:	e004      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e98:	bf00      	nop
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002e9c:	bf00      	nop
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb4:	492a      	ldr	r1, [pc, #168]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8002eba:	e001      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d04d      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed6:	d02e      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002edc:	d828      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d02a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d822      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eee:	d026      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002ef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ef4:	d81c      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002efa:	d010      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f00:	d816      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01d      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f0a:	d111      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	2101      	movs	r1, #1
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 ff84 	bl	8003e20 <RCCEx_PLL2_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002f1c:	e012      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3324      	adds	r3, #36	; 0x24
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 f82d 	bl	8003f84 <RCCEx_PLL3_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002f2e:	e009      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	75fb      	strb	r3, [r7, #23]
      break;
 8002f34:	e006      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f58:	4901      	ldr	r1, [pc, #4]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8002f5e:	e003      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d02f      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f7c:	d00e      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f82:	d814      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f8c:	d10f      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f8e:	4baf      	ldr	r3, [pc, #700]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	4aae      	ldr	r2, [pc, #696]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f9a:	e00c      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 ff3c 	bl	8003e20 <RCCEx_PLL2_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002fac:	e003      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fbc:	4ba3      	ldr	r3, [pc, #652]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc8:	49a0      	ldr	r1, [pc, #640]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8002fce:	e001      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d032      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d81b      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003027 	.word	0x08003027
 8002ff4:	08003001 	.word	0x08003001
 8002ff8:	0800300f 	.word	0x0800300f
 8002ffc:	08003027 	.word	0x08003027
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4a91      	ldr	r2, [pc, #580]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800300c:	e00c      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 ff03 	bl	8003e20 <RCCEx_PLL2_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800301e:	e003      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
      break;
 8003024:	e000      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800302e:	4b87      	ldr	r3, [pc, #540]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4984      	ldr	r1, [pc, #528]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800303c:	4313      	orrs	r3, r2
 800303e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003040:	e001      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8086 	beq.w	8003160 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003054:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a7d      	ldr	r2, [pc, #500]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003060:	f7fe f852 	bl	8001108 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003066:	e009      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003068:	f7fe f84e 	bl	8001108 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d902      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	75fb      	strb	r3, [r7, #23]
        break;
 800307a:	e005      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307c:	4b74      	ldr	r3, [pc, #464]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ef      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d166      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800308e:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003090:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003098:	4053      	eors	r3, r2
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d013      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ac:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a66      	ldr	r2, [pc, #408]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030b8:	4b64      	ldr	r3, [pc, #400]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a63      	ldr	r2, [pc, #396]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80030c4:	4a61      	ldr	r2, [pc, #388]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d4:	d115      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe f817 	bl	8001108 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030dc:	e00b      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe f813 	bl	8001108 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d902      	bls.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	75fb      	strb	r3, [r7, #23]
            break;
 80030f4:	e005      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030f6:	4b55      	ldr	r3, [pc, #340]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0ed      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d126      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800310e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003116:	d10d      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003118:	4b4c      	ldr	r3, [pc, #304]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003126:	0919      	lsrs	r1, r3, #4
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800312a:	400b      	ands	r3, r1
 800312c:	4947      	ldr	r1, [pc, #284]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800312e:	4313      	orrs	r3, r2
 8003130:	610b      	str	r3, [r1, #16]
 8003132:	e005      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003134:	4b45      	ldr	r3, [pc, #276]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	4a44      	ldr	r2, [pc, #272]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800313a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800313e:	6113      	str	r3, [r2, #16]
 8003140:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	493f      	ldr	r1, [pc, #252]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003150:	4313      	orrs	r3, r2
 8003152:	670b      	str	r3, [r1, #112]	; 0x70
 8003154:	e004      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	75bb      	strb	r3, [r7, #22]
 800315a:	e001      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8085 	beq.w	8003278 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003172:	2b28      	cmp	r3, #40	; 0x28
 8003174:	d866      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	08003259 	.word	0x08003259
 8003180:	08003245 	.word	0x08003245
 8003184:	08003245 	.word	0x08003245
 8003188:	08003245 	.word	0x08003245
 800318c:	08003245 	.word	0x08003245
 8003190:	08003245 	.word	0x08003245
 8003194:	08003245 	.word	0x08003245
 8003198:	08003245 	.word	0x08003245
 800319c:	08003221 	.word	0x08003221
 80031a0:	08003245 	.word	0x08003245
 80031a4:	08003245 	.word	0x08003245
 80031a8:	08003245 	.word	0x08003245
 80031ac:	08003245 	.word	0x08003245
 80031b0:	08003245 	.word	0x08003245
 80031b4:	08003245 	.word	0x08003245
 80031b8:	08003245 	.word	0x08003245
 80031bc:	08003233 	.word	0x08003233
 80031c0:	08003245 	.word	0x08003245
 80031c4:	08003245 	.word	0x08003245
 80031c8:	08003245 	.word	0x08003245
 80031cc:	08003245 	.word	0x08003245
 80031d0:	08003245 	.word	0x08003245
 80031d4:	08003245 	.word	0x08003245
 80031d8:	08003245 	.word	0x08003245
 80031dc:	08003259 	.word	0x08003259
 80031e0:	08003245 	.word	0x08003245
 80031e4:	08003245 	.word	0x08003245
 80031e8:	08003245 	.word	0x08003245
 80031ec:	08003245 	.word	0x08003245
 80031f0:	08003245 	.word	0x08003245
 80031f4:	08003245 	.word	0x08003245
 80031f8:	08003245 	.word	0x08003245
 80031fc:	08003259 	.word	0x08003259
 8003200:	08003245 	.word	0x08003245
 8003204:	08003245 	.word	0x08003245
 8003208:	08003245 	.word	0x08003245
 800320c:	08003245 	.word	0x08003245
 8003210:	08003245 	.word	0x08003245
 8003214:	08003245 	.word	0x08003245
 8003218:	08003245 	.word	0x08003245
 800321c:	08003259 	.word	0x08003259
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	2101      	movs	r1, #1
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fdfa 	bl	8003e20 <RCCEx_PLL2_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003230:	e013      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3324      	adds	r3, #36	; 0x24
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fea3 	bl	8003f84 <RCCEx_PLL3_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003242:	e00a      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
      break;
 8003248:	e007      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800324a:	bf00      	nop
 800324c:	58024400 	.word	0x58024400
 8003250:	58024800 	.word	0x58024800
 8003254:	00ffffcf 	.word	0x00ffffcf
      break;
 8003258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003260:	4b96      	ldr	r3, [pc, #600]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326c:	4993      	ldr	r1, [pc, #588]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	654b      	str	r3, [r1, #84]	; 0x54
 8003272:	e001      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d038      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003288:	2b05      	cmp	r3, #5
 800328a:	d821      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800328c:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032d7 	.word	0x080032d7
 8003298:	080032ad 	.word	0x080032ad
 800329c:	080032bf 	.word	0x080032bf
 80032a0:	080032d7 	.word	0x080032d7
 80032a4:	080032d7 	.word	0x080032d7
 80032a8:	080032d7 	.word	0x080032d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fdb4 	bl	8003e20 <RCCEx_PLL2_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80032bc:	e00c      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3324      	adds	r3, #36	; 0x24
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fe5d 	bl	8003f84 <RCCEx_PLL3_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80032ce:	e003      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	75fb      	strb	r3, [r7, #23]
      break;
 80032d4:	e000      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80032d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80032de:	4b77      	ldr	r3, [pc, #476]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f023 0207 	bic.w	r2, r3, #7
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	4974      	ldr	r1, [pc, #464]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	654b      	str	r3, [r1, #84]	; 0x54
 80032f0:	e001      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d03a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	2b05      	cmp	r3, #5
 800330a:	d821      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003357 	.word	0x08003357
 8003318:	0800332d 	.word	0x0800332d
 800331c:	0800333f 	.word	0x0800333f
 8003320:	08003357 	.word	0x08003357
 8003324:	08003357 	.word	0x08003357
 8003328:	08003357 	.word	0x08003357
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	2101      	movs	r1, #1
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fd74 	bl	8003e20 <RCCEx_PLL2_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800333c:	e00c      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3324      	adds	r3, #36	; 0x24
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fe1d 	bl	8003f84 <RCCEx_PLL3_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800334e:	e003      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	75fb      	strb	r3, [r7, #23]
      break;
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800335e:	4b57      	ldr	r3, [pc, #348]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	f023 0207 	bic.w	r2, r3, #7
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	4953      	ldr	r1, [pc, #332]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800336e:	4313      	orrs	r3, r2
 8003370:	658b      	str	r3, [r1, #88]	; 0x58
 8003372:	e001      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d04b      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800338e:	d02e      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003394:	d828      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d02a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d822      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80033a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033a6:	d026      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80033a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033ac:	d81c      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80033ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b2:	d010      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80033b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b8:	d816      	bhi.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01d      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80033be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c2:	d111      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fd28 	bl	8003e20 <RCCEx_PLL2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80033d4:	e012      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3324      	adds	r3, #36	; 0x24
 80033da:	2102      	movs	r1, #2
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fdd1 	bl	8003f84 <RCCEx_PLL3_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80033e6:	e009      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
      break;
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80033ee:	bf00      	nop
 80033f0:	e004      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80033f2:	bf00      	nop
 80033f4:	e002      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80033fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003402:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003410:	492a      	ldr	r1, [pc, #168]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003412:	4313      	orrs	r3, r2
 8003414:	654b      	str	r3, [r1, #84]	; 0x54
 8003416:	e001      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d04d      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800342e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003432:	d02e      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003434:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003438:	d828      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d02a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003444:	d822      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800344a:	d026      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800344c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003450:	d81c      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003456:	d010      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345c:	d816      	bhi.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01d      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003466:	d111      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fcd6 	bl	8003e20 <RCCEx_PLL2_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003478:	e012      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3324      	adds	r3, #36	; 0x24
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fd7f 	bl	8003f84 <RCCEx_PLL3_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800348a:	e009      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	75fb      	strb	r3, [r7, #23]
      break;
 8003490:	e006      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003492:	bf00      	nop
 8003494:	e004      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800349e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034b4:	4901      	ldr	r1, [pc, #4]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	658b      	str	r3, [r1, #88]	; 0x58
 80034ba:	e003      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80034bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
 80034c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d04b      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034da:	d02e      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80034dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034e0:	d828      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80034e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e6:	d02a      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d822      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80034ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034f2:	d026      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80034f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034f8:	d81c      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80034fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fe:	d010      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003504:	d816      	bhi.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01d      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350e:	d111      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fc82 	bl	8003e20 <RCCEx_PLL2_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003520:	e012      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3324      	adds	r3, #36	; 0x24
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fd2b 	bl	8003f84 <RCCEx_PLL3_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003532:	e009      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	75fb      	strb	r3, [r7, #23]
      break;
 8003538:	e006      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800353a:	bf00      	nop
 800353c:	e004      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800354e:	4b9d      	ldr	r3, [pc, #628]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800355c:	4999      	ldr	r1, [pc, #612]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800355e:	4313      	orrs	r3, r2
 8003560:	658b      	str	r3, [r1, #88]	; 0x58
 8003562:	e001      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357e:	d10a      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3324      	adds	r3, #36	; 0x24
 8003584:	2102      	movs	r1, #2
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fcfc 	bl	8003f84 <RCCEx_PLL3_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003596:	4b8b      	ldr	r3, [pc, #556]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a4:	4987      	ldr	r1, [pc, #540]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c0:	d10a      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3324      	adds	r3, #36	; 0x24
 80035c6:	2102      	movs	r1, #2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fcdb 	bl	8003f84 <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035d8:	4b7a      	ldr	r3, [pc, #488]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e6:	4977      	ldr	r1, [pc, #476]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d034      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003602:	d01d      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003608:	d817      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d009      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003614:	e011      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fbff 	bl	8003e20 <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003626:	e00c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3324      	adds	r3, #36	; 0x24
 800362c:	2102      	movs	r1, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fca8 	bl	8003f84 <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
      break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003642:	7dfb      	ldrb	r3, [r7, #23]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003648:	4b5e      	ldr	r3, [pc, #376]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003656:	495b      	ldr	r1, [pc, #364]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003658:	4313      	orrs	r3, r2
 800365a:	658b      	str	r3, [r1, #88]	; 0x58
 800365c:	e001      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d033      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003674:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003678:	d01c      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800367a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800367e:	d816      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003684:	d003      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800368a:	d007      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800368c:	e00f      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368e:	4b4d      	ldr	r3, [pc, #308]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003698:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800369a:	e00c      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	2101      	movs	r1, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fc6e 	bl	8003f84 <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80036ac:	e003      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
      break;
 80036b2:	e000      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80036b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036bc:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ca:	493e      	ldr	r1, [pc, #248]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	654b      	str	r3, [r1, #84]	; 0x54
 80036d0:	e001      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d029      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ee:	d007      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80036f0:	e00f      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f2:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	4a33      	ldr	r2, [pc, #204]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80036fe:	e00b      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fb8a 	bl	8003e20 <RCCEx_PLL2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
      break;
 8003716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800371e:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	4926      	ldr	r1, [pc, #152]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800372c:	4313      	orrs	r3, r2
 800372e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003730:	e001      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3324      	adds	r3, #36	; 0x24
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fc1b 	bl	8003f84 <RCCEx_PLL3_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d033      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376c:	d017      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800376e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003772:	d811      	bhi.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d013      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800377a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377e:	d80b      	bhi.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003788:	d106      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003796:	e007      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	75fb      	strb	r3, [r7, #23]
      break;
 800379c:	e004      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800379e:	bf00      	nop
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80037a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ba:	4902      	ldr	r1, [pc, #8]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	654b      	str	r3, [r1, #84]	; 0x54
 80037c0:	e004      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80037c2:	bf00      	nop
 80037c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	492e      	ldr	r1, [pc, #184]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80037f6:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003804:	4926      	ldr	r1, [pc, #152]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003806:	4313      	orrs	r3, r2
 8003808:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003816:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003822:	491f      	ldr	r1, [pc, #124]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003824:	4313      	orrs	r3, r2
 8003826:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800383a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800383e:	6113      	str	r3, [r2, #16]
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800384a:	4915      	ldr	r1, [pc, #84]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800384c:	4313      	orrs	r3, r2
 800384e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	da08      	bge.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	490e      	ldr	r1, [pc, #56]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003866:	4313      	orrs	r3, r2
 8003868:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	4906      	ldr	r1, [pc, #24]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003886:	4313      	orrs	r3, r2
 8003888:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800388a:	7dbb      	ldrb	r3, [r7, #22]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	58024400 	.word	0x58024400

080038a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80038a8:	f7ff f818 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4904      	ldr	r1, [pc, #16]	; (80038cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	58024400 	.word	0x58024400
 80038cc:	08009500 	.word	0x08009500

080038d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038d8:	4ba1      	ldr	r3, [pc, #644]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80038e2:	4b9f      	ldr	r3, [pc, #636]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	0b1b      	lsrs	r3, r3, #12
 80038e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038ee:	4b9c      	ldr	r3, [pc, #624]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80038fa:	4b99      	ldr	r3, [pc, #612]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	08db      	lsrs	r3, r3, #3
 8003900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8111 	beq.w	8003b40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b02      	cmp	r3, #2
 8003922:	f000 8083 	beq.w	8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b02      	cmp	r3, #2
 800392a:	f200 80a1 	bhi.w	8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d056      	beq.n	80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800393a:	e099      	b.n	8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800393c:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d02d      	beq.n	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003948:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	4a84      	ldr	r2, [pc, #528]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003972:	4b7b      	ldr	r3, [pc, #492]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003982:	ed97 6a03 	vldr	s12, [r7, #12]
 8003986:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039a2:	e087      	b.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b6:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039e6:	e065      	b.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fa:	4b59      	ldr	r3, [pc, #356]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a2a:	e043      	b.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3e:	4b48      	ldr	r3, [pc, #288]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a6e:	e021      	b.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ab2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	0a5b      	lsrs	r3, r3, #9
 8003aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ada:	ee17 2a90 	vmov	r2, s15
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b08:	ee17 2a90 	vmov	r2, s15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	0e1b      	lsrs	r3, r3, #24
 8003b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b36:	ee17 2a90 	vmov	r2, s15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b3e:	e008      	b.n	8003b52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
}
 8003b52:	bf00      	nop
 8003b54:	3724      	adds	r7, #36	; 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	58024400 	.word	0x58024400
 8003b64:	03d09000 	.word	0x03d09000
 8003b68:	46000000 	.word	0x46000000
 8003b6c:	4c742400 	.word	0x4c742400
 8003b70:	4a742400 	.word	0x4a742400
 8003b74:	4af42400 	.word	0x4af42400

08003b78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b80:	4ba1      	ldr	r3, [pc, #644]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003b8a:	4b9f      	ldr	r3, [pc, #636]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	0d1b      	lsrs	r3, r3, #20
 8003b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b96:	4b9c      	ldr	r3, [pc, #624]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	0a1b      	lsrs	r3, r3, #8
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003ba2:	4b99      	ldr	r3, [pc, #612]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	08db      	lsrs	r3, r3, #3
 8003ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8111 	beq.w	8003de8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	f000 8083 	beq.w	8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	f200 80a1 	bhi.w	8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d056      	beq.n	8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003be2:	e099      	b.n	8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be4:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02d      	beq.n	8003c4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bf0:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	4a84      	ldr	r2, [pc, #528]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1a:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003c4a:	e087      	b.n	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5e:	4b6a      	ldr	r3, [pc, #424]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c8e:	e065      	b.n	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca2:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cd2:	e043      	b.n	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce6:	4b48      	ldr	r3, [pc, #288]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d16:	e021      	b.n	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	0a5b      	lsrs	r3, r3, #9
 8003d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d82:	ee17 2a90 	vmov	r2, s15
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003d8a:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d94:	ee07 3a90 	vmov	s15, r3
 8003d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003da0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db0:	ee17 2a90 	vmov	r2, s15
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	0e1b      	lsrs	r3, r3, #24
 8003dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dde:	ee17 2a90 	vmov	r2, s15
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003de6:	e008      	b.n	8003dfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
}
 8003dfa:	bf00      	nop
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	03d09000 	.word	0x03d09000
 8003e10:	46000000 	.word	0x46000000
 8003e14:	4c742400 	.word	0x4c742400
 8003e18:	4a742400 	.word	0x4a742400
 8003e1c:	4af42400 	.word	0x4af42400

08003e20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e2e:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d101      	bne.n	8003e3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e099      	b.n	8003f72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e3e:	4b4f      	ldr	r3, [pc, #316]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a4e      	ldr	r2, [pc, #312]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003e44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4a:	f7fd f95d 	bl	8001108 <HAL_GetTick>
 8003e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e52:	f7fd f959 	bl	8001108 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e086      	b.n	8003f72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e64:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f0      	bne.n	8003e52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e70:	4b42      	ldr	r3, [pc, #264]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	493f      	ldr	r1, [pc, #252]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	628b      	str	r3, [r1, #40]	; 0x28
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	025b      	lsls	r3, r3, #9
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	061b      	lsls	r3, r3, #24
 8003eb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eb4:	4931      	ldr	r1, [pc, #196]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	492d      	ldr	r1, [pc, #180]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	f023 0220 	bic.w	r2, r3, #32
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	4928      	ldr	r1, [pc, #160]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003ee4:	f023 0310 	bic.w	r3, r3, #16
 8003ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <RCCEx_PLL2_Config+0x160>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	69d2      	ldr	r2, [r2, #28]
 8003ef6:	00d2      	lsls	r2, r2, #3
 8003ef8:	4920      	ldr	r1, [pc, #128]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003efe:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f04:	f043 0310 	orr.w	r3, r3, #16
 8003f08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f10:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f1c:	e00f      	b.n	8003f3e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f24:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f30:	e005      	b.n	8003f3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a0e      	ldr	r2, [pc, #56]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4a:	f7fd f8dd 	bl	8001108 <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f52:	f7fd f8d9 	bl	8001108 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e006      	b.n	8003f72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <RCCEx_PLL2_Config+0x15c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	ffff0007 	.word	0xffff0007

08003f84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f92:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d101      	bne.n	8003fa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e099      	b.n	80040d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fa2:	4b4f      	ldr	r3, [pc, #316]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a4e      	ldr	r2, [pc, #312]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8003fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fae:	f7fd f8ab 	bl	8001108 <HAL_GetTick>
 8003fb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fb4:	e008      	b.n	8003fc8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fb6:	f7fd f8a7 	bl	8001108 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e086      	b.n	80040d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fc8:	4b45      	ldr	r3, [pc, #276]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f0      	bne.n	8003fb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	051b      	lsls	r3, r3, #20
 8003fe2:	493f      	ldr	r1, [pc, #252]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	628b      	str	r3, [r1, #40]	; 0x28
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	025b      	lsls	r3, r3, #9
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	3b01      	subs	r3, #1
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	3b01      	subs	r3, #1
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004018:	4931      	ldr	r1, [pc, #196]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 800401a:	4313      	orrs	r3, r2
 800401c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800401e:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	492d      	ldr	r1, [pc, #180]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	4928      	ldr	r1, [pc, #160]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800404c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800404e:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <RCCEx_PLL3_Config+0x160>)
 8004054:	4013      	ands	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	69d2      	ldr	r2, [r2, #28]
 800405a:	00d2      	lsls	r2, r2, #3
 800405c:	4920      	ldr	r1, [pc, #128]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004062:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004074:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 800407a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800407e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004080:	e00f      	b.n	80040a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d106      	bne.n	8004096 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 800408e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004094:	e005      	b.n	80040a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	4a11      	ldr	r2, [pc, #68]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 800409c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ae:	f7fd f82b 	bl	8001108 <HAL_GetTick>
 80040b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040b4:	e008      	b.n	80040c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80040b6:	f7fd f827 	bl	8001108 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e006      	b.n	80040d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <RCCEx_PLL3_Config+0x15c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	58024400 	.word	0x58024400
 80040e4:	ffff0007 	.word	0xffff0007

080040e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e049      	b.n	800418e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f841 	bl	8004196 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 fa00 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d001      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e054      	b.n	800426e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <HAL_TIM_Base_Start_IT+0xd0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d022      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x80>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d01d      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x80>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a22      	ldr	r2, [pc, #136]	; (8004280 <HAL_TIM_Base_Start_IT+0xd4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d018      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x80>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a21      	ldr	r2, [pc, #132]	; (8004284 <HAL_TIM_Base_Start_IT+0xd8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x80>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_TIM_Base_Start_IT+0xdc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x80>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <HAL_TIM_Base_Start_IT+0xe0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x80>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <HAL_TIM_Base_Start_IT+0xe4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_TIM_Base_Start_IT+0x80>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <HAL_TIM_Base_Start_IT+0xe8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d115      	bne.n	8004258 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <HAL_TIM_Base_Start_IT+0xec>)
 8004234:	4013      	ands	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b06      	cmp	r3, #6
 800423c:	d015      	beq.n	800426a <HAL_TIM_Base_Start_IT+0xbe>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004244:	d011      	beq.n	800426a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	e008      	b.n	800426a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e000      	b.n	800426c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40010400 	.word	0x40010400
 8004290:	40001800 	.word	0x40001800
 8004294:	40014000 	.word	0x40014000
 8004298:	00010007 	.word	0x00010007

0800429c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d122      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0202 	mvn.w	r2, #2
 80042c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f905 	bl	80044ee <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f8f7 	bl	80044da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f908 	bl	8004502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b04      	cmp	r3, #4
 8004304:	d122      	bne.n	800434c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d11b      	bne.n	800434c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0204 	mvn.w	r2, #4
 800431c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f8db 	bl	80044ee <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8cd 	bl	80044da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f8de 	bl	8004502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b08      	cmp	r3, #8
 8004358:	d122      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0208 	mvn.w	r2, #8
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2204      	movs	r2, #4
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8b1 	bl	80044ee <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8a3 	bl	80044da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8b4 	bl	8004502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0210 	mvn.w	r2, #16
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2208      	movs	r2, #8
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f887 	bl	80044ee <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f879 	bl	80044da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f88a 	bl	8004502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0201 	mvn.w	r2, #1
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc fbb6 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b80      	cmp	r3, #128	; 0x80
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f914 	bl	8004674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445a:	d10e      	bne.n	800447a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d107      	bne.n	800447a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f907 	bl	8004688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d10e      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d107      	bne.n	80044a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800449e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f838 	bl	8004516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d10e      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d107      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f06f 0220 	mvn.w	r2, #32
 80044ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f8c7 	bl	8004660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a40      	ldr	r2, [pc, #256]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454a:	d00f      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3d      	ldr	r2, [pc, #244]	; (8004644 <TIM_Base_SetConfig+0x118>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3c      	ldr	r2, [pc, #240]	; (8004648 <TIM_Base_SetConfig+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3b      	ldr	r2, [pc, #236]	; (800464c <TIM_Base_SetConfig+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3a      	ldr	r2, [pc, #232]	; (8004650 <TIM_Base_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01f      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d01b      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <TIM_Base_SetConfig+0x118>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d017      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2b      	ldr	r2, [pc, #172]	; (8004648 <TIM_Base_SetConfig+0x11c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2a      	ldr	r2, [pc, #168]	; (800464c <TIM_Base_SetConfig+0x120>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a29      	ldr	r2, [pc, #164]	; (8004650 <TIM_Base_SetConfig+0x124>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a28      	ldr	r2, [pc, #160]	; (8004654 <TIM_Base_SetConfig+0x128>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a27      	ldr	r2, [pc, #156]	; (8004658 <TIM_Base_SetConfig+0x12c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a26      	ldr	r2, [pc, #152]	; (800465c <TIM_Base_SetConfig+0x130>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a10      	ldr	r2, [pc, #64]	; (8004640 <TIM_Base_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00f      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <TIM_Base_SetConfig+0x124>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a11      	ldr	r2, [pc, #68]	; (8004654 <TIM_Base_SetConfig+0x128>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a10      	ldr	r2, [pc, #64]	; (8004658 <TIM_Base_SetConfig+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0f      	ldr	r2, [pc, #60]	; (800465c <TIM_Base_SetConfig+0x130>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	615a      	str	r2, [r3, #20]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40010000 	.word	0x40010000
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40010400 	.word	0x40010400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800

08004660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e042      	b.n	8004734 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fc fb11 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2224      	movs	r2, #36	; 0x24
 80046ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8c2 	bl	8004868 <UART_SetConfig>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e022      	b.n	8004734 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fe1e 	bl	8005338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800470a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800471a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fea5 	bl	800547c <UART_CheckIdleState>
 8004732:	4603      	mov	r3, r0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004752:	2b20      	cmp	r3, #32
 8004754:	f040 8083 	bne.w	800485e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_UART_Transmit+0x28>
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e07b      	b.n	8004860 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_UART_Transmit+0x3a>
 8004772:	2302      	movs	r3, #2
 8004774:	e074      	b.n	8004860 <HAL_UART_Transmit+0x124>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2221      	movs	r2, #33	; 0x21
 800478a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478e:	f7fc fcbb 	bl	8001108 <HAL_GetTick>
 8004792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d108      	bne.n	80047c0 <HAL_UART_Transmit+0x84>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d104      	bne.n	80047c0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e003      	b.n	80047c8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80047d0:	e02c      	b.n	800482c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fe98 	bl	8005512 <UART_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e039      	b.n	8004860 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10b      	bne.n	800480a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004800:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	3302      	adds	r3, #2
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	e007      	b.n	800481a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	781a      	ldrb	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	3301      	adds	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1cc      	bne.n	80047d2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	2140      	movs	r1, #64	; 0x40
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fe65 	bl	8005512 <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e006      	b.n	8004860 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b092      	sub	sp, #72	; 0x48
 800486e:	af00      	add	r7, sp, #0
 8004870:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	431a      	orrs	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	431a      	orrs	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4313      	orrs	r3, r2
 800488e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4bbe      	ldr	r3, [pc, #760]	; (8004b90 <UART_SetConfig+0x328>)
 8004898:	4013      	ands	r3, r2
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4ab3      	ldr	r2, [pc, #716]	; (8004b94 <UART_SetConfig+0x32c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d0:	4313      	orrs	r3, r2
 80048d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	4baf      	ldr	r3, [pc, #700]	; (8004b98 <UART_SetConfig+0x330>)
 80048dc:	4013      	ands	r3, r2
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f023 010f 	bic.w	r1, r3, #15
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4aa6      	ldr	r2, [pc, #664]	; (8004b9c <UART_SetConfig+0x334>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d177      	bne.n	80049f8 <UART_SetConfig+0x190>
 8004908:	4ba5      	ldr	r3, [pc, #660]	; (8004ba0 <UART_SetConfig+0x338>)
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004910:	2b28      	cmp	r3, #40	; 0x28
 8004912:	d86d      	bhi.n	80049f0 <UART_SetConfig+0x188>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <UART_SetConfig+0xb4>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	080049c1 	.word	0x080049c1
 8004920:	080049f1 	.word	0x080049f1
 8004924:	080049f1 	.word	0x080049f1
 8004928:	080049f1 	.word	0x080049f1
 800492c:	080049f1 	.word	0x080049f1
 8004930:	080049f1 	.word	0x080049f1
 8004934:	080049f1 	.word	0x080049f1
 8004938:	080049f1 	.word	0x080049f1
 800493c:	080049c9 	.word	0x080049c9
 8004940:	080049f1 	.word	0x080049f1
 8004944:	080049f1 	.word	0x080049f1
 8004948:	080049f1 	.word	0x080049f1
 800494c:	080049f1 	.word	0x080049f1
 8004950:	080049f1 	.word	0x080049f1
 8004954:	080049f1 	.word	0x080049f1
 8004958:	080049f1 	.word	0x080049f1
 800495c:	080049d1 	.word	0x080049d1
 8004960:	080049f1 	.word	0x080049f1
 8004964:	080049f1 	.word	0x080049f1
 8004968:	080049f1 	.word	0x080049f1
 800496c:	080049f1 	.word	0x080049f1
 8004970:	080049f1 	.word	0x080049f1
 8004974:	080049f1 	.word	0x080049f1
 8004978:	080049f1 	.word	0x080049f1
 800497c:	080049d9 	.word	0x080049d9
 8004980:	080049f1 	.word	0x080049f1
 8004984:	080049f1 	.word	0x080049f1
 8004988:	080049f1 	.word	0x080049f1
 800498c:	080049f1 	.word	0x080049f1
 8004990:	080049f1 	.word	0x080049f1
 8004994:	080049f1 	.word	0x080049f1
 8004998:	080049f1 	.word	0x080049f1
 800499c:	080049e1 	.word	0x080049e1
 80049a0:	080049f1 	.word	0x080049f1
 80049a4:	080049f1 	.word	0x080049f1
 80049a8:	080049f1 	.word	0x080049f1
 80049ac:	080049f1 	.word	0x080049f1
 80049b0:	080049f1 	.word	0x080049f1
 80049b4:	080049f1 	.word	0x080049f1
 80049b8:	080049f1 	.word	0x080049f1
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c6:	e222      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049c8:	2304      	movs	r3, #4
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ce:	e21e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049d0:	2308      	movs	r3, #8
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049d6:	e21a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049d8:	2310      	movs	r3, #16
 80049da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049de:	e216      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049e0:	2320      	movs	r3, #32
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049e6:	e212      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049e8:	2340      	movs	r3, #64	; 0x40
 80049ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ee:	e20e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f6:	e20a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a69      	ldr	r2, [pc, #420]	; (8004ba4 <UART_SetConfig+0x33c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d130      	bne.n	8004a64 <UART_SetConfig+0x1fc>
 8004a02:	4b67      	ldr	r3, [pc, #412]	; (8004ba0 <UART_SetConfig+0x338>)
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d826      	bhi.n	8004a5c <UART_SetConfig+0x1f4>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <UART_SetConfig+0x1ac>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a2d 	.word	0x08004a2d
 8004a18:	08004a35 	.word	0x08004a35
 8004a1c:	08004a3d 	.word	0x08004a3d
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a32:	e1ec      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3a:	e1e8      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a42:	e1e4      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4a:	e1e0      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a52:	e1dc      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a5a:	e1d8      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a62:	e1d4      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a4f      	ldr	r2, [pc, #316]	; (8004ba8 <UART_SetConfig+0x340>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d130      	bne.n	8004ad0 <UART_SetConfig+0x268>
 8004a6e:	4b4c      	ldr	r3, [pc, #304]	; (8004ba0 <UART_SetConfig+0x338>)
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b05      	cmp	r3, #5
 8004a78:	d826      	bhi.n	8004ac8 <UART_SetConfig+0x260>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <UART_SetConfig+0x218>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a99 	.word	0x08004a99
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	08004aa9 	.word	0x08004aa9
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004ac1 	.word	0x08004ac1
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9e:	e1b6      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa6:	e1b2      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aae:	e1ae      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab6:	e1aa      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004abe:	e1a6      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ac6:	e1a2      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ac8:	2380      	movs	r3, #128	; 0x80
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ace:	e19e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a35      	ldr	r2, [pc, #212]	; (8004bac <UART_SetConfig+0x344>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d130      	bne.n	8004b3c <UART_SetConfig+0x2d4>
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <UART_SetConfig+0x338>)
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d826      	bhi.n	8004b34 <UART_SetConfig+0x2cc>
 8004ae6:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <UART_SetConfig+0x284>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004b05 	.word	0x08004b05
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	08004b15 	.word	0x08004b15
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0a:	e180      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b12:	e17c      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b14:	2308      	movs	r3, #8
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1a:	e178      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b22:	e174      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b24:	2320      	movs	r3, #32
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2a:	e170      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b2c:	2340      	movs	r3, #64	; 0x40
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b32:	e16c      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3a:	e168      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <UART_SetConfig+0x348>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d142      	bne.n	8004bcc <UART_SetConfig+0x364>
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <UART_SetConfig+0x338>)
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d838      	bhi.n	8004bc4 <UART_SetConfig+0x35c>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x2f0>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b71 	.word	0x08004b71
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	08004b81 	.word	0x08004b81
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004bb5 	.word	0x08004bb5
 8004b6c:	08004bbd 	.word	0x08004bbd
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b76:	e14a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7e:	e146      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b86:	e142      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8e:	e13e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004b90:	cfff69f3 	.word	0xcfff69f3
 8004b94:	58000c00 	.word	0x58000c00
 8004b98:	11fff4ff 	.word	0x11fff4ff
 8004b9c:	40011000 	.word	0x40011000
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	40004400 	.word	0x40004400
 8004ba8:	40004800 	.word	0x40004800
 8004bac:	40004c00 	.word	0x40004c00
 8004bb0:	40005000 	.word	0x40005000
 8004bb4:	2320      	movs	r3, #32
 8004bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bba:	e128      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004bbc:	2340      	movs	r3, #64	; 0x40
 8004bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bc2:	e124      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bca:	e120      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4acb      	ldr	r2, [pc, #812]	; (8004f00 <UART_SetConfig+0x698>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d176      	bne.n	8004cc4 <UART_SetConfig+0x45c>
 8004bd6:	4bcb      	ldr	r3, [pc, #812]	; (8004f04 <UART_SetConfig+0x69c>)
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bde:	2b28      	cmp	r3, #40	; 0x28
 8004be0:	d86c      	bhi.n	8004cbc <UART_SetConfig+0x454>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0x380>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c8d 	.word	0x08004c8d
 8004bec:	08004cbd 	.word	0x08004cbd
 8004bf0:	08004cbd 	.word	0x08004cbd
 8004bf4:	08004cbd 	.word	0x08004cbd
 8004bf8:	08004cbd 	.word	0x08004cbd
 8004bfc:	08004cbd 	.word	0x08004cbd
 8004c00:	08004cbd 	.word	0x08004cbd
 8004c04:	08004cbd 	.word	0x08004cbd
 8004c08:	08004c95 	.word	0x08004c95
 8004c0c:	08004cbd 	.word	0x08004cbd
 8004c10:	08004cbd 	.word	0x08004cbd
 8004c14:	08004cbd 	.word	0x08004cbd
 8004c18:	08004cbd 	.word	0x08004cbd
 8004c1c:	08004cbd 	.word	0x08004cbd
 8004c20:	08004cbd 	.word	0x08004cbd
 8004c24:	08004cbd 	.word	0x08004cbd
 8004c28:	08004c9d 	.word	0x08004c9d
 8004c2c:	08004cbd 	.word	0x08004cbd
 8004c30:	08004cbd 	.word	0x08004cbd
 8004c34:	08004cbd 	.word	0x08004cbd
 8004c38:	08004cbd 	.word	0x08004cbd
 8004c3c:	08004cbd 	.word	0x08004cbd
 8004c40:	08004cbd 	.word	0x08004cbd
 8004c44:	08004cbd 	.word	0x08004cbd
 8004c48:	08004ca5 	.word	0x08004ca5
 8004c4c:	08004cbd 	.word	0x08004cbd
 8004c50:	08004cbd 	.word	0x08004cbd
 8004c54:	08004cbd 	.word	0x08004cbd
 8004c58:	08004cbd 	.word	0x08004cbd
 8004c5c:	08004cbd 	.word	0x08004cbd
 8004c60:	08004cbd 	.word	0x08004cbd
 8004c64:	08004cbd 	.word	0x08004cbd
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cbd 	.word	0x08004cbd
 8004c70:	08004cbd 	.word	0x08004cbd
 8004c74:	08004cbd 	.word	0x08004cbd
 8004c78:	08004cbd 	.word	0x08004cbd
 8004c7c:	08004cbd 	.word	0x08004cbd
 8004c80:	08004cbd 	.word	0x08004cbd
 8004c84:	08004cbd 	.word	0x08004cbd
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e0bc      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9a:	e0b8      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ca2:	e0b4      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004caa:	e0b0      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004cac:	2320      	movs	r3, #32
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cb2:	e0ac      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cba:	e0a8      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cc2:	e0a4      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a8f      	ldr	r2, [pc, #572]	; (8004f08 <UART_SetConfig+0x6a0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d130      	bne.n	8004d30 <UART_SetConfig+0x4c8>
 8004cce:	4b8d      	ldr	r3, [pc, #564]	; (8004f04 <UART_SetConfig+0x69c>)
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d826      	bhi.n	8004d28 <UART_SetConfig+0x4c0>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0x478>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf9 	.word	0x08004cf9
 8004ce4:	08004d01 	.word	0x08004d01
 8004ce8:	08004d09 	.word	0x08004d09
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d19 	.word	0x08004d19
 8004cf4:	08004d21 	.word	0x08004d21
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e086      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e082      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0e:	e07e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d16:	e07a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d18:	2320      	movs	r3, #32
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1e:	e076      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d20:	2340      	movs	r3, #64	; 0x40
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d26:	e072      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2e:	e06e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a75      	ldr	r2, [pc, #468]	; (8004f0c <UART_SetConfig+0x6a4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d130      	bne.n	8004d9c <UART_SetConfig+0x534>
 8004d3a:	4b72      	ldr	r3, [pc, #456]	; (8004f04 <UART_SetConfig+0x69c>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d826      	bhi.n	8004d94 <UART_SetConfig+0x52c>
 8004d46:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0x4e4>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d65 	.word	0x08004d65
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	08004d75 	.word	0x08004d75
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e050      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e04c      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7a:	e048      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d82:	e044      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d84:	2320      	movs	r3, #32
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8a:	e040      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d8c:	2340      	movs	r3, #64	; 0x40
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d92:	e03c      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9a:	e038      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5b      	ldr	r2, [pc, #364]	; (8004f10 <UART_SetConfig+0x6a8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d130      	bne.n	8004e08 <UART_SetConfig+0x5a0>
 8004da6:	4b57      	ldr	r3, [pc, #348]	; (8004f04 <UART_SetConfig+0x69c>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	d826      	bhi.n	8004e00 <UART_SetConfig+0x598>
 8004db2:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <UART_SetConfig+0x550>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004dd1 	.word	0x08004dd1
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e01a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dde:	e016      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de6:	e012      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e00e      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004df0:	2320      	movs	r3, #32
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df6:	e00a      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004df8:	2340      	movs	r3, #64	; 0x40
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfe:	e006      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004e00:	2380      	movs	r3, #128	; 0x80
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e06:	e002      	b.n	8004e0e <UART_SetConfig+0x5a6>
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a3f      	ldr	r2, [pc, #252]	; (8004f10 <UART_SetConfig+0x6a8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	f040 80f8 	bne.w	800500a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	dc46      	bgt.n	8004eb0 <UART_SetConfig+0x648>
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	f2c0 8082 	blt.w	8004f2c <UART_SetConfig+0x6c4>
 8004e28:	3b02      	subs	r3, #2
 8004e2a:	2b1e      	cmp	r3, #30
 8004e2c:	d87e      	bhi.n	8004f2c <UART_SetConfig+0x6c4>
 8004e2e:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <UART_SetConfig+0x5cc>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004eb7 	.word	0x08004eb7
 8004e38:	08004f2d 	.word	0x08004f2d
 8004e3c:	08004ebf 	.word	0x08004ebf
 8004e40:	08004f2d 	.word	0x08004f2d
 8004e44:	08004f2d 	.word	0x08004f2d
 8004e48:	08004f2d 	.word	0x08004f2d
 8004e4c:	08004ecf 	.word	0x08004ecf
 8004e50:	08004f2d 	.word	0x08004f2d
 8004e54:	08004f2d 	.word	0x08004f2d
 8004e58:	08004f2d 	.word	0x08004f2d
 8004e5c:	08004f2d 	.word	0x08004f2d
 8004e60:	08004f2d 	.word	0x08004f2d
 8004e64:	08004f2d 	.word	0x08004f2d
 8004e68:	08004f2d 	.word	0x08004f2d
 8004e6c:	08004edf 	.word	0x08004edf
 8004e70:	08004f2d 	.word	0x08004f2d
 8004e74:	08004f2d 	.word	0x08004f2d
 8004e78:	08004f2d 	.word	0x08004f2d
 8004e7c:	08004f2d 	.word	0x08004f2d
 8004e80:	08004f2d 	.word	0x08004f2d
 8004e84:	08004f2d 	.word	0x08004f2d
 8004e88:	08004f2d 	.word	0x08004f2d
 8004e8c:	08004f2d 	.word	0x08004f2d
 8004e90:	08004f2d 	.word	0x08004f2d
 8004e94:	08004f2d 	.word	0x08004f2d
 8004e98:	08004f2d 	.word	0x08004f2d
 8004e9c:	08004f2d 	.word	0x08004f2d
 8004ea0:	08004f2d 	.word	0x08004f2d
 8004ea4:	08004f2d 	.word	0x08004f2d
 8004ea8:	08004f2d 	.word	0x08004f2d
 8004eac:	08004f1f 	.word	0x08004f1f
 8004eb0:	2b40      	cmp	r3, #64	; 0x40
 8004eb2:	d037      	beq.n	8004f24 <UART_SetConfig+0x6bc>
 8004eb4:	e03a      	b.n	8004f2c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004eb6:	f7fe fcf5 	bl	80038a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004eba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ebc:	e03c      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fd04 	bl	80038d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ecc:	e034      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ece:	f107 0318 	add.w	r3, r7, #24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fe50 	bl	8003b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004edc:	e02c      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <UART_SetConfig+0x69c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <UART_SetConfig+0x69c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	08db      	lsrs	r3, r3, #3
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <UART_SetConfig+0x6ac>)
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004efc:	e01c      	b.n	8004f38 <UART_SetConfig+0x6d0>
 8004efe:	bf00      	nop
 8004f00:	40011400 	.word	0x40011400
 8004f04:	58024400 	.word	0x58024400
 8004f08:	40007800 	.word	0x40007800
 8004f0c:	40007c00 	.word	0x40007c00
 8004f10:	58000c00 	.word	0x58000c00
 8004f14:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004f18:	4b9d      	ldr	r3, [pc, #628]	; (8005190 <UART_SetConfig+0x928>)
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f1c:	e00c      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f1e:	4b9d      	ldr	r3, [pc, #628]	; (8005194 <UART_SetConfig+0x92c>)
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f22:	e009      	b.n	8004f38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f2a:	e005      	b.n	8004f38 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 81de 	beq.w	80052fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	4a94      	ldr	r2, [pc, #592]	; (8005198 <UART_SetConfig+0x930>)
 8004f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d305      	bcc.n	8004f70 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d903      	bls.n	8004f78 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004f76:	e1c1      	b.n	80052fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	60fa      	str	r2, [r7, #12]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	4a84      	ldr	r2, [pc, #528]	; (8005198 <UART_SetConfig+0x930>)
 8004f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f9a:	f7fb f9f1 	bl	8000380 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	020b      	lsls	r3, r1, #8
 8004fb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fb4:	0202      	lsls	r2, r0, #8
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	6849      	ldr	r1, [r1, #4]
 8004fba:	0849      	lsrs	r1, r1, #1
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	eb12 0804 	adds.w	r8, r2, r4
 8004fc6:	eb43 0905 	adc.w	r9, r3, r5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	4693      	mov	fp, r2
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	465b      	mov	r3, fp
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4649      	mov	r1, r9
 8004fdc:	f7fb f9d0 	bl	8000380 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fee:	d308      	bcc.n	8005002 <UART_SetConfig+0x79a>
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff6:	d204      	bcs.n	8005002 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	e17c      	b.n	80052fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005008:	e178      	b.n	80052fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005012:	f040 80c5 	bne.w	80051a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005016:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800501a:	2b20      	cmp	r3, #32
 800501c:	dc48      	bgt.n	80050b0 <UART_SetConfig+0x848>
 800501e:	2b00      	cmp	r3, #0
 8005020:	db7b      	blt.n	800511a <UART_SetConfig+0x8b2>
 8005022:	2b20      	cmp	r3, #32
 8005024:	d879      	bhi.n	800511a <UART_SetConfig+0x8b2>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <UART_SetConfig+0x7c4>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	080050b7 	.word	0x080050b7
 8005030:	080050bf 	.word	0x080050bf
 8005034:	0800511b 	.word	0x0800511b
 8005038:	0800511b 	.word	0x0800511b
 800503c:	080050c7 	.word	0x080050c7
 8005040:	0800511b 	.word	0x0800511b
 8005044:	0800511b 	.word	0x0800511b
 8005048:	0800511b 	.word	0x0800511b
 800504c:	080050d7 	.word	0x080050d7
 8005050:	0800511b 	.word	0x0800511b
 8005054:	0800511b 	.word	0x0800511b
 8005058:	0800511b 	.word	0x0800511b
 800505c:	0800511b 	.word	0x0800511b
 8005060:	0800511b 	.word	0x0800511b
 8005064:	0800511b 	.word	0x0800511b
 8005068:	0800511b 	.word	0x0800511b
 800506c:	080050e7 	.word	0x080050e7
 8005070:	0800511b 	.word	0x0800511b
 8005074:	0800511b 	.word	0x0800511b
 8005078:	0800511b 	.word	0x0800511b
 800507c:	0800511b 	.word	0x0800511b
 8005080:	0800511b 	.word	0x0800511b
 8005084:	0800511b 	.word	0x0800511b
 8005088:	0800511b 	.word	0x0800511b
 800508c:	0800511b 	.word	0x0800511b
 8005090:	0800511b 	.word	0x0800511b
 8005094:	0800511b 	.word	0x0800511b
 8005098:	0800511b 	.word	0x0800511b
 800509c:	0800511b 	.word	0x0800511b
 80050a0:	0800511b 	.word	0x0800511b
 80050a4:	0800511b 	.word	0x0800511b
 80050a8:	0800511b 	.word	0x0800511b
 80050ac:	0800510d 	.word	0x0800510d
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d02e      	beq.n	8005112 <UART_SetConfig+0x8aa>
 80050b4:	e031      	b.n	800511a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b6:	f7fd fc41 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 80050ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050bc:	e033      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050be:	f7fd fc53 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 80050c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80050c4:	e02f      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fc00 	bl	80038d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d4:	e027      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050d6:	f107 0318 	add.w	r3, r7, #24
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fd4c 	bl	8003b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e4:	e01f      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e6:	4b2d      	ldr	r3, [pc, #180]	; (800519c <UART_SetConfig+0x934>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050f2:	4b2a      	ldr	r3, [pc, #168]	; (800519c <UART_SetConfig+0x934>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	08db      	lsrs	r3, r3, #3
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	4a24      	ldr	r2, [pc, #144]	; (8005190 <UART_SetConfig+0x928>)
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005104:	e00f      	b.n	8005126 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005106:	4b22      	ldr	r3, [pc, #136]	; (8005190 <UART_SetConfig+0x928>)
 8005108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800510a:	e00c      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800510c:	4b21      	ldr	r3, [pc, #132]	; (8005194 <UART_SetConfig+0x92c>)
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005110:	e009      	b.n	8005126 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005118:	e005      	b.n	8005126 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80e7 	beq.w	80052fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	4a19      	ldr	r2, [pc, #100]	; (8005198 <UART_SetConfig+0x930>)
 8005134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005138:	461a      	mov	r2, r3
 800513a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005140:	005a      	lsls	r2, r3, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	441a      	add	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	2b0f      	cmp	r3, #15
 8005158:	d916      	bls.n	8005188 <UART_SetConfig+0x920>
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005160:	d212      	bcs.n	8005188 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	b29b      	uxth	r3, r3
 8005166:	f023 030f 	bic.w	r3, r3, #15
 800516a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	b29a      	uxth	r2, r3
 8005178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800517a:	4313      	orrs	r3, r2
 800517c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	e0b9      	b.n	80052fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800518e:	e0b5      	b.n	80052fc <UART_SetConfig+0xa94>
 8005190:	03d09000 	.word	0x03d09000
 8005194:	003d0900 	.word	0x003d0900
 8005198:	08009534 	.word	0x08009534
 800519c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	dc49      	bgt.n	800523c <UART_SetConfig+0x9d4>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db7c      	blt.n	80052a6 <UART_SetConfig+0xa3e>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d87a      	bhi.n	80052a6 <UART_SetConfig+0xa3e>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0x950>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	08005243 	.word	0x08005243
 80051bc:	0800524b 	.word	0x0800524b
 80051c0:	080052a7 	.word	0x080052a7
 80051c4:	080052a7 	.word	0x080052a7
 80051c8:	08005253 	.word	0x08005253
 80051cc:	080052a7 	.word	0x080052a7
 80051d0:	080052a7 	.word	0x080052a7
 80051d4:	080052a7 	.word	0x080052a7
 80051d8:	08005263 	.word	0x08005263
 80051dc:	080052a7 	.word	0x080052a7
 80051e0:	080052a7 	.word	0x080052a7
 80051e4:	080052a7 	.word	0x080052a7
 80051e8:	080052a7 	.word	0x080052a7
 80051ec:	080052a7 	.word	0x080052a7
 80051f0:	080052a7 	.word	0x080052a7
 80051f4:	080052a7 	.word	0x080052a7
 80051f8:	08005273 	.word	0x08005273
 80051fc:	080052a7 	.word	0x080052a7
 8005200:	080052a7 	.word	0x080052a7
 8005204:	080052a7 	.word	0x080052a7
 8005208:	080052a7 	.word	0x080052a7
 800520c:	080052a7 	.word	0x080052a7
 8005210:	080052a7 	.word	0x080052a7
 8005214:	080052a7 	.word	0x080052a7
 8005218:	080052a7 	.word	0x080052a7
 800521c:	080052a7 	.word	0x080052a7
 8005220:	080052a7 	.word	0x080052a7
 8005224:	080052a7 	.word	0x080052a7
 8005228:	080052a7 	.word	0x080052a7
 800522c:	080052a7 	.word	0x080052a7
 8005230:	080052a7 	.word	0x080052a7
 8005234:	080052a7 	.word	0x080052a7
 8005238:	08005299 	.word	0x08005299
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d02e      	beq.n	800529e <UART_SetConfig+0xa36>
 8005240:	e031      	b.n	80052a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005242:	f7fd fb7b 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8005246:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005248:	e033      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800524a:	f7fd fb8d 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 800524e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005250:	e02f      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fb3a 	bl	80038d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005260:	e027      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005262:	f107 0318 	add.w	r3, r7, #24
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fc86 	bl	8003b78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005270:	e01f      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005272:	4b2d      	ldr	r3, [pc, #180]	; (8005328 <UART_SetConfig+0xac0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800527e:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <UART_SetConfig+0xac0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	08db      	lsrs	r3, r3, #3
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	4a28      	ldr	r2, [pc, #160]	; (800532c <UART_SetConfig+0xac4>)
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005290:	e00f      	b.n	80052b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005292:	4b26      	ldr	r3, [pc, #152]	; (800532c <UART_SetConfig+0xac4>)
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005296:	e00c      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <UART_SetConfig+0xac8>)
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800529c:	e009      	b.n	80052b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052a4:	e005      	b.n	80052b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80052b0:	bf00      	nop
    }

    if (pclk != 0U)
 80052b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d021      	beq.n	80052fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <UART_SetConfig+0xacc>)
 80052be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	441a      	add	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d909      	bls.n	80052f6 <UART_SetConfig+0xa8e>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d205      	bcs.n	80052f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60da      	str	r2, [r3, #12]
 80052f4:	e002      	b.n	80052fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2201      	movs	r2, #1
 8005300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2201      	movs	r2, #1
 8005308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005318:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800531c:	4618      	mov	r0, r3
 800531e:	3748      	adds	r7, #72	; 0x48
 8005320:	46bd      	mov	sp, r7
 8005322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005326:	bf00      	nop
 8005328:	58024400 	.word	0x58024400
 800532c:	03d09000 	.word	0x03d09000
 8005330:	003d0900 	.word	0x003d0900
 8005334:	08009534 	.word	0x08009534

08005338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01a      	beq.n	800544e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005436:	d10a      	bne.n	800544e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af02      	add	r7, sp, #8
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800548c:	f7fb fe3c 	bl	8001108 <HAL_GetTick>
 8005490:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b08      	cmp	r3, #8
 800549e:	d10e      	bne.n	80054be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f82f 	bl	8005512 <UART_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e025      	b.n	800550a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d10e      	bne.n	80054ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f819 	bl	8005512 <UART_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e00f      	b.n	800550a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b09c      	sub	sp, #112	; 0x70
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005522:	e0a9      	b.n	8005678 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552a:	f000 80a5 	beq.w	8005678 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552e:	f7fb fdeb 	bl	8001108 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <UART_WaitOnFlagUntilTimeout+0x32>
 800553e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005540:	2b00      	cmp	r3, #0
 8005542:	d140      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005558:	667b      	str	r3, [r7, #100]	; 0x64
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005564:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e6      	bne.n	8005544 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	663b      	str	r3, [r7, #96]	; 0x60
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3308      	adds	r3, #8
 8005594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005596:	64ba      	str	r2, [r7, #72]	; 0x48
 8005598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800559c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e069      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d051      	beq.n	8005678 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e2:	d149      	bne.n	8005678 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	613b      	str	r3, [r7, #16]
   return(result);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	66bb      	str	r3, [r7, #104]	; 0x68
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005640:	623a      	str	r2, [r7, #32]
 8005642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69f9      	ldr	r1, [r7, #28]
 8005646:	6a3a      	ldr	r2, [r7, #32]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	61bb      	str	r3, [r7, #24]
   return(result);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e010      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	429a      	cmp	r2, r3
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	429a      	cmp	r2, r3
 8005694:	f43f af46 	beq.w	8005524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3770      	adds	r7, #112	; 0x70
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e027      	b.n	8005708 <HAL_UARTEx_DisableFifoMode+0x66>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2224      	movs	r2, #36	; 0x24
 80056c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e02d      	b.n	8005788 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f84f 	bl	800580c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e02d      	b.n	8005804 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f811 	bl	800580c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005818:	2b00      	cmp	r3, #0
 800581a:	d108      	bne.n	800582e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800582c:	e031      	b.n	8005892 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800582e:	2310      	movs	r3, #16
 8005830:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005832:	2310      	movs	r3, #16
 8005834:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	0e5b      	lsrs	r3, r3, #25
 800583e:	b2db      	uxtb	r3, r3
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	0f5b      	lsrs	r3, r3, #29
 800584e:	b2db      	uxtb	r3, r3
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	7b3a      	ldrb	r2, [r7, #12]
 800585a:	4911      	ldr	r1, [pc, #68]	; (80058a0 <UARTEx_SetNbDataToProcess+0x94>)
 800585c:	5c8a      	ldrb	r2, [r1, r2]
 800585e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005862:	7b3a      	ldrb	r2, [r7, #12]
 8005864:	490f      	ldr	r1, [pc, #60]	; (80058a4 <UARTEx_SetNbDataToProcess+0x98>)
 8005866:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005868:	fb93 f3f2 	sdiv	r3, r3, r2
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	7b7a      	ldrb	r2, [r7, #13]
 8005878:	4909      	ldr	r1, [pc, #36]	; (80058a0 <UARTEx_SetNbDataToProcess+0x94>)
 800587a:	5c8a      	ldrb	r2, [r1, r2]
 800587c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005880:	7b7a      	ldrb	r2, [r7, #13]
 8005882:	4908      	ldr	r1, [pc, #32]	; (80058a4 <UARTEx_SetNbDataToProcess+0x98>)
 8005884:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005886:	fb93 f3f2 	sdiv	r3, r3, r2
 800588a:	b29a      	uxth	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	0800954c 	.word	0x0800954c
 80058a4:	08009554 	.word	0x08009554

080058a8 <__NVIC_SetPriority>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	6039      	str	r1, [r7, #0]
 80058b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db0a      	blt.n	80058d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	490c      	ldr	r1, [pc, #48]	; (80058f4 <__NVIC_SetPriority+0x4c>)
 80058c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058c6:	0112      	lsls	r2, r2, #4
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	440b      	add	r3, r1
 80058cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058d0:	e00a      	b.n	80058e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4908      	ldr	r1, [pc, #32]	; (80058f8 <__NVIC_SetPriority+0x50>)
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	3b04      	subs	r3, #4
 80058e0:	0112      	lsls	r2, r2, #4
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	440b      	add	r3, r1
 80058e6:	761a      	strb	r2, [r3, #24]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000e100 	.word	0xe000e100
 80058f8:	e000ed00 	.word	0xe000ed00

080058fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <SysTick_Handler+0x1c>)
 8005902:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005904:	f002 f964 	bl	8007bd0 <xTaskGetSchedulerState>
 8005908:	4603      	mov	r3, r0
 800590a:	2b01      	cmp	r3, #1
 800590c:	d001      	beq.n	8005912 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800590e:	f000 fd9b 	bl	8006448 <xPortSysTickHandler>
  }
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	e000e010 	.word	0xe000e010

0800591c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005920:	2100      	movs	r1, #0
 8005922:	f06f 0004 	mvn.w	r0, #4
 8005926:	f7ff ffbf 	bl	80058a8 <__NVIC_SetPriority>
#endif
}
 800592a:	bf00      	nop
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005936:	f3ef 8305 	mrs	r3, IPSR
 800593a:	603b      	str	r3, [r7, #0]
  return(result);
 800593c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005942:	f06f 0305 	mvn.w	r3, #5
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	e00c      	b.n	8005964 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800594a:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <osKernelInitialize+0x44>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <osKernelInitialize+0x44>)
 8005954:	2201      	movs	r2, #1
 8005956:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005958:	2300      	movs	r3, #0
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	e002      	b.n	8005964 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800595e:	f04f 33ff 	mov.w	r3, #4294967295
 8005962:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005964:	687b      	ldr	r3, [r7, #4]
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	240001c8 	.word	0x240001c8

08005978 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597e:	f3ef 8305 	mrs	r3, IPSR
 8005982:	603b      	str	r3, [r7, #0]
  return(result);
 8005984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <osKernelStart+0x1a>
    stat = osErrorISR;
 800598a:	f06f 0305 	mvn.w	r3, #5
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	e010      	b.n	80059b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <osKernelStart+0x48>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d109      	bne.n	80059ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800599a:	f7ff ffbf 	bl	800591c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800599e:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <osKernelStart+0x48>)
 80059a0:	2202      	movs	r2, #2
 80059a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059a4:	f001 fcb8 	bl	8007318 <vTaskStartScheduler>
      stat = osOK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	e002      	b.n	80059b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059ae:	f04f 33ff 	mov.w	r3, #4294967295
 80059b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059b4:	687b      	ldr	r3, [r7, #4]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	240001c8 	.word	0x240001c8

080059c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	; 0x38
 80059c8:	af04      	add	r7, sp, #16
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d4:	f3ef 8305 	mrs	r3, IPSR
 80059d8:	617b      	str	r3, [r7, #20]
  return(result);
 80059da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d17e      	bne.n	8005ade <osThreadNew+0x11a>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d07b      	beq.n	8005ade <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059ea:	2318      	movs	r3, #24
 80059ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295
 80059f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d045      	beq.n	8005a8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <osThreadNew+0x48>
        name = attr->name;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <osThreadNew+0x6e>
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b38      	cmp	r3, #56	; 0x38
 8005a24:	d805      	bhi.n	8005a32 <osThreadNew+0x6e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <osThreadNew+0x72>
        return (NULL);
 8005a32:	2300      	movs	r3, #0
 8005a34:	e054      	b.n	8005ae0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00e      	beq.n	8005a6c <osThreadNew+0xa8>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2bbb      	cmp	r3, #187	; 0xbb
 8005a54:	d90a      	bls.n	8005a6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d006      	beq.n	8005a6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <osThreadNew+0xa8>
        mem = 1;
 8005a66:	2301      	movs	r3, #1
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	e010      	b.n	8005a8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10c      	bne.n	8005a8e <osThreadNew+0xca>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d108      	bne.n	8005a8e <osThreadNew+0xca>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <osThreadNew+0xca>
          mem = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	e001      	b.n	8005a8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d110      	bne.n	8005ab6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a9c:	9202      	str	r2, [sp, #8]
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f001 fa48 	bl	8006f40 <xTaskCreateStatic>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	e013      	b.n	8005ade <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d110      	bne.n	8005ade <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	f107 0310 	add.w	r3, r7, #16
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f001 fa93 	bl	8006ffa <xTaskCreate>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d001      	beq.n	8005ade <osThreadNew+0x11a>
            hTask = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ade:	693b      	ldr	r3, [r7, #16]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3728      	adds	r7, #40	; 0x28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af0:	f3ef 8305 	mrs	r3, IPSR
 8005af4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005af6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <osDelay+0x1c>
    stat = osErrorISR;
 8005afc:	f06f 0305 	mvn.w	r3, #5
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e007      	b.n	8005b14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fbce 	bl	80072b0 <vTaskDelay>
    }
  }

  return (stat);
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a07      	ldr	r2, [pc, #28]	; (8005b4c <vApplicationGetIdleTaskMemory+0x2c>)
 8005b30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4a06      	ldr	r2, [pc, #24]	; (8005b50 <vApplicationGetIdleTaskMemory+0x30>)
 8005b36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	240001cc 	.word	0x240001cc
 8005b50:	24000288 	.word	0x24000288

08005b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4a06      	ldr	r2, [pc, #24]	; (8005b84 <vApplicationGetTimerTaskMemory+0x30>)
 8005b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b72:	601a      	str	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	24000488 	.word	0x24000488
 8005b84:	24000544 	.word	0x24000544

08005b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b94:	f001 fc30 	bl	80073f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b98:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <pvPortMalloc+0x180>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ba0:	f000 f920 	bl	8005de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ba4:	4b59      	ldr	r3, [pc, #356]	; (8005d0c <pvPortMalloc+0x184>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 8093 	bne.w	8005cd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01d      	beq.n	8005bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005bb8:	2208      	movs	r2, #8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d014      	beq.n	8005bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f023 0307 	bic.w	r3, r3, #7
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d06e      	beq.n	8005cd8 <pvPortMalloc+0x150>
 8005bfa:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <pvPortMalloc+0x188>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d869      	bhi.n	8005cd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c04:	4b43      	ldr	r3, [pc, #268]	; (8005d14 <pvPortMalloc+0x18c>)
 8005c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c08:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <pvPortMalloc+0x18c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c0e:	e004      	b.n	8005c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d903      	bls.n	8005c2c <pvPortMalloc+0xa4>
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f1      	bne.n	8005c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c2c:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <pvPortMalloc+0x180>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d050      	beq.n	8005cd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	2308      	movs	r3, #8
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d91f      	bls.n	8005c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <pvPortMalloc+0xf8>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	613b      	str	r3, [r7, #16]
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c92:	69b8      	ldr	r0, [r7, #24]
 8005c94:	f000 f908 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <pvPortMalloc+0x188>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <pvPortMalloc+0x188>)
 8005ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ca6:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <pvPortMalloc+0x188>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <pvPortMalloc+0x190>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d203      	bcs.n	8005cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <pvPortMalloc+0x188>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <pvPortMalloc+0x190>)
 8005cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <pvPortMalloc+0x184>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <pvPortMalloc+0x194>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <pvPortMalloc+0x194>)
 8005cd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cd8:	f001 fb9c 	bl	8007414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <pvPortMalloc+0x174>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60fb      	str	r3, [r7, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <pvPortMalloc+0x172>
	return pvReturn;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3728      	adds	r7, #40	; 0x28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	2400454c 	.word	0x2400454c
 8005d0c:	24004560 	.word	0x24004560
 8005d10:	24004550 	.word	0x24004550
 8005d14:	24004544 	.word	0x24004544
 8005d18:	24004554 	.word	0x24004554
 8005d1c:	24004558 	.word	0x24004558

08005d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d04d      	beq.n	8005dce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d32:	2308      	movs	r3, #8
 8005d34:	425b      	negs	r3, r3
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4413      	add	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <vPortFree+0xb8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <vPortFree+0x44>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60fb      	str	r3, [r7, #12]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <vPortFree+0x62>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60bb      	str	r3, [r7, #8]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <vPortFree+0xb8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01e      	beq.n	8005dce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11a      	bne.n	8005dce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <vPortFree+0xb8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	401a      	ands	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005da8:	f001 fb26 	bl	80073f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <vPortFree+0xbc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <vPortFree+0xbc>)
 8005db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dba:	6938      	ldr	r0, [r7, #16]
 8005dbc:	f000 f874 	bl	8005ea8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <vPortFree+0xc0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <vPortFree+0xc0>)
 8005dc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dca:	f001 fb23 	bl	8007414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	24004560 	.word	0x24004560
 8005ddc:	24004550 	.word	0x24004550
 8005de0:	2400455c 	.word	0x2400455c

08005de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005df0:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <prvHeapInit+0xac>)
 8005df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00c      	beq.n	8005e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3307      	adds	r3, #7
 8005e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <prvHeapInit+0xac>)
 8005e14:	4413      	add	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <prvHeapInit+0xb0>)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <prvHeapInit+0xb0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e30:	2208      	movs	r2, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <prvHeapInit+0xb4>)
 8005e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e46:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <prvHeapInit+0xb4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <prvHeapInit+0xb4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	1ad2      	subs	r2, r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <prvHeapInit+0xb4>)
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <prvHeapInit+0xb8>)
 8005e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <prvHeapInit+0xbc>)
 8005e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e7c:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <prvHeapInit+0xc0>)
 8005e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e82:	601a      	str	r2, [r3, #0]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	24000944 	.word	0x24000944
 8005e94:	24004544 	.word	0x24004544
 8005e98:	2400454c 	.word	0x2400454c
 8005e9c:	24004554 	.word	0x24004554
 8005ea0:	24004550 	.word	0x24004550
 8005ea4:	24004560 	.word	0x24004560

08005ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eb0:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <prvInsertBlockIntoFreeList+0xac>)
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e002      	b.n	8005ebc <prvInsertBlockIntoFreeList+0x14>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d8f7      	bhi.n	8005eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d108      	bne.n	8005eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d118      	bne.n	8005f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d00d      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e008      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f26:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <prvInsertBlockIntoFreeList+0xb0>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e003      	b.n	8005f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	24004544 	.word	0x24004544
 8005f58:	2400454c 	.word	0x2400454c

08005f5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f103 0208 	add.w	r2, r3, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f103 0208 	add.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d103      	bne.n	800601e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e00c      	b.n	8006038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3308      	adds	r3, #8
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e002      	b.n	800602c <vListInsert+0x2e>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d2f6      	bcs.n	8006026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6892      	ldr	r2, [r2, #8]
 8006086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6852      	ldr	r2, [r2, #4]
 8006090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	d103      	bne.n	80060a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1e5a      	subs	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3b04      	subs	r3, #4
 80060d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3b04      	subs	r3, #4
 80060e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f023 0201 	bic.w	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060f4:	4a0c      	ldr	r2, [pc, #48]	; (8006128 <pxPortInitialiseStack+0x64>)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3b14      	subs	r3, #20
 80060fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3b04      	subs	r3, #4
 800610a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f06f 0202 	mvn.w	r2, #2
 8006112:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3b20      	subs	r3, #32
 8006118:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	0800612d 	.word	0x0800612d

0800612c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006136:	4b12      	ldr	r3, [pc, #72]	; (8006180 <prvTaskExitError+0x54>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d00a      	beq.n	8006156 <prvTaskExitError+0x2a>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	60fb      	str	r3, [r7, #12]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <prvTaskExitError+0x28>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60bb      	str	r3, [r7, #8]
}
 8006168:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800616a:	bf00      	nop
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0fc      	beq.n	800616c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	24000010 	.word	0x24000010
	...

08006190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <pxCurrentTCBConst2>)
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	6808      	ldr	r0, [r1, #0]
 8006196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619a:	f380 8809 	msr	PSP, r0
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8811 	msr	BASEPRI, r0
 80061aa:	4770      	bx	lr
 80061ac:	f3af 8000 	nop.w

080061b0 <pxCurrentTCBConst2>:
 80061b0:	240045ac 	.word	0x240045ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop

080061b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061b8:	4808      	ldr	r0, [pc, #32]	; (80061dc <prvPortStartFirstTask+0x24>)
 80061ba:	6800      	ldr	r0, [r0, #0]
 80061bc:	6800      	ldr	r0, [r0, #0]
 80061be:	f380 8808 	msr	MSP, r0
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f380 8814 	msr	CONTROL, r0
 80061ca:	b662      	cpsie	i
 80061cc:	b661      	cpsie	f
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	df00      	svc	0
 80061d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061da:	bf00      	nop
 80061dc:	e000ed08 	.word	0xe000ed08

080061e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061e6:	4b46      	ldr	r3, [pc, #280]	; (8006300 <xPortStartScheduler+0x120>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a46      	ldr	r2, [pc, #280]	; (8006304 <xPortStartScheduler+0x124>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10a      	bne.n	8006206 <xPortStartScheduler+0x26>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	613b      	str	r3, [r7, #16]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006206:	4b3e      	ldr	r3, [pc, #248]	; (8006300 <xPortStartScheduler+0x120>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a3f      	ldr	r2, [pc, #252]	; (8006308 <xPortStartScheduler+0x128>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d10a      	bne.n	8006226 <xPortStartScheduler+0x46>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60fb      	str	r3, [r7, #12]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006226:	4b39      	ldr	r3, [pc, #228]	; (800630c <xPortStartScheduler+0x12c>)
 8006228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	22ff      	movs	r2, #255	; 0xff
 8006236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006248:	b2da      	uxtb	r2, r3
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <xPortStartScheduler+0x130>)
 800624c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800624e:	4b31      	ldr	r3, [pc, #196]	; (8006314 <xPortStartScheduler+0x134>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006254:	e009      	b.n	800626a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006256:	4b2f      	ldr	r3, [pc, #188]	; (8006314 <xPortStartScheduler+0x134>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3b01      	subs	r3, #1
 800625c:	4a2d      	ldr	r2, [pc, #180]	; (8006314 <xPortStartScheduler+0x134>)
 800625e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	b2db      	uxtb	r3, r3
 8006268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d0ef      	beq.n	8006256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006276:	4b27      	ldr	r3, [pc, #156]	; (8006314 <xPortStartScheduler+0x134>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f1c3 0307 	rsb	r3, r3, #7
 800627e:	2b04      	cmp	r3, #4
 8006280:	d00a      	beq.n	8006298 <xPortStartScheduler+0xb8>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60bb      	str	r3, [r7, #8]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006298:	4b1e      	ldr	r3, [pc, #120]	; (8006314 <xPortStartScheduler+0x134>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	4a1d      	ldr	r2, [pc, #116]	; (8006314 <xPortStartScheduler+0x134>)
 80062a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062a2:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <xPortStartScheduler+0x134>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062aa:	4a1a      	ldr	r2, [pc, #104]	; (8006314 <xPortStartScheduler+0x134>)
 80062ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062b6:	4b18      	ldr	r3, [pc, #96]	; (8006318 <xPortStartScheduler+0x138>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a17      	ldr	r2, [pc, #92]	; (8006318 <xPortStartScheduler+0x138>)
 80062bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062c2:	4b15      	ldr	r3, [pc, #84]	; (8006318 <xPortStartScheduler+0x138>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a14      	ldr	r2, [pc, #80]	; (8006318 <xPortStartScheduler+0x138>)
 80062c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062ce:	f000 f8dd 	bl	800648c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <xPortStartScheduler+0x13c>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062d8:	f000 f8fc 	bl	80064d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062dc:	4b10      	ldr	r3, [pc, #64]	; (8006320 <xPortStartScheduler+0x140>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a0f      	ldr	r2, [pc, #60]	; (8006320 <xPortStartScheduler+0x140>)
 80062e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062e8:	f7ff ff66 	bl	80061b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062ec:	f001 f9fa 	bl	80076e4 <vTaskSwitchContext>
	prvTaskExitError();
 80062f0:	f7ff ff1c 	bl	800612c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	e000ed00 	.word	0xe000ed00
 8006304:	410fc271 	.word	0x410fc271
 8006308:	410fc270 	.word	0x410fc270
 800630c:	e000e400 	.word	0xe000e400
 8006310:	24004564 	.word	0x24004564
 8006314:	24004568 	.word	0x24004568
 8006318:	e000ed20 	.word	0xe000ed20
 800631c:	24000010 	.word	0x24000010
 8006320:	e000ef34 	.word	0xe000ef34

08006324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	607b      	str	r3, [r7, #4]
}
 800633c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800633e:	4b0f      	ldr	r3, [pc, #60]	; (800637c <vPortEnterCritical+0x58>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	4a0d      	ldr	r2, [pc, #52]	; (800637c <vPortEnterCritical+0x58>)
 8006346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006348:	4b0c      	ldr	r3, [pc, #48]	; (800637c <vPortEnterCritical+0x58>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d10f      	bne.n	8006370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006350:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <vPortEnterCritical+0x5c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <vPortEnterCritical+0x4c>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	603b      	str	r3, [r7, #0]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <vPortEnterCritical+0x4a>
	}
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	24000010 	.word	0x24000010
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800638a:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <vPortExitCritical+0x50>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <vPortExitCritical+0x24>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	607b      	str	r3, [r7, #4]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <vPortExitCritical+0x50>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <vPortExitCritical+0x50>)
 80063b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063b2:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <vPortExitCritical+0x50>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d105      	bne.n	80063c6 <vPortExitCritical+0x42>
 80063ba:	2300      	movs	r3, #0
 80063bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	24000010 	.word	0x24000010
	...

080063e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063e0:	f3ef 8009 	mrs	r0, PSP
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	4b15      	ldr	r3, [pc, #84]	; (8006440 <pxCurrentTCBConst>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	f01e 0f10 	tst.w	lr, #16
 80063f0:	bf08      	it	eq
 80063f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fa:	6010      	str	r0, [r2, #0]
 80063fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006404:	f380 8811 	msr	BASEPRI, r0
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f001 f968 	bl	80076e4 <vTaskSwitchContext>
 8006414:	f04f 0000 	mov.w	r0, #0
 8006418:	f380 8811 	msr	BASEPRI, r0
 800641c:	bc09      	pop	{r0, r3}
 800641e:	6819      	ldr	r1, [r3, #0]
 8006420:	6808      	ldr	r0, [r1, #0]
 8006422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006426:	f01e 0f10 	tst.w	lr, #16
 800642a:	bf08      	it	eq
 800642c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006430:	f380 8809 	msr	PSP, r0
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst>:
 8006440:	240045ac 	.word	0x240045ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	607b      	str	r3, [r7, #4]
}
 8006460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006462:	f001 f885 	bl	8007570 <xTaskIncrementTick>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <xPortSysTickHandler+0x40>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f383 8811 	msr	BASEPRI, r3
}
 800647e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006490:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <vPortSetupTimerInterrupt+0x34>)
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <vPortSetupTimerInterrupt+0x38>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <vPortSetupTimerInterrupt+0x3c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0a      	ldr	r2, [pc, #40]	; (80064cc <vPortSetupTimerInterrupt+0x40>)
 80064a2:	fba2 2303 	umull	r2, r3, r2, r3
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <vPortSetupTimerInterrupt+0x44>)
 80064aa:	3b01      	subs	r3, #1
 80064ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ae:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <vPortSetupTimerInterrupt+0x34>)
 80064b0:	2207      	movs	r2, #7
 80064b2:	601a      	str	r2, [r3, #0]
}
 80064b4:	bf00      	nop
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	e000e010 	.word	0xe000e010
 80064c4:	e000e018 	.word	0xe000e018
 80064c8:	24000000 	.word	0x24000000
 80064cc:	10624dd3 	.word	0x10624dd3
 80064d0:	e000e014 	.word	0xe000e014

080064d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064e4 <vPortEnableVFP+0x10>
 80064d8:	6801      	ldr	r1, [r0, #0]
 80064da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064de:	6001      	str	r1, [r0, #0]
 80064e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064e2:	bf00      	nop
 80064e4:	e000ed88 	.word	0xe000ed88

080064e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064ee:	f3ef 8305 	mrs	r3, IPSR
 80064f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	d914      	bls.n	8006524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064fa:	4a17      	ldr	r2, [pc, #92]	; (8006558 <vPortValidateInterruptPriority+0x70>)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006504:	4b15      	ldr	r3, [pc, #84]	; (800655c <vPortValidateInterruptPriority+0x74>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	7afa      	ldrb	r2, [r7, #11]
 800650a:	429a      	cmp	r2, r3
 800650c:	d20a      	bcs.n	8006524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006524:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <vPortValidateInterruptPriority+0x78>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800652c:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <vPortValidateInterruptPriority+0x7c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d90a      	bls.n	800654a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	603b      	str	r3, [r7, #0]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <vPortValidateInterruptPriority+0x60>
	}
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	e000e3f0 	.word	0xe000e3f0
 800655c:	24004564 	.word	0x24004564
 8006560:	e000ed0c 	.word	0xe000ed0c
 8006564:	24004568 	.word	0x24004568

08006568 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <xQueueGenericReset+0x2a>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	60bb      	str	r3, [r7, #8]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006592:	f7ff fec7 	bl	8006324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	68f9      	ldr	r1, [r7, #12]
 80065a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	441a      	add	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c2:	3b01      	subs	r3, #1
 80065c4:	68f9      	ldr	r1, [r7, #12]
 80065c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065c8:	fb01 f303 	mul.w	r3, r1, r3
 80065cc:	441a      	add	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	22ff      	movs	r2, #255	; 0xff
 80065de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d114      	bne.n	8006612 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01a      	beq.n	8006626 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3310      	adds	r3, #16
 80065f4:	4618      	mov	r0, r3
 80065f6:	f001 f929 	bl	800784c <xTaskRemoveFromEventList>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d012      	beq.n	8006626 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006600:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <xQueueGenericReset+0xcc>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	e009      	b.n	8006626 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3310      	adds	r3, #16
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff fca0 	bl	8005f5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3324      	adds	r3, #36	; 0x24
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff fc9b 	bl	8005f5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006626:	f7ff fead 	bl	8006384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800662a:	2301      	movs	r3, #1
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	e000ed04 	.word	0xe000ed04

08006638 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08e      	sub	sp, #56	; 0x38
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
}
 800667a:	bf00      	nop
 800667c:	e7fe      	b.n	800667c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <xQueueGenericCreateStatic+0x52>
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <xQueueGenericCreateStatic+0x56>
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <xQueueGenericCreateStatic+0x58>
 800668e:	2300      	movs	r3, #0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	623b      	str	r3, [r7, #32]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <xQueueGenericCreateStatic+0x7e>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <xQueueGenericCreateStatic+0x82>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <xQueueGenericCreateStatic+0x84>
 80066ba:	2300      	movs	r3, #0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	61fb      	str	r3, [r7, #28]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066d6:	2350      	movs	r3, #80	; 0x50
 80066d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b50      	cmp	r3, #80	; 0x50
 80066de:	d00a      	beq.n	80066f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	61bb      	str	r3, [r7, #24]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800670a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	4613      	mov	r3, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f805 	bl	8006728 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006720:	4618      	mov	r0, r3
 8006722:	3730      	adds	r7, #48	; 0x30
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	e002      	b.n	800674a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006756:	2101      	movs	r1, #1
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f7ff ff05 	bl	8006568 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08e      	sub	sp, #56	; 0x38
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800677e:	2300      	movs	r3, #0
 8006780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <xQueueGenericSend+0x32>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800679e:	bf00      	nop
 80067a0:	e7fe      	b.n	80067a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <xQueueGenericSend+0x40>
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <xQueueGenericSend+0x44>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <xQueueGenericSend+0x46>
 80067b4:	2300      	movs	r3, #0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10a      	bne.n	80067d0 <xQueueGenericSend+0x60>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d103      	bne.n	80067de <xQueueGenericSend+0x6e>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <xQueueGenericSend+0x72>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <xQueueGenericSend+0x74>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <xQueueGenericSend+0x8e>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	623b      	str	r3, [r7, #32]
}
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067fe:	f001 f9e7 	bl	8007bd0 <xTaskGetSchedulerState>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <xQueueGenericSend+0x9e>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <xQueueGenericSend+0xa2>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <xQueueGenericSend+0xa4>
 8006812:	2300      	movs	r3, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xQueueGenericSend+0xbe>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	61fb      	str	r3, [r7, #28]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800682e:	f7ff fd79 	bl	8006324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	429a      	cmp	r2, r3
 800683c:	d302      	bcc.n	8006844 <xQueueGenericSend+0xd4>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d129      	bne.n	8006898 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800684a:	f000 fa0b 	bl	8006c64 <prvCopyDataToQueue>
 800684e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d010      	beq.n	800687a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	3324      	adds	r3, #36	; 0x24
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fff5 	bl	800784c <xTaskRemoveFromEventList>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d013      	beq.n	8006890 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006868:	4b3f      	ldr	r3, [pc, #252]	; (8006968 <xQueueGenericSend+0x1f8>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	e00a      	b.n	8006890 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006880:	4b39      	ldr	r3, [pc, #228]	; (8006968 <xQueueGenericSend+0x1f8>)
 8006882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006890:	f7ff fd78 	bl	8006384 <vPortExitCritical>
				return pdPASS;
 8006894:	2301      	movs	r3, #1
 8006896:	e063      	b.n	8006960 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800689e:	f7ff fd71 	bl	8006384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e05c      	b.n	8006960 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d106      	bne.n	80068ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068ac:	f107 0314 	add.w	r3, r7, #20
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 f82f 	bl	8007914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068ba:	f7ff fd63 	bl	8006384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068be:	f000 fd9b 	bl	80073f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068c2:	f7ff fd2f 	bl	8006324 <vPortEnterCritical>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d103      	bne.n	80068dc <xQueueGenericSend+0x16c>
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d103      	bne.n	80068f2 <xQueueGenericSend+0x182>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f2:	f7ff fd47 	bl	8006384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068f6:	1d3a      	adds	r2, r7, #4
 80068f8:	f107 0314 	add.w	r3, r7, #20
 80068fc:	4611      	mov	r1, r2
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 f81e 	bl	8007940 <xTaskCheckForTimeOut>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d124      	bne.n	8006954 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800690a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800690c:	f000 faa2 	bl	8006e54 <prvIsQueueFull>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	3310      	adds	r3, #16
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	4611      	mov	r1, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f000 ff44 	bl	80077ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006926:	f000 fa2d 	bl	8006d84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800692a:	f000 fd73 	bl	8007414 <xTaskResumeAll>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	f47f af7c 	bne.w	800682e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <xQueueGenericSend+0x1f8>)
 8006938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	e772      	b.n	800682e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800694a:	f000 fa1b 	bl	8006d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800694e:	f000 fd61 	bl	8007414 <xTaskResumeAll>
 8006952:	e76c      	b.n	800682e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006956:	f000 fa15 	bl	8006d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800695a:	f000 fd5b 	bl	8007414 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800695e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006960:	4618      	mov	r0, r3
 8006962:	3738      	adds	r7, #56	; 0x38
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b090      	sub	sp, #64	; 0x40
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d103      	bne.n	80069a8 <xQueueGenericSendFromISR+0x3c>
 80069a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <xQueueGenericSendFromISR+0x40>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <xQueueGenericSendFromISR+0x42>
 80069ac:	2300      	movs	r3, #0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10a      	bne.n	80069c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d103      	bne.n	80069d6 <xQueueGenericSendFromISR+0x6a>
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <xQueueGenericSendFromISR+0x6e>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <xQueueGenericSendFromISR+0x70>
 80069da:	2300      	movs	r3, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	623b      	str	r3, [r7, #32]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069f6:	f7ff fd77 	bl	80064e8 <vPortValidateInterruptPriority>
	__asm volatile
 80069fa:	f3ef 8211 	mrs	r2, BASEPRI
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	61fa      	str	r2, [r7, #28]
 8006a10:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006a12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d302      	bcc.n	8006a28 <xQueueGenericSendFromISR+0xbc>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d12f      	bne.n	8006a88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a3e:	f000 f911 	bl	8006c64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d112      	bne.n	8006a72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d016      	beq.n	8006a82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	3324      	adds	r3, #36	; 0x24
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fef7 	bl	800784c <xTaskRemoveFromEventList>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00e      	beq.n	8006a82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	e007      	b.n	8006a82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a76:	3301      	adds	r3, #1
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	b25a      	sxtb	r2, r3
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a82:	2301      	movs	r3, #1
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a86:	e001      	b.n	8006a8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f383 8811 	msr	BASEPRI, r3
}
 8006a96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3740      	adds	r7, #64	; 0x40
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	; 0x30
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <xQueueReceive+0x30>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	623b      	str	r3, [r7, #32]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <xQueueReceive+0x3e>
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <xQueueReceive+0x42>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <xQueueReceive+0x44>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <xQueueReceive+0x5e>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	61fb      	str	r3, [r7, #28]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b02:	f001 f865 	bl	8007bd0 <xTaskGetSchedulerState>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <xQueueReceive+0x6e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <xQueueReceive+0x72>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <xQueueReceive+0x74>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <xQueueReceive+0x8e>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	61bb      	str	r3, [r7, #24]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b32:	f7ff fbf7 	bl	8006324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01f      	beq.n	8006b82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b46:	f000 f8f7 	bl	8006d38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	1e5a      	subs	r2, r3, #1
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00f      	beq.n	8006b7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	3310      	adds	r3, #16
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fe74 	bl	800784c <xTaskRemoveFromEventList>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b6a:	4b3d      	ldr	r3, [pc, #244]	; (8006c60 <xQueueReceive+0x1bc>)
 8006b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b7a:	f7ff fc03 	bl	8006384 <vPortExitCritical>
				return pdPASS;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e069      	b.n	8006c56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d103      	bne.n	8006b90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b88:	f7ff fbfc 	bl	8006384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e062      	b.n	8006c56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b96:	f107 0310 	add.w	r3, r7, #16
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 feba 	bl	8007914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ba4:	f7ff fbee 	bl	8006384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ba8:	f000 fc26 	bl	80073f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bac:	f7ff fbba 	bl	8006324 <vPortEnterCritical>
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bb6:	b25b      	sxtb	r3, r3
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d103      	bne.n	8006bc6 <xQueueReceive+0x122>
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	d103      	bne.n	8006bdc <xQueueReceive+0x138>
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bdc:	f7ff fbd2 	bl	8006384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be0:	1d3a      	adds	r2, r7, #4
 8006be2:	f107 0310 	add.w	r3, r7, #16
 8006be6:	4611      	mov	r1, r2
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fea9 	bl	8007940 <xTaskCheckForTimeOut>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d123      	bne.n	8006c3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf6:	f000 f917 	bl	8006e28 <prvIsQueueEmpty>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d017      	beq.n	8006c30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	3324      	adds	r3, #36	; 0x24
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fdcf 	bl	80077ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c10:	f000 f8b8 	bl	8006d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c14:	f000 fbfe 	bl	8007414 <xTaskResumeAll>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d189      	bne.n	8006b32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c1e:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <xQueueReceive+0x1bc>)
 8006c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	e780      	b.n	8006b32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c32:	f000 f8a7 	bl	8006d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c36:	f000 fbed 	bl	8007414 <xTaskResumeAll>
 8006c3a:	e77a      	b.n	8006b32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c3e:	f000 f8a1 	bl	8006d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c42:	f000 fbe7 	bl	8007414 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c48:	f000 f8ee 	bl	8006e28 <prvIsQueueEmpty>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f43f af6f 	beq.w	8006b32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3730      	adds	r7, #48	; 0x30
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10d      	bne.n	8006c9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d14d      	bne.n	8006d26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 ffbc 	bl	8007c0c <xTaskPriorityDisinherit>
 8006c94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	e043      	b.n	8006d26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d119      	bne.n	8006cd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6858      	ldr	r0, [r3, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	461a      	mov	r2, r3
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	f001 fcdf 	bl	8008672 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	441a      	add	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d32b      	bcc.n	8006d26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	e026      	b.n	8006d26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68d8      	ldr	r0, [r3, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	f001 fcc5 	bl	8008672 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	425b      	negs	r3, r3
 8006cf2:	441a      	add	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d207      	bcs.n	8006d14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	425b      	negs	r3, r3
 8006d0e:	441a      	add	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d105      	bne.n	8006d26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d2e:	697b      	ldr	r3, [r7, #20]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d018      	beq.n	8006d7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	441a      	add	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d303      	bcc.n	8006d6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68d9      	ldr	r1, [r3, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	461a      	mov	r2, r3
 8006d76:	6838      	ldr	r0, [r7, #0]
 8006d78:	f001 fc7b 	bl	8008672 <memcpy>
	}
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d8c:	f7ff faca 	bl	8006324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d98:	e011      	b.n	8006dbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d012      	beq.n	8006dc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3324      	adds	r3, #36	; 0x24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fd50 	bl	800784c <xTaskRemoveFromEventList>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006db2:	f000 fe27 	bl	8007a04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dce9      	bgt.n	8006d9a <prvUnlockQueue+0x16>
 8006dc6:	e000      	b.n	8006dca <prvUnlockQueue+0x46>
					break;
 8006dc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	22ff      	movs	r2, #255	; 0xff
 8006dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006dd2:	f7ff fad7 	bl	8006384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dd6:	f7ff faa5 	bl	8006324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006de0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006de2:	e011      	b.n	8006e08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d012      	beq.n	8006e12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3310      	adds	r3, #16
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fd2b 	bl	800784c <xTaskRemoveFromEventList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dfc:	f000 fe02 	bl	8007a04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dce9      	bgt.n	8006de4 <prvUnlockQueue+0x60>
 8006e10:	e000      	b.n	8006e14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	22ff      	movs	r2, #255	; 0xff
 8006e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e1c:	f7ff fab2 	bl	8006384 <vPortExitCritical>
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e30:	f7ff fa78 	bl	8006324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	e001      	b.n	8006e46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e46:	f7ff fa9d 	bl	8006384 <vPortExitCritical>

	return xReturn;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e5c:	f7ff fa62 	bl	8006324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d102      	bne.n	8006e72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e001      	b.n	8006e76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e76:	f7ff fa85 	bl	8006384 <vPortExitCritical>

	return xReturn;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	e014      	b.n	8006ebe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e94:	4a0f      	ldr	r2, [pc, #60]	; (8006ed4 <vQueueAddToRegistry+0x50>)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ea0:	490c      	ldr	r1, [pc, #48]	; (8006ed4 <vQueueAddToRegistry+0x50>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <vQueueAddToRegistry+0x50>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006eb6:	e006      	b.n	8006ec6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b07      	cmp	r3, #7
 8006ec2:	d9e7      	bls.n	8006e94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	2400456c 	.word	0x2400456c

08006ed8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ee8:	f7ff fa1c 	bl	8006324 <vPortEnterCritical>
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ef2:	b25b      	sxtb	r3, r3
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef8:	d103      	bne.n	8006f02 <vQueueWaitForMessageRestricted+0x2a>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f08:	b25b      	sxtb	r3, r3
 8006f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0e:	d103      	bne.n	8006f18 <vQueueWaitForMessageRestricted+0x40>
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f18:	f7ff fa34 	bl	8006384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	3324      	adds	r3, #36	; 0x24
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fc61 	bl	80077f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f32:	6978      	ldr	r0, [r7, #20]
 8006f34:	f7ff ff26 	bl	8006d84 <prvUnlockQueue>
	}
 8006f38:	bf00      	nop
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	; 0x38
 8006f44:	af04      	add	r7, sp, #16
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	623b      	str	r3, [r7, #32]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	61fb      	str	r3, [r7, #28]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f86:	23bc      	movs	r3, #188	; 0xbc
 8006f88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2bbc      	cmp	r3, #188	; 0xbc
 8006f8e:	d00a      	beq.n	8006fa6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	61bb      	str	r3, [r7, #24]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01e      	beq.n	8006fec <xTaskCreateStatic+0xac>
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01b      	beq.n	8006fec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	9302      	str	r3, [sp, #8]
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f850 	bl	8007084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fe6:	f000 f8f3 	bl	80071d0 <prvAddNewTaskToReadyList>
 8006fea:	e001      	b.n	8006ff0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ff0:	697b      	ldr	r3, [r7, #20]
	}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3728      	adds	r7, #40	; 0x28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b08c      	sub	sp, #48	; 0x30
 8006ffe:	af04      	add	r7, sp, #16
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe fdba 	bl	8005b88 <pvPortMalloc>
 8007014:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800701c:	20bc      	movs	r0, #188	; 0xbc
 800701e:	f7fe fdb3 	bl	8005b88 <pvPortMalloc>
 8007022:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
 8007030:	e005      	b.n	800703e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007032:	6978      	ldr	r0, [r7, #20]
 8007034:	f7fe fe74 	bl	8005d20 <vPortFree>
 8007038:	e001      	b.n	800703e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d017      	beq.n	8007074 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	2300      	movs	r3, #0
 8007050:	9303      	str	r3, [sp, #12]
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	9302      	str	r3, [sp, #8]
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 f80e 	bl	8007084 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007068:	69f8      	ldr	r0, [r7, #28]
 800706a:	f000 f8b1 	bl	80071d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800706e:	2301      	movs	r3, #1
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	e002      	b.n	800707a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007074:	f04f 33ff 	mov.w	r3, #4294967295
 8007078:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800707a:	69bb      	ldr	r3, [r7, #24]
	}
 800707c:	4618      	mov	r0, r3
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	461a      	mov	r2, r3
 800709c:	21a5      	movs	r1, #165	; 0xa5
 800709e:	f001 faf6 	bl	800868e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80070ac:	440b      	add	r3, r1
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f023 0307 	bic.w	r3, r3, #7
 80070ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	617b      	str	r3, [r7, #20]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01f      	beq.n	8007122 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
 80070e6:	e012      	b.n	800710e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	7819      	ldrb	r1, [r3, #0]
 80070f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	4413      	add	r3, r2
 80070f6:	3334      	adds	r3, #52	; 0x34
 80070f8:	460a      	mov	r2, r1
 80070fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	3301      	adds	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	2b0f      	cmp	r3, #15
 8007112:	d9e9      	bls.n	80070e8 <prvInitialiseNewTask+0x64>
 8007114:	e000      	b.n	8007118 <prvInitialiseNewTask+0x94>
			{
				break;
 8007116:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007120:	e003      	b.n	800712a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	2b37      	cmp	r3, #55	; 0x37
 800712e:	d901      	bls.n	8007134 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007130:	2337      	movs	r3, #55	; 0x37
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007138:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800713e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	2200      	movs	r2, #0
 8007144:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	3304      	adds	r3, #4
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe ff26 	bl	8005f9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	3318      	adds	r3, #24
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe ff21 	bl	8005f9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	3354      	adds	r3, #84	; 0x54
 8007184:	2260      	movs	r2, #96	; 0x60
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fa80 	bl	800868e <memset>
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <prvInitialiseNewTask+0x140>)
 8007192:	659a      	str	r2, [r3, #88]	; 0x58
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	4a0c      	ldr	r2, [pc, #48]	; (80071c8 <prvInitialiseNewTask+0x144>)
 8007198:	65da      	str	r2, [r3, #92]	; 0x5c
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <prvInitialiseNewTask+0x148>)
 800719e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	68f9      	ldr	r1, [r7, #12]
 80071a4:	69b8      	ldr	r0, [r7, #24]
 80071a6:	f7fe ff8d 	bl	80060c4 <pxPortInitialiseStack>
 80071aa:	4602      	mov	r2, r0
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071bc:	bf00      	nop
 80071be:	3720      	adds	r7, #32
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	0800957c 	.word	0x0800957c
 80071c8:	0800959c 	.word	0x0800959c
 80071cc:	0800955c 	.word	0x0800955c

080071d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071d8:	f7ff f8a4 	bl	8006324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071dc:	4b2d      	ldr	r3, [pc, #180]	; (8007294 <prvAddNewTaskToReadyList+0xc4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	4a2c      	ldr	r2, [pc, #176]	; (8007294 <prvAddNewTaskToReadyList+0xc4>)
 80071e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071e6:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <prvAddNewTaskToReadyList+0xc8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ee:	4a2a      	ldr	r2, [pc, #168]	; (8007298 <prvAddNewTaskToReadyList+0xc8>)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <prvAddNewTaskToReadyList+0xc4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d110      	bne.n	800721e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071fc:	f000 fc26 	bl	8007a4c <prvInitialiseTaskLists>
 8007200:	e00d      	b.n	800721e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007202:	4b26      	ldr	r3, [pc, #152]	; (800729c <prvAddNewTaskToReadyList+0xcc>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800720a:	4b23      	ldr	r3, [pc, #140]	; (8007298 <prvAddNewTaskToReadyList+0xc8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	429a      	cmp	r2, r3
 8007216:	d802      	bhi.n	800721e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007218:	4a1f      	ldr	r2, [pc, #124]	; (8007298 <prvAddNewTaskToReadyList+0xc8>)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800721e:	4b20      	ldr	r3, [pc, #128]	; (80072a0 <prvAddNewTaskToReadyList+0xd0>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	4a1e      	ldr	r2, [pc, #120]	; (80072a0 <prvAddNewTaskToReadyList+0xd0>)
 8007226:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007228:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <prvAddNewTaskToReadyList+0xd0>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007234:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <prvAddNewTaskToReadyList+0xd4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	429a      	cmp	r2, r3
 800723a:	d903      	bls.n	8007244 <prvAddNewTaskToReadyList+0x74>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <prvAddNewTaskToReadyList+0xd4>)
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <prvAddNewTaskToReadyList+0xd8>)
 8007252:	441a      	add	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3304      	adds	r3, #4
 8007258:	4619      	mov	r1, r3
 800725a:	4610      	mov	r0, r2
 800725c:	f7fe feab 	bl	8005fb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007260:	f7ff f890 	bl	8006384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <prvAddNewTaskToReadyList+0xcc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800726c:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <prvAddNewTaskToReadyList+0xc8>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	429a      	cmp	r2, r3
 8007278:	d207      	bcs.n	800728a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800727a:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <prvAddNewTaskToReadyList+0xdc>)
 800727c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	24004a80 	.word	0x24004a80
 8007298:	240045ac 	.word	0x240045ac
 800729c:	24004a8c 	.word	0x24004a8c
 80072a0:	24004a9c 	.word	0x24004a9c
 80072a4:	24004a88 	.word	0x24004a88
 80072a8:	240045b0 	.word	0x240045b0
 80072ac:	e000ed04 	.word	0xe000ed04

080072b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d017      	beq.n	80072f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072c2:	4b13      	ldr	r3, [pc, #76]	; (8007310 <vTaskDelay+0x60>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <vTaskDelay+0x30>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	60bb      	str	r3, [r7, #8]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072e0:	f000 f88a 	bl	80073f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072e4:	2100      	movs	r1, #0
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fcfe 	bl	8007ce8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072ec:	f000 f892 	bl	8007414 <xTaskResumeAll>
 80072f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d107      	bne.n	8007308 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <vTaskDelay+0x64>)
 80072fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	24004aa8 	.word	0x24004aa8
 8007314:	e000ed04 	.word	0xe000ed04

08007318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007326:	463a      	mov	r2, r7
 8007328:	1d39      	adds	r1, r7, #4
 800732a:	f107 0308 	add.w	r3, r7, #8
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fbf6 	bl	8005b20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	2300      	movs	r3, #0
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	2300      	movs	r3, #0
 8007344:	460a      	mov	r2, r1
 8007346:	4924      	ldr	r1, [pc, #144]	; (80073d8 <vTaskStartScheduler+0xc0>)
 8007348:	4824      	ldr	r0, [pc, #144]	; (80073dc <vTaskStartScheduler+0xc4>)
 800734a:	f7ff fdf9 	bl	8006f40 <xTaskCreateStatic>
 800734e:	4603      	mov	r3, r0
 8007350:	4a23      	ldr	r2, [pc, #140]	; (80073e0 <vTaskStartScheduler+0xc8>)
 8007352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007354:	4b22      	ldr	r3, [pc, #136]	; (80073e0 <vTaskStartScheduler+0xc8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800735c:	2301      	movs	r3, #1
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	e001      	b.n	8007366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d102      	bne.n	8007372 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800736c:	f000 fd10 	bl	8007d90 <xTimerCreateTimerTask>
 8007370:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d11b      	bne.n	80073b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	613b      	str	r3, [r7, #16]
}
 800738a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800738c:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <vTaskStartScheduler+0xcc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3354      	adds	r3, #84	; 0x54
 8007392:	4a15      	ldr	r2, [pc, #84]	; (80073e8 <vTaskStartScheduler+0xd0>)
 8007394:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007396:	4b15      	ldr	r3, [pc, #84]	; (80073ec <vTaskStartScheduler+0xd4>)
 8007398:	f04f 32ff 	mov.w	r2, #4294967295
 800739c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800739e:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <vTaskStartScheduler+0xd8>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073a4:	4b13      	ldr	r3, [pc, #76]	; (80073f4 <vTaskStartScheduler+0xdc>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073aa:	f7fe ff19 	bl	80061e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073ae:	e00e      	b.n	80073ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d10a      	bne.n	80073ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	60fb      	str	r3, [r7, #12]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <vTaskStartScheduler+0xb4>
}
 80073ce:	bf00      	nop
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	080094e8 	.word	0x080094e8
 80073dc:	08007a1d 	.word	0x08007a1d
 80073e0:	24004aa4 	.word	0x24004aa4
 80073e4:	240045ac 	.word	0x240045ac
 80073e8:	24000014 	.word	0x24000014
 80073ec:	24004aa0 	.word	0x24004aa0
 80073f0:	24004a8c 	.word	0x24004a8c
 80073f4:	24004a84 	.word	0x24004a84

080073f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <vTaskSuspendAll+0x18>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	4a03      	ldr	r2, [pc, #12]	; (8007410 <vTaskSuspendAll+0x18>)
 8007404:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007406:	bf00      	nop
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	24004aa8 	.word	0x24004aa8

08007414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800741e:	2300      	movs	r3, #0
 8007420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007422:	4b42      	ldr	r3, [pc, #264]	; (800752c <xTaskResumeAll+0x118>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xTaskResumeAll+0x2c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	603b      	str	r3, [r7, #0]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007440:	f7fe ff70 	bl	8006324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007444:	4b39      	ldr	r3, [pc, #228]	; (800752c <xTaskResumeAll+0x118>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3b01      	subs	r3, #1
 800744a:	4a38      	ldr	r2, [pc, #224]	; (800752c <xTaskResumeAll+0x118>)
 800744c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800744e:	4b37      	ldr	r3, [pc, #220]	; (800752c <xTaskResumeAll+0x118>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d162      	bne.n	800751c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007456:	4b36      	ldr	r3, [pc, #216]	; (8007530 <xTaskResumeAll+0x11c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d05e      	beq.n	800751c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800745e:	e02f      	b.n	80074c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007460:	4b34      	ldr	r3, [pc, #208]	; (8007534 <xTaskResumeAll+0x120>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3318      	adds	r3, #24
 800746c:	4618      	mov	r0, r3
 800746e:	f7fe fdff 	bl	8006070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fdfa 	bl	8006070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	4b2d      	ldr	r3, [pc, #180]	; (8007538 <xTaskResumeAll+0x124>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d903      	bls.n	8007490 <xTaskResumeAll+0x7c>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <xTaskResumeAll+0x124>)
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4a27      	ldr	r2, [pc, #156]	; (800753c <xTaskResumeAll+0x128>)
 800749e:	441a      	add	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f7fe fd85 	bl	8005fb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	4b23      	ldr	r3, [pc, #140]	; (8007540 <xTaskResumeAll+0x12c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074ba:	4b22      	ldr	r3, [pc, #136]	; (8007544 <xTaskResumeAll+0x130>)
 80074bc:	2201      	movs	r2, #1
 80074be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074c0:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <xTaskResumeAll+0x120>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1cb      	bne.n	8007460 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074ce:	f000 fb5f 	bl	8007b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074d2:	4b1d      	ldr	r3, [pc, #116]	; (8007548 <xTaskResumeAll+0x134>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d010      	beq.n	8007500 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074de:	f000 f847 	bl	8007570 <xTaskIncrementTick>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80074e8:	4b16      	ldr	r3, [pc, #88]	; (8007544 <xTaskResumeAll+0x130>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f1      	bne.n	80074de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80074fa:	4b13      	ldr	r3, [pc, #76]	; (8007548 <xTaskResumeAll+0x134>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <xTaskResumeAll+0x130>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800750c:	4b0f      	ldr	r3, [pc, #60]	; (800754c <xTaskResumeAll+0x138>)
 800750e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800751c:	f7fe ff32 	bl	8006384 <vPortExitCritical>

	return xAlreadyYielded;
 8007520:	68bb      	ldr	r3, [r7, #8]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	24004aa8 	.word	0x24004aa8
 8007530:	24004a80 	.word	0x24004a80
 8007534:	24004a40 	.word	0x24004a40
 8007538:	24004a88 	.word	0x24004a88
 800753c:	240045b0 	.word	0x240045b0
 8007540:	240045ac 	.word	0x240045ac
 8007544:	24004a94 	.word	0x24004a94
 8007548:	24004a90 	.word	0x24004a90
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <xTaskGetTickCount+0x1c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800755c:	687b      	ldr	r3, [r7, #4]
}
 800755e:	4618      	mov	r0, r3
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	24004a84 	.word	0x24004a84

08007570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007576:	2300      	movs	r3, #0
 8007578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800757a:	4b4f      	ldr	r3, [pc, #316]	; (80076b8 <xTaskIncrementTick+0x148>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f040 808f 	bne.w	80076a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007584:	4b4d      	ldr	r3, [pc, #308]	; (80076bc <xTaskIncrementTick+0x14c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800758c:	4a4b      	ldr	r2, [pc, #300]	; (80076bc <xTaskIncrementTick+0x14c>)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d120      	bne.n	80075da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007598:	4b49      	ldr	r3, [pc, #292]	; (80076c0 <xTaskIncrementTick+0x150>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	603b      	str	r3, [r7, #0]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xTaskIncrementTick+0x46>
 80075b8:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <xTaskIncrementTick+0x150>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	4b41      	ldr	r3, [pc, #260]	; (80076c4 <xTaskIncrementTick+0x154>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a3f      	ldr	r2, [pc, #252]	; (80076c0 <xTaskIncrementTick+0x150>)
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	4a3f      	ldr	r2, [pc, #252]	; (80076c4 <xTaskIncrementTick+0x154>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	4b3e      	ldr	r3, [pc, #248]	; (80076c8 <xTaskIncrementTick+0x158>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3301      	adds	r3, #1
 80075d2:	4a3d      	ldr	r2, [pc, #244]	; (80076c8 <xTaskIncrementTick+0x158>)
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	f000 fadb 	bl	8007b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075da:	4b3c      	ldr	r3, [pc, #240]	; (80076cc <xTaskIncrementTick+0x15c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d349      	bcc.n	8007678 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075e4:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <xTaskIncrementTick+0x150>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d104      	bne.n	80075f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ee:	4b37      	ldr	r3, [pc, #220]	; (80076cc <xTaskIncrementTick+0x15c>)
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295
 80075f4:	601a      	str	r2, [r3, #0]
					break;
 80075f6:	e03f      	b.n	8007678 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f8:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <xTaskIncrementTick+0x150>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d203      	bcs.n	8007618 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007610:	4a2e      	ldr	r2, [pc, #184]	; (80076cc <xTaskIncrementTick+0x15c>)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007616:	e02f      	b.n	8007678 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3304      	adds	r3, #4
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe fd27 	bl	8006070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d004      	beq.n	8007634 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3318      	adds	r3, #24
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fd1e 	bl	8006070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <xTaskIncrementTick+0x160>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d903      	bls.n	8007648 <xTaskIncrementTick+0xd8>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	4a22      	ldr	r2, [pc, #136]	; (80076d0 <xTaskIncrementTick+0x160>)
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4a1f      	ldr	r2, [pc, #124]	; (80076d4 <xTaskIncrementTick+0x164>)
 8007656:	441a      	add	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3304      	adds	r3, #4
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f7fe fca9 	bl	8005fb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <xTaskIncrementTick+0x168>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766e:	429a      	cmp	r2, r3
 8007670:	d3b8      	bcc.n	80075e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007672:	2301      	movs	r3, #1
 8007674:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007676:	e7b5      	b.n	80075e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007678:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <xTaskIncrementTick+0x168>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767e:	4915      	ldr	r1, [pc, #84]	; (80076d4 <xTaskIncrementTick+0x164>)
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d901      	bls.n	8007694 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007694:	4b11      	ldr	r3, [pc, #68]	; (80076dc <xTaskIncrementTick+0x16c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800769c:	2301      	movs	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e004      	b.n	80076ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <xTaskIncrementTick+0x170>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <xTaskIncrementTick+0x170>)
 80076aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076ac:	697b      	ldr	r3, [r7, #20]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	24004aa8 	.word	0x24004aa8
 80076bc:	24004a84 	.word	0x24004a84
 80076c0:	24004a38 	.word	0x24004a38
 80076c4:	24004a3c 	.word	0x24004a3c
 80076c8:	24004a98 	.word	0x24004a98
 80076cc:	24004aa0 	.word	0x24004aa0
 80076d0:	24004a88 	.word	0x24004a88
 80076d4:	240045b0 	.word	0x240045b0
 80076d8:	240045ac 	.word	0x240045ac
 80076dc:	24004a94 	.word	0x24004a94
 80076e0:	24004a90 	.word	0x24004a90

080076e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076ea:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <vTaskSwitchContext+0xb0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076f2:	4b29      	ldr	r3, [pc, #164]	; (8007798 <vTaskSwitchContext+0xb4>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076f8:	e046      	b.n	8007788 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80076fa:	4b27      	ldr	r3, [pc, #156]	; (8007798 <vTaskSwitchContext+0xb4>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007700:	4b26      	ldr	r3, [pc, #152]	; (800779c <vTaskSwitchContext+0xb8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	e010      	b.n	800772a <vTaskSwitchContext+0x46>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <vTaskSwitchContext+0x40>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	607b      	str	r3, [r7, #4]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <vTaskSwitchContext+0x3e>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3b01      	subs	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	491d      	ldr	r1, [pc, #116]	; (80077a0 <vTaskSwitchContext+0xbc>)
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0e4      	beq.n	8007708 <vTaskSwitchContext+0x24>
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <vTaskSwitchContext+0xbc>)
 800774a:	4413      	add	r3, r2
 800774c:	60bb      	str	r3, [r7, #8]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	605a      	str	r2, [r3, #4]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	3308      	adds	r3, #8
 8007760:	429a      	cmp	r2, r3
 8007762:	d104      	bne.n	800776e <vTaskSwitchContext+0x8a>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	605a      	str	r2, [r3, #4]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	4a0b      	ldr	r2, [pc, #44]	; (80077a4 <vTaskSwitchContext+0xc0>)
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	4a08      	ldr	r2, [pc, #32]	; (800779c <vTaskSwitchContext+0xb8>)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800777e:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <vTaskSwitchContext+0xc0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3354      	adds	r3, #84	; 0x54
 8007784:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <vTaskSwitchContext+0xc4>)
 8007786:	6013      	str	r3, [r2, #0]
}
 8007788:	bf00      	nop
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	24004aa8 	.word	0x24004aa8
 8007798:	24004a94 	.word	0x24004a94
 800779c:	24004a88 	.word	0x24004a88
 80077a0:	240045b0 	.word	0x240045b0
 80077a4:	240045ac 	.word	0x240045ac
 80077a8:	24000014 	.word	0x24000014

080077ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <vTaskPlaceOnEventList+0x44>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3318      	adds	r3, #24
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fe fc0f 	bl	8005ffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077e0:	2101      	movs	r1, #1
 80077e2:	6838      	ldr	r0, [r7, #0]
 80077e4:	f000 fa80 	bl	8007ce8 <prvAddCurrentTaskToDelayedList>
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	240045ac 	.word	0x240045ac

080077f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	617b      	str	r3, [r7, #20]
}
 8007818:	bf00      	nop
 800781a:	e7fe      	b.n	800781a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <vTaskPlaceOnEventListRestricted+0x54>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3318      	adds	r3, #24
 8007822:	4619      	mov	r1, r3
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7fe fbc6 	bl	8005fb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007830:	f04f 33ff 	mov.w	r3, #4294967295
 8007834:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	68b8      	ldr	r0, [r7, #8]
 800783a:	f000 fa55 	bl	8007ce8 <prvAddCurrentTaskToDelayedList>
	}
 800783e:	bf00      	nop
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	240045ac 	.word	0x240045ac

0800784c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	60fb      	str	r3, [r7, #12]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	3318      	adds	r3, #24
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fbf7 	bl	8006070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007882:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <xTaskRemoveFromEventList+0xb0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d11d      	bne.n	80078c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	3304      	adds	r3, #4
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fbee 	bl	8006070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007898:	4b19      	ldr	r3, [pc, #100]	; (8007900 <xTaskRemoveFromEventList+0xb4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d903      	bls.n	80078a8 <xTaskRemoveFromEventList+0x5c>
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	4a16      	ldr	r2, [pc, #88]	; (8007900 <xTaskRemoveFromEventList+0xb4>)
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4a13      	ldr	r2, [pc, #76]	; (8007904 <xTaskRemoveFromEventList+0xb8>)
 80078b6:	441a      	add	r2, r3
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7fe fb79 	bl	8005fb6 <vListInsertEnd>
 80078c4:	e005      	b.n	80078d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	3318      	adds	r3, #24
 80078ca:	4619      	mov	r1, r3
 80078cc:	480e      	ldr	r0, [pc, #56]	; (8007908 <xTaskRemoveFromEventList+0xbc>)
 80078ce:	f7fe fb72 	bl	8005fb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <xTaskRemoveFromEventList+0xc0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	429a      	cmp	r2, r3
 80078de:	d905      	bls.n	80078ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078e0:	2301      	movs	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078e4:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <xTaskRemoveFromEventList+0xc4>)
 80078e6:	2201      	movs	r2, #1
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e001      	b.n	80078f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078f0:	697b      	ldr	r3, [r7, #20]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	24004aa8 	.word	0x24004aa8
 8007900:	24004a88 	.word	0x24004a88
 8007904:	240045b0 	.word	0x240045b0
 8007908:	24004a40 	.word	0x24004a40
 800790c:	240045ac 	.word	0x240045ac
 8007910:	24004a94 	.word	0x24004a94

08007914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <vTaskInternalSetTimeOutState+0x24>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <vTaskInternalSetTimeOutState+0x28>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	605a      	str	r2, [r3, #4]
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	24004a98 	.word	0x24004a98
 800793c:	24004a84 	.word	0x24004a84

08007940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10a      	bne.n	8007966 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	60fb      	str	r3, [r7, #12]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007982:	f7fe fccf 	bl	8006324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007986:	4b1d      	ldr	r3, [pc, #116]	; (80079fc <xTaskCheckForTimeOut+0xbc>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	d102      	bne.n	80079a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61fb      	str	r3, [r7, #28]
 80079a4:	e023      	b.n	80079ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <xTaskCheckForTimeOut+0xc0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d007      	beq.n	80079c2 <xTaskCheckForTimeOut+0x82>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d302      	bcc.n	80079c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	e015      	b.n	80079ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d20b      	bcs.n	80079e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	1ad2      	subs	r2, r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff ff9b 	bl	8007914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
 80079e2:	e004      	b.n	80079ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079ea:	2301      	movs	r3, #1
 80079ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079ee:	f7fe fcc9 	bl	8006384 <vPortExitCritical>

	return xReturn;
 80079f2:	69fb      	ldr	r3, [r7, #28]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	24004a84 	.word	0x24004a84
 8007a00:	24004a98 	.word	0x24004a98

08007a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a08:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <vTaskMissedYield+0x14>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]
}
 8007a0e:	bf00      	nop
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	24004a94 	.word	0x24004a94

08007a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a24:	f000 f852 	bl	8007acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <prvIdleTask+0x28>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d9f9      	bls.n	8007a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <prvIdleTask+0x2c>)
 8007a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a40:	e7f0      	b.n	8007a24 <prvIdleTask+0x8>
 8007a42:	bf00      	nop
 8007a44:	240045b0 	.word	0x240045b0
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a52:	2300      	movs	r3, #0
 8007a54:	607b      	str	r3, [r7, #4]
 8007a56:	e00c      	b.n	8007a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4a12      	ldr	r2, [pc, #72]	; (8007aac <prvInitialiseTaskLists+0x60>)
 8007a64:	4413      	add	r3, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fa78 	bl	8005f5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	607b      	str	r3, [r7, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b37      	cmp	r3, #55	; 0x37
 8007a76:	d9ef      	bls.n	8007a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a78:	480d      	ldr	r0, [pc, #52]	; (8007ab0 <prvInitialiseTaskLists+0x64>)
 8007a7a:	f7fe fa6f 	bl	8005f5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a7e:	480d      	ldr	r0, [pc, #52]	; (8007ab4 <prvInitialiseTaskLists+0x68>)
 8007a80:	f7fe fa6c 	bl	8005f5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a84:	480c      	ldr	r0, [pc, #48]	; (8007ab8 <prvInitialiseTaskLists+0x6c>)
 8007a86:	f7fe fa69 	bl	8005f5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a8a:	480c      	ldr	r0, [pc, #48]	; (8007abc <prvInitialiseTaskLists+0x70>)
 8007a8c:	f7fe fa66 	bl	8005f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a90:	480b      	ldr	r0, [pc, #44]	; (8007ac0 <prvInitialiseTaskLists+0x74>)
 8007a92:	f7fe fa63 	bl	8005f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a96:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <prvInitialiseTaskLists+0x78>)
 8007a98:	4a05      	ldr	r2, [pc, #20]	; (8007ab0 <prvInitialiseTaskLists+0x64>)
 8007a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <prvInitialiseTaskLists+0x7c>)
 8007a9e:	4a05      	ldr	r2, [pc, #20]	; (8007ab4 <prvInitialiseTaskLists+0x68>)
 8007aa0:	601a      	str	r2, [r3, #0]
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	240045b0 	.word	0x240045b0
 8007ab0:	24004a10 	.word	0x24004a10
 8007ab4:	24004a24 	.word	0x24004a24
 8007ab8:	24004a40 	.word	0x24004a40
 8007abc:	24004a54 	.word	0x24004a54
 8007ac0:	24004a6c 	.word	0x24004a6c
 8007ac4:	24004a38 	.word	0x24004a38
 8007ac8:	24004a3c 	.word	0x24004a3c

08007acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ad2:	e019      	b.n	8007b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ad4:	f7fe fc26 	bl	8006324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad8:	4b10      	ldr	r3, [pc, #64]	; (8007b1c <prvCheckTasksWaitingTermination+0x50>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fac3 	bl	8006070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007aea:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <prvCheckTasksWaitingTermination+0x54>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	4a0b      	ldr	r2, [pc, #44]	; (8007b20 <prvCheckTasksWaitingTermination+0x54>)
 8007af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007af4:	4b0b      	ldr	r3, [pc, #44]	; (8007b24 <prvCheckTasksWaitingTermination+0x58>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	4a0a      	ldr	r2, [pc, #40]	; (8007b24 <prvCheckTasksWaitingTermination+0x58>)
 8007afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007afe:	f7fe fc41 	bl	8006384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f810 	bl	8007b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b08:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <prvCheckTasksWaitingTermination+0x58>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e1      	bne.n	8007ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	24004a54 	.word	0x24004a54
 8007b20:	24004a80 	.word	0x24004a80
 8007b24:	24004a68 	.word	0x24004a68

08007b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3354      	adds	r3, #84	; 0x54
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fe6d 	bl	8008814 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d108      	bne.n	8007b56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe f8e9 	bl	8005d20 <vPortFree>
				vPortFree( pxTCB );
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fe f8e6 	bl	8005d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b54:	e018      	b.n	8007b88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d103      	bne.n	8007b68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fe f8dd 	bl	8005d20 <vPortFree>
	}
 8007b66:	e00f      	b.n	8007b88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d00a      	beq.n	8007b88 <prvDeleteTCB+0x60>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	60fb      	str	r3, [r7, #12]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <prvDeleteTCB+0x5e>
	}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <prvResetNextTaskUnblockTime+0x38>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <prvResetNextTaskUnblockTime+0x3c>)
 8007ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ba8:	e008      	b.n	8007bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <prvResetNextTaskUnblockTime+0x38>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4a04      	ldr	r2, [pc, #16]	; (8007bcc <prvResetNextTaskUnblockTime+0x3c>)
 8007bba:	6013      	str	r3, [r2, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	24004a38 	.word	0x24004a38
 8007bcc:	24004aa0 	.word	0x24004aa0

08007bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <xTaskGetSchedulerState+0x34>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bde:	2301      	movs	r3, #1
 8007be0:	607b      	str	r3, [r7, #4]
 8007be2:	e008      	b.n	8007bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be4:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <xTaskGetSchedulerState+0x38>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bec:	2302      	movs	r3, #2
 8007bee:	607b      	str	r3, [r7, #4]
 8007bf0:	e001      	b.n	8007bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bf6:	687b      	ldr	r3, [r7, #4]
	}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	24004a8c 	.word	0x24004a8c
 8007c08:	24004aa8 	.word	0x24004aa8

08007c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d056      	beq.n	8007cd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c22:	4b2e      	ldr	r3, [pc, #184]	; (8007cdc <xTaskPriorityDisinherit+0xd0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d00a      	beq.n	8007c42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	60fb      	str	r3, [r7, #12]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	60bb      	str	r3, [r7, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c64:	1e5a      	subs	r2, r3, #1
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d02c      	beq.n	8007cd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d128      	bne.n	8007cd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe f9f4 	bl	8006070 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca0:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <xTaskPriorityDisinherit+0xd4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d903      	bls.n	8007cb0 <xTaskPriorityDisinherit+0xa4>
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	4a0c      	ldr	r2, [pc, #48]	; (8007ce0 <xTaskPriorityDisinherit+0xd4>)
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <xTaskPriorityDisinherit+0xd8>)
 8007cbe:	441a      	add	r2, r3
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7fe f975 	bl	8005fb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cd0:	697b      	ldr	r3, [r7, #20]
	}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	240045ac 	.word	0x240045ac
 8007ce0:	24004a88 	.word	0x24004a88
 8007ce4:	240045b0 	.word	0x240045b0

08007ce8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cf2:	4b21      	ldr	r3, [pc, #132]	; (8007d78 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cf8:	4b20      	ldr	r3, [pc, #128]	; (8007d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe f9b6 	bl	8006070 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d10a      	bne.n	8007d22 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d12:	4b1a      	ldr	r3, [pc, #104]	; (8007d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3304      	adds	r3, #4
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4819      	ldr	r0, [pc, #100]	; (8007d80 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d1c:	f7fe f94b 	bl	8005fb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d20:	e026      	b.n	8007d70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4413      	add	r3, r2
 8007d28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d2a:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d209      	bcs.n	8007d4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d3a:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f7fe f959 	bl	8005ffe <vListInsert>
}
 8007d4c:	e010      	b.n	8007d70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d4e:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f7fe f94f 	bl	8005ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d202      	bcs.n	8007d70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d6a:	4a08      	ldr	r2, [pc, #32]	; (8007d8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	6013      	str	r3, [r2, #0]
}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	24004a84 	.word	0x24004a84
 8007d7c:	240045ac 	.word	0x240045ac
 8007d80:	24004a6c 	.word	0x24004a6c
 8007d84:	24004a3c 	.word	0x24004a3c
 8007d88:	24004a38 	.word	0x24004a38
 8007d8c:	24004aa0 	.word	0x24004aa0

08007d90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	; 0x28
 8007d94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d9a:	f000 fb07 	bl	80083ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d9e:	4b1c      	ldr	r3, [pc, #112]	; (8007e10 <xTimerCreateTimerTask+0x80>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d021      	beq.n	8007dea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dae:	1d3a      	adds	r2, r7, #4
 8007db0:	f107 0108 	add.w	r1, r7, #8
 8007db4:	f107 030c 	add.w	r3, r7, #12
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fd fecb 	bl	8005b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	9202      	str	r2, [sp, #8]
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	2302      	movs	r3, #2
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	460a      	mov	r2, r1
 8007dd0:	4910      	ldr	r1, [pc, #64]	; (8007e14 <xTimerCreateTimerTask+0x84>)
 8007dd2:	4811      	ldr	r0, [pc, #68]	; (8007e18 <xTimerCreateTimerTask+0x88>)
 8007dd4:	f7ff f8b4 	bl	8006f40 <xTaskCreateStatic>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	4a10      	ldr	r2, [pc, #64]	; (8007e1c <xTimerCreateTimerTask+0x8c>)
 8007ddc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <xTimerCreateTimerTask+0x8c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007de6:	2301      	movs	r3, #1
 8007de8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e06:	697b      	ldr	r3, [r7, #20]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	24004adc 	.word	0x24004adc
 8007e14:	080094f0 	.word	0x080094f0
 8007e18:	08007f55 	.word	0x08007f55
 8007e1c:	24004ae0 	.word	0x24004ae0

08007e20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	; 0x28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10a      	bne.n	8007e4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	623b      	str	r3, [r7, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e4e:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <xTimerGenericCommand+0x98>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d02a      	beq.n	8007eac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b05      	cmp	r3, #5
 8007e66:	dc18      	bgt.n	8007e9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e68:	f7ff feb2 	bl	8007bd0 <xTaskGetSchedulerState>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d109      	bne.n	8007e86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e72:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <xTimerGenericCommand+0x98>)
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	f107 0110 	add.w	r1, r7, #16
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7e:	f7fe fc77 	bl	8006770 <xQueueGenericSend>
 8007e82:	6278      	str	r0, [r7, #36]	; 0x24
 8007e84:	e012      	b.n	8007eac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e86:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <xTimerGenericCommand+0x98>)
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	f107 0110 	add.w	r1, r7, #16
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2200      	movs	r2, #0
 8007e92:	f7fe fc6d 	bl	8006770 <xQueueGenericSend>
 8007e96:	6278      	str	r0, [r7, #36]	; 0x24
 8007e98:	e008      	b.n	8007eac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <xTimerGenericCommand+0x98>)
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	f107 0110 	add.w	r1, r7, #16
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	f7fe fd61 	bl	800696c <xQueueGenericSendFromISR>
 8007eaa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3728      	adds	r7, #40	; 0x28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	24004adc 	.word	0x24004adc

08007ebc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec6:	4b22      	ldr	r3, [pc, #136]	; (8007f50 <prvProcessExpiredTimer+0x94>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe f8cb 	bl	8006070 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d022      	beq.n	8007f2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	18d1      	adds	r1, r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	6978      	ldr	r0, [r7, #20]
 8007ef6:	f000 f8d1 	bl	800809c <prvInsertTimerInActiveList>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01f      	beq.n	8007f40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f00:	2300      	movs	r3, #0
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	6978      	ldr	r0, [r7, #20]
 8007f0c:	f7ff ff88 	bl	8007e20 <xTimerGenericCommand>
 8007f10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d113      	bne.n	8007f40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	60fb      	str	r3, [r7, #12]
}
 8007f2a:	bf00      	nop
 8007f2c:	e7fe      	b.n	8007f2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f34:	f023 0301 	bic.w	r3, r3, #1
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	6978      	ldr	r0, [r7, #20]
 8007f46:	4798      	blx	r3
}
 8007f48:	bf00      	nop
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	24004ad4 	.word	0x24004ad4

08007f54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f5c:	f107 0308 	add.w	r3, r7, #8
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f857 	bl	8008014 <prvGetNextExpireTime>
 8007f66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f803 	bl	8007f78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f72:	f000 f8d5 	bl	8008120 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f76:	e7f1      	b.n	8007f5c <prvTimerTask+0x8>

08007f78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f82:	f7ff fa39 	bl	80073f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f866 	bl	800805c <prvSampleTimeNow>
 8007f90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d130      	bne.n	8007ffa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <prvProcessTimerOrBlockTask+0x3c>
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d806      	bhi.n	8007fb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fa6:	f7ff fa35 	bl	8007414 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff ff85 	bl	8007ebc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fb2:	e024      	b.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d008      	beq.n	8007fcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fba:	4b13      	ldr	r3, [pc, #76]	; (8008008 <prvProcessTimerOrBlockTask+0x90>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <prvProcessTimerOrBlockTask+0x50>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <prvProcessTimerOrBlockTask+0x52>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fcc:	4b0f      	ldr	r3, [pc, #60]	; (800800c <prvProcessTimerOrBlockTask+0x94>)
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	f7fe ff7d 	bl	8006ed8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fde:	f7ff fa19 	bl	8007414 <xTaskResumeAll>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fe8:	4b09      	ldr	r3, [pc, #36]	; (8008010 <prvProcessTimerOrBlockTask+0x98>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
}
 8007ff8:	e001      	b.n	8007ffe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ffa:	f7ff fa0b 	bl	8007414 <xTaskResumeAll>
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	24004ad8 	.word	0x24004ad8
 800800c:	24004adc 	.word	0x24004adc
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800801c:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <prvGetNextExpireTime+0x44>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <prvGetNextExpireTime+0x16>
 8008026:	2201      	movs	r2, #1
 8008028:	e000      	b.n	800802c <prvGetNextExpireTime+0x18>
 800802a:	2200      	movs	r2, #0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d105      	bne.n	8008044 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008038:	4b07      	ldr	r3, [pc, #28]	; (8008058 <prvGetNextExpireTime+0x44>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e001      	b.n	8008048 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008048:	68fb      	ldr	r3, [r7, #12]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	24004ad4 	.word	0x24004ad4

0800805c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008064:	f7ff fa74 	bl	8007550 <xTaskGetTickCount>
 8008068:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800806a:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <prvSampleTimeNow+0x3c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	429a      	cmp	r2, r3
 8008072:	d205      	bcs.n	8008080 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008074:	f000 f936 	bl	80082e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e002      	b.n	8008086 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008086:	4a04      	ldr	r2, [pc, #16]	; (8008098 <prvSampleTimeNow+0x3c>)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800808c:	68fb      	ldr	r3, [r7, #12]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	24004ae4 	.word	0x24004ae4

0800809c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d812      	bhi.n	80080e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	1ad2      	subs	r2, r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e01b      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080d6:	4b10      	ldr	r3, [pc, #64]	; (8008118 <prvInsertTimerInActiveList+0x7c>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fd ff8c 	bl	8005ffe <vListInsert>
 80080e6:	e012      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d206      	bcs.n	80080fe <prvInsertTimerInActiveList+0x62>
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d302      	bcc.n	80080fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e007      	b.n	800810e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080fe:	4b07      	ldr	r3, [pc, #28]	; (800811c <prvInsertTimerInActiveList+0x80>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fd ff78 	bl	8005ffe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800810e:	697b      	ldr	r3, [r7, #20]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	24004ad8 	.word	0x24004ad8
 800811c:	24004ad4 	.word	0x24004ad4

08008120 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08e      	sub	sp, #56	; 0x38
 8008124:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008126:	e0ca      	b.n	80082be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da18      	bge.n	8008160 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800812e:	1d3b      	adds	r3, r7, #4
 8008130:	3304      	adds	r3, #4
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	61fb      	str	r3, [r7, #28]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008156:	6850      	ldr	r0, [r2, #4]
 8008158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800815a:	6892      	ldr	r2, [r2, #8]
 800815c:	4611      	mov	r1, r2
 800815e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f2c0 80aa 	blt.w	80082bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	3304      	adds	r3, #4
 8008178:	4618      	mov	r0, r3
 800817a:	f7fd ff79 	bl	8006070 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800817e:	463b      	mov	r3, r7
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff ff6b 	bl	800805c <prvSampleTimeNow>
 8008186:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b09      	cmp	r3, #9
 800818c:	f200 8097 	bhi.w	80082be <prvProcessReceivedCommands+0x19e>
 8008190:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <prvProcessReceivedCommands+0x78>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	080081c1 	.word	0x080081c1
 800819c:	080081c1 	.word	0x080081c1
 80081a0:	080081c1 	.word	0x080081c1
 80081a4:	08008235 	.word	0x08008235
 80081a8:	08008249 	.word	0x08008249
 80081ac:	08008293 	.word	0x08008293
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	080081c1 	.word	0x080081c1
 80081b8:	08008235 	.word	0x08008235
 80081bc:	08008249 	.word	0x08008249
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	18d1      	adds	r1, r2, r3
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e0:	f7ff ff5c 	bl	800809c <prvInsertTimerInActiveList>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d069      	beq.n	80082be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d05e      	beq.n	80082be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	441a      	add	r2, r3
 8008208:	2300      	movs	r3, #0
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	2300      	movs	r3, #0
 800820e:	2100      	movs	r1, #0
 8008210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008212:	f7ff fe05 	bl	8007e20 <xTimerGenericCommand>
 8008216:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d14f      	bne.n	80082be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	61bb      	str	r3, [r7, #24]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800823a:	f023 0301 	bic.w	r3, r3, #1
 800823e:	b2da      	uxtb	r2, r3
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008246:	e03a      	b.n	80082be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	b2da      	uxtb	r2, r3
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	617b      	str	r3, [r7, #20]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	18d1      	adds	r1, r2, r3
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800828c:	f7ff ff06 	bl	800809c <prvInsertTimerInActiveList>
					break;
 8008290:	e015      	b.n	80082be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80082a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a2:	f7fd fd3d 	bl	8005d20 <vPortFree>
 80082a6:	e00a      	b.n	80082be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ae:	f023 0301 	bic.w	r3, r3, #1
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082ba:	e000      	b.n	80082be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082be:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <prvProcessReceivedCommands+0x1c0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	1d39      	adds	r1, r7, #4
 80082c4:	2200      	movs	r2, #0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fbec 	bl	8006aa4 <xQueueReceive>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f47f af2a 	bne.w	8008128 <prvProcessReceivedCommands+0x8>
	}
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	3730      	adds	r7, #48	; 0x30
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	24004adc 	.word	0x24004adc

080082e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ea:	e048      	b.n	800837e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082ec:	4b2d      	ldr	r3, [pc, #180]	; (80083a4 <prvSwitchTimerLists+0xc0>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f6:	4b2b      	ldr	r3, [pc, #172]	; (80083a4 <prvSwitchTimerLists+0xc0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3304      	adds	r3, #4
 8008304:	4618      	mov	r0, r3
 8008306:	f7fd feb3 	bl	8006070 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d02e      	beq.n	800837e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4413      	add	r3, r2
 8008328:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	429a      	cmp	r2, r3
 8008330:	d90e      	bls.n	8008350 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800833e:	4b19      	ldr	r3, [pc, #100]	; (80083a4 <prvSwitchTimerLists+0xc0>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3304      	adds	r3, #4
 8008346:	4619      	mov	r1, r3
 8008348:	4610      	mov	r0, r2
 800834a:	f7fd fe58 	bl	8005ffe <vListInsert>
 800834e:	e016      	b.n	800837e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008350:	2300      	movs	r3, #0
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	2300      	movs	r3, #0
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	2100      	movs	r1, #0
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fd60 	bl	8007e20 <xTimerGenericCommand>
 8008360:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	603b      	str	r3, [r7, #0]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <prvSwitchTimerLists+0xc0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1b1      	bne.n	80082ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <prvSwitchTimerLists+0xc0>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800838e:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <prvSwitchTimerLists+0xc4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a04      	ldr	r2, [pc, #16]	; (80083a4 <prvSwitchTimerLists+0xc0>)
 8008394:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008396:	4a04      	ldr	r2, [pc, #16]	; (80083a8 <prvSwitchTimerLists+0xc4>)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	6013      	str	r3, [r2, #0]
}
 800839c:	bf00      	nop
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	24004ad4 	.word	0x24004ad4
 80083a8:	24004ad8 	.word	0x24004ad8

080083ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083b2:	f7fd ffb7 	bl	8006324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083b6:	4b15      	ldr	r3, [pc, #84]	; (800840c <prvCheckForValidListAndQueue+0x60>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d120      	bne.n	8008400 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083be:	4814      	ldr	r0, [pc, #80]	; (8008410 <prvCheckForValidListAndQueue+0x64>)
 80083c0:	f7fd fdcc 	bl	8005f5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083c4:	4813      	ldr	r0, [pc, #76]	; (8008414 <prvCheckForValidListAndQueue+0x68>)
 80083c6:	f7fd fdc9 	bl	8005f5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083ca:	4b13      	ldr	r3, [pc, #76]	; (8008418 <prvCheckForValidListAndQueue+0x6c>)
 80083cc:	4a10      	ldr	r2, [pc, #64]	; (8008410 <prvCheckForValidListAndQueue+0x64>)
 80083ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083d0:	4b12      	ldr	r3, [pc, #72]	; (800841c <prvCheckForValidListAndQueue+0x70>)
 80083d2:	4a10      	ldr	r2, [pc, #64]	; (8008414 <prvCheckForValidListAndQueue+0x68>)
 80083d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083d6:	2300      	movs	r3, #0
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4b11      	ldr	r3, [pc, #68]	; (8008420 <prvCheckForValidListAndQueue+0x74>)
 80083dc:	4a11      	ldr	r2, [pc, #68]	; (8008424 <prvCheckForValidListAndQueue+0x78>)
 80083de:	2110      	movs	r1, #16
 80083e0:	200a      	movs	r0, #10
 80083e2:	f7fe f929 	bl	8006638 <xQueueGenericCreateStatic>
 80083e6:	4603      	mov	r3, r0
 80083e8:	4a08      	ldr	r2, [pc, #32]	; (800840c <prvCheckForValidListAndQueue+0x60>)
 80083ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <prvCheckForValidListAndQueue+0x60>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083f4:	4b05      	ldr	r3, [pc, #20]	; (800840c <prvCheckForValidListAndQueue+0x60>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	490b      	ldr	r1, [pc, #44]	; (8008428 <prvCheckForValidListAndQueue+0x7c>)
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fd42 	bl	8006e84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008400:	f7fd ffc0 	bl	8006384 <vPortExitCritical>
}
 8008404:	bf00      	nop
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	24004adc 	.word	0x24004adc
 8008410:	24004aac 	.word	0x24004aac
 8008414:	24004ac0 	.word	0x24004ac0
 8008418:	24004ad4 	.word	0x24004ad4
 800841c:	24004ad8 	.word	0x24004ad8
 8008420:	24004b88 	.word	0x24004b88
 8008424:	24004ae8 	.word	0x24004ae8
 8008428:	080094f8 	.word	0x080094f8

0800842c <__errno>:
 800842c:	4b01      	ldr	r3, [pc, #4]	; (8008434 <__errno+0x8>)
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	24000014 	.word	0x24000014

08008438 <std>:
 8008438:	2300      	movs	r3, #0
 800843a:	b510      	push	{r4, lr}
 800843c:	4604      	mov	r4, r0
 800843e:	e9c0 3300 	strd	r3, r3, [r0]
 8008442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008446:	6083      	str	r3, [r0, #8]
 8008448:	8181      	strh	r1, [r0, #12]
 800844a:	6643      	str	r3, [r0, #100]	; 0x64
 800844c:	81c2      	strh	r2, [r0, #14]
 800844e:	6183      	str	r3, [r0, #24]
 8008450:	4619      	mov	r1, r3
 8008452:	2208      	movs	r2, #8
 8008454:	305c      	adds	r0, #92	; 0x5c
 8008456:	f000 f91a 	bl	800868e <memset>
 800845a:	4b05      	ldr	r3, [pc, #20]	; (8008470 <std+0x38>)
 800845c:	6263      	str	r3, [r4, #36]	; 0x24
 800845e:	4b05      	ldr	r3, [pc, #20]	; (8008474 <std+0x3c>)
 8008460:	62a3      	str	r3, [r4, #40]	; 0x28
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <std+0x40>)
 8008464:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008466:	4b05      	ldr	r3, [pc, #20]	; (800847c <std+0x44>)
 8008468:	6224      	str	r4, [r4, #32]
 800846a:	6323      	str	r3, [r4, #48]	; 0x30
 800846c:	bd10      	pop	{r4, pc}
 800846e:	bf00      	nop
 8008470:	080088ed 	.word	0x080088ed
 8008474:	0800890f 	.word	0x0800890f
 8008478:	08008947 	.word	0x08008947
 800847c:	0800896b 	.word	0x0800896b

08008480 <_cleanup_r>:
 8008480:	4901      	ldr	r1, [pc, #4]	; (8008488 <_cleanup_r+0x8>)
 8008482:	f000 b8af 	b.w	80085e4 <_fwalk_reent>
 8008486:	bf00      	nop
 8008488:	08008ac5 	.word	0x08008ac5

0800848c <__sfmoreglue>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	2268      	movs	r2, #104	; 0x68
 8008490:	1e4d      	subs	r5, r1, #1
 8008492:	4355      	muls	r5, r2
 8008494:	460e      	mov	r6, r1
 8008496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800849a:	f000 f921 	bl	80086e0 <_malloc_r>
 800849e:	4604      	mov	r4, r0
 80084a0:	b140      	cbz	r0, 80084b4 <__sfmoreglue+0x28>
 80084a2:	2100      	movs	r1, #0
 80084a4:	e9c0 1600 	strd	r1, r6, [r0]
 80084a8:	300c      	adds	r0, #12
 80084aa:	60a0      	str	r0, [r4, #8]
 80084ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084b0:	f000 f8ed 	bl	800868e <memset>
 80084b4:	4620      	mov	r0, r4
 80084b6:	bd70      	pop	{r4, r5, r6, pc}

080084b8 <__sfp_lock_acquire>:
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <__sfp_lock_acquire+0x8>)
 80084ba:	f000 b8d8 	b.w	800866e <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	24004bd9 	.word	0x24004bd9

080084c4 <__sfp_lock_release>:
 80084c4:	4801      	ldr	r0, [pc, #4]	; (80084cc <__sfp_lock_release+0x8>)
 80084c6:	f000 b8d3 	b.w	8008670 <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	24004bd9 	.word	0x24004bd9

080084d0 <__sinit_lock_acquire>:
 80084d0:	4801      	ldr	r0, [pc, #4]	; (80084d8 <__sinit_lock_acquire+0x8>)
 80084d2:	f000 b8cc 	b.w	800866e <__retarget_lock_acquire_recursive>
 80084d6:	bf00      	nop
 80084d8:	24004bda 	.word	0x24004bda

080084dc <__sinit_lock_release>:
 80084dc:	4801      	ldr	r0, [pc, #4]	; (80084e4 <__sinit_lock_release+0x8>)
 80084de:	f000 b8c7 	b.w	8008670 <__retarget_lock_release_recursive>
 80084e2:	bf00      	nop
 80084e4:	24004bda 	.word	0x24004bda

080084e8 <__sinit>:
 80084e8:	b510      	push	{r4, lr}
 80084ea:	4604      	mov	r4, r0
 80084ec:	f7ff fff0 	bl	80084d0 <__sinit_lock_acquire>
 80084f0:	69a3      	ldr	r3, [r4, #24]
 80084f2:	b11b      	cbz	r3, 80084fc <__sinit+0x14>
 80084f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f8:	f7ff bff0 	b.w	80084dc <__sinit_lock_release>
 80084fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008500:	6523      	str	r3, [r4, #80]	; 0x50
 8008502:	4b13      	ldr	r3, [pc, #76]	; (8008550 <__sinit+0x68>)
 8008504:	4a13      	ldr	r2, [pc, #76]	; (8008554 <__sinit+0x6c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	62a2      	str	r2, [r4, #40]	; 0x28
 800850a:	42a3      	cmp	r3, r4
 800850c:	bf04      	itt	eq
 800850e:	2301      	moveq	r3, #1
 8008510:	61a3      	streq	r3, [r4, #24]
 8008512:	4620      	mov	r0, r4
 8008514:	f000 f820 	bl	8008558 <__sfp>
 8008518:	6060      	str	r0, [r4, #4]
 800851a:	4620      	mov	r0, r4
 800851c:	f000 f81c 	bl	8008558 <__sfp>
 8008520:	60a0      	str	r0, [r4, #8]
 8008522:	4620      	mov	r0, r4
 8008524:	f000 f818 	bl	8008558 <__sfp>
 8008528:	2200      	movs	r2, #0
 800852a:	60e0      	str	r0, [r4, #12]
 800852c:	2104      	movs	r1, #4
 800852e:	6860      	ldr	r0, [r4, #4]
 8008530:	f7ff ff82 	bl	8008438 <std>
 8008534:	68a0      	ldr	r0, [r4, #8]
 8008536:	2201      	movs	r2, #1
 8008538:	2109      	movs	r1, #9
 800853a:	f7ff ff7d 	bl	8008438 <std>
 800853e:	68e0      	ldr	r0, [r4, #12]
 8008540:	2202      	movs	r2, #2
 8008542:	2112      	movs	r1, #18
 8008544:	f7ff ff78 	bl	8008438 <std>
 8008548:	2301      	movs	r3, #1
 800854a:	61a3      	str	r3, [r4, #24]
 800854c:	e7d2      	b.n	80084f4 <__sinit+0xc>
 800854e:	bf00      	nop
 8008550:	080095bc 	.word	0x080095bc
 8008554:	08008481 	.word	0x08008481

08008558 <__sfp>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	4607      	mov	r7, r0
 800855c:	f7ff ffac 	bl	80084b8 <__sfp_lock_acquire>
 8008560:	4b1e      	ldr	r3, [pc, #120]	; (80085dc <__sfp+0x84>)
 8008562:	681e      	ldr	r6, [r3, #0]
 8008564:	69b3      	ldr	r3, [r6, #24]
 8008566:	b913      	cbnz	r3, 800856e <__sfp+0x16>
 8008568:	4630      	mov	r0, r6
 800856a:	f7ff ffbd 	bl	80084e8 <__sinit>
 800856e:	3648      	adds	r6, #72	; 0x48
 8008570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008574:	3b01      	subs	r3, #1
 8008576:	d503      	bpl.n	8008580 <__sfp+0x28>
 8008578:	6833      	ldr	r3, [r6, #0]
 800857a:	b30b      	cbz	r3, 80085c0 <__sfp+0x68>
 800857c:	6836      	ldr	r6, [r6, #0]
 800857e:	e7f7      	b.n	8008570 <__sfp+0x18>
 8008580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008584:	b9d5      	cbnz	r5, 80085bc <__sfp+0x64>
 8008586:	4b16      	ldr	r3, [pc, #88]	; (80085e0 <__sfp+0x88>)
 8008588:	60e3      	str	r3, [r4, #12]
 800858a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800858e:	6665      	str	r5, [r4, #100]	; 0x64
 8008590:	f000 f86c 	bl	800866c <__retarget_lock_init_recursive>
 8008594:	f7ff ff96 	bl	80084c4 <__sfp_lock_release>
 8008598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800859c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085a0:	6025      	str	r5, [r4, #0]
 80085a2:	61a5      	str	r5, [r4, #24]
 80085a4:	2208      	movs	r2, #8
 80085a6:	4629      	mov	r1, r5
 80085a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085ac:	f000 f86f 	bl	800868e <memset>
 80085b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085b8:	4620      	mov	r0, r4
 80085ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085bc:	3468      	adds	r4, #104	; 0x68
 80085be:	e7d9      	b.n	8008574 <__sfp+0x1c>
 80085c0:	2104      	movs	r1, #4
 80085c2:	4638      	mov	r0, r7
 80085c4:	f7ff ff62 	bl	800848c <__sfmoreglue>
 80085c8:	4604      	mov	r4, r0
 80085ca:	6030      	str	r0, [r6, #0]
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d1d5      	bne.n	800857c <__sfp+0x24>
 80085d0:	f7ff ff78 	bl	80084c4 <__sfp_lock_release>
 80085d4:	230c      	movs	r3, #12
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	e7ee      	b.n	80085b8 <__sfp+0x60>
 80085da:	bf00      	nop
 80085dc:	080095bc 	.word	0x080095bc
 80085e0:	ffff0001 	.word	0xffff0001

080085e4 <_fwalk_reent>:
 80085e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e8:	4606      	mov	r6, r0
 80085ea:	4688      	mov	r8, r1
 80085ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085f0:	2700      	movs	r7, #0
 80085f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085f6:	f1b9 0901 	subs.w	r9, r9, #1
 80085fa:	d505      	bpl.n	8008608 <_fwalk_reent+0x24>
 80085fc:	6824      	ldr	r4, [r4, #0]
 80085fe:	2c00      	cmp	r4, #0
 8008600:	d1f7      	bne.n	80085f2 <_fwalk_reent+0xe>
 8008602:	4638      	mov	r0, r7
 8008604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008608:	89ab      	ldrh	r3, [r5, #12]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d907      	bls.n	800861e <_fwalk_reent+0x3a>
 800860e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008612:	3301      	adds	r3, #1
 8008614:	d003      	beq.n	800861e <_fwalk_reent+0x3a>
 8008616:	4629      	mov	r1, r5
 8008618:	4630      	mov	r0, r6
 800861a:	47c0      	blx	r8
 800861c:	4307      	orrs	r7, r0
 800861e:	3568      	adds	r5, #104	; 0x68
 8008620:	e7e9      	b.n	80085f6 <_fwalk_reent+0x12>
	...

08008624 <__libc_init_array>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	4d0d      	ldr	r5, [pc, #52]	; (800865c <__libc_init_array+0x38>)
 8008628:	4c0d      	ldr	r4, [pc, #52]	; (8008660 <__libc_init_array+0x3c>)
 800862a:	1b64      	subs	r4, r4, r5
 800862c:	10a4      	asrs	r4, r4, #2
 800862e:	2600      	movs	r6, #0
 8008630:	42a6      	cmp	r6, r4
 8008632:	d109      	bne.n	8008648 <__libc_init_array+0x24>
 8008634:	4d0b      	ldr	r5, [pc, #44]	; (8008664 <__libc_init_array+0x40>)
 8008636:	4c0c      	ldr	r4, [pc, #48]	; (8008668 <__libc_init_array+0x44>)
 8008638:	f000 ff32 	bl	80094a0 <_init>
 800863c:	1b64      	subs	r4, r4, r5
 800863e:	10a4      	asrs	r4, r4, #2
 8008640:	2600      	movs	r6, #0
 8008642:	42a6      	cmp	r6, r4
 8008644:	d105      	bne.n	8008652 <__libc_init_array+0x2e>
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	f855 3b04 	ldr.w	r3, [r5], #4
 800864c:	4798      	blx	r3
 800864e:	3601      	adds	r6, #1
 8008650:	e7ee      	b.n	8008630 <__libc_init_array+0xc>
 8008652:	f855 3b04 	ldr.w	r3, [r5], #4
 8008656:	4798      	blx	r3
 8008658:	3601      	adds	r6, #1
 800865a:	e7f2      	b.n	8008642 <__libc_init_array+0x1e>
 800865c:	080095fc 	.word	0x080095fc
 8008660:	080095fc 	.word	0x080095fc
 8008664:	080095fc 	.word	0x080095fc
 8008668:	08009600 	.word	0x08009600

0800866c <__retarget_lock_init_recursive>:
 800866c:	4770      	bx	lr

0800866e <__retarget_lock_acquire_recursive>:
 800866e:	4770      	bx	lr

08008670 <__retarget_lock_release_recursive>:
 8008670:	4770      	bx	lr

08008672 <memcpy>:
 8008672:	440a      	add	r2, r1
 8008674:	4291      	cmp	r1, r2
 8008676:	f100 33ff 	add.w	r3, r0, #4294967295
 800867a:	d100      	bne.n	800867e <memcpy+0xc>
 800867c:	4770      	bx	lr
 800867e:	b510      	push	{r4, lr}
 8008680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008688:	4291      	cmp	r1, r2
 800868a:	d1f9      	bne.n	8008680 <memcpy+0xe>
 800868c:	bd10      	pop	{r4, pc}

0800868e <memset>:
 800868e:	4402      	add	r2, r0
 8008690:	4603      	mov	r3, r0
 8008692:	4293      	cmp	r3, r2
 8008694:	d100      	bne.n	8008698 <memset+0xa>
 8008696:	4770      	bx	lr
 8008698:	f803 1b01 	strb.w	r1, [r3], #1
 800869c:	e7f9      	b.n	8008692 <memset+0x4>
	...

080086a0 <sbrk_aligned>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	4e0e      	ldr	r6, [pc, #56]	; (80086dc <sbrk_aligned+0x3c>)
 80086a4:	460c      	mov	r4, r1
 80086a6:	6831      	ldr	r1, [r6, #0]
 80086a8:	4605      	mov	r5, r0
 80086aa:	b911      	cbnz	r1, 80086b2 <sbrk_aligned+0x12>
 80086ac:	f000 f90e 	bl	80088cc <_sbrk_r>
 80086b0:	6030      	str	r0, [r6, #0]
 80086b2:	4621      	mov	r1, r4
 80086b4:	4628      	mov	r0, r5
 80086b6:	f000 f909 	bl	80088cc <_sbrk_r>
 80086ba:	1c43      	adds	r3, r0, #1
 80086bc:	d00a      	beq.n	80086d4 <sbrk_aligned+0x34>
 80086be:	1cc4      	adds	r4, r0, #3
 80086c0:	f024 0403 	bic.w	r4, r4, #3
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d007      	beq.n	80086d8 <sbrk_aligned+0x38>
 80086c8:	1a21      	subs	r1, r4, r0
 80086ca:	4628      	mov	r0, r5
 80086cc:	f000 f8fe 	bl	80088cc <_sbrk_r>
 80086d0:	3001      	adds	r0, #1
 80086d2:	d101      	bne.n	80086d8 <sbrk_aligned+0x38>
 80086d4:	f04f 34ff 	mov.w	r4, #4294967295
 80086d8:	4620      	mov	r0, r4
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	24004be0 	.word	0x24004be0

080086e0 <_malloc_r>:
 80086e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e4:	1ccd      	adds	r5, r1, #3
 80086e6:	f025 0503 	bic.w	r5, r5, #3
 80086ea:	3508      	adds	r5, #8
 80086ec:	2d0c      	cmp	r5, #12
 80086ee:	bf38      	it	cc
 80086f0:	250c      	movcc	r5, #12
 80086f2:	2d00      	cmp	r5, #0
 80086f4:	4607      	mov	r7, r0
 80086f6:	db01      	blt.n	80086fc <_malloc_r+0x1c>
 80086f8:	42a9      	cmp	r1, r5
 80086fa:	d905      	bls.n	8008708 <_malloc_r+0x28>
 80086fc:	230c      	movs	r3, #12
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	2600      	movs	r6, #0
 8008702:	4630      	mov	r0, r6
 8008704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008708:	4e2e      	ldr	r6, [pc, #184]	; (80087c4 <_malloc_r+0xe4>)
 800870a:	f000 fa29 	bl	8008b60 <__malloc_lock>
 800870e:	6833      	ldr	r3, [r6, #0]
 8008710:	461c      	mov	r4, r3
 8008712:	bb34      	cbnz	r4, 8008762 <_malloc_r+0x82>
 8008714:	4629      	mov	r1, r5
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ffc2 	bl	80086a0 <sbrk_aligned>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	4604      	mov	r4, r0
 8008720:	d14d      	bne.n	80087be <_malloc_r+0xde>
 8008722:	6834      	ldr	r4, [r6, #0]
 8008724:	4626      	mov	r6, r4
 8008726:	2e00      	cmp	r6, #0
 8008728:	d140      	bne.n	80087ac <_malloc_r+0xcc>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4631      	mov	r1, r6
 800872e:	4638      	mov	r0, r7
 8008730:	eb04 0803 	add.w	r8, r4, r3
 8008734:	f000 f8ca 	bl	80088cc <_sbrk_r>
 8008738:	4580      	cmp	r8, r0
 800873a:	d13a      	bne.n	80087b2 <_malloc_r+0xd2>
 800873c:	6821      	ldr	r1, [r4, #0]
 800873e:	3503      	adds	r5, #3
 8008740:	1a6d      	subs	r5, r5, r1
 8008742:	f025 0503 	bic.w	r5, r5, #3
 8008746:	3508      	adds	r5, #8
 8008748:	2d0c      	cmp	r5, #12
 800874a:	bf38      	it	cc
 800874c:	250c      	movcc	r5, #12
 800874e:	4629      	mov	r1, r5
 8008750:	4638      	mov	r0, r7
 8008752:	f7ff ffa5 	bl	80086a0 <sbrk_aligned>
 8008756:	3001      	adds	r0, #1
 8008758:	d02b      	beq.n	80087b2 <_malloc_r+0xd2>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	442b      	add	r3, r5
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	e00e      	b.n	8008780 <_malloc_r+0xa0>
 8008762:	6822      	ldr	r2, [r4, #0]
 8008764:	1b52      	subs	r2, r2, r5
 8008766:	d41e      	bmi.n	80087a6 <_malloc_r+0xc6>
 8008768:	2a0b      	cmp	r2, #11
 800876a:	d916      	bls.n	800879a <_malloc_r+0xba>
 800876c:	1961      	adds	r1, r4, r5
 800876e:	42a3      	cmp	r3, r4
 8008770:	6025      	str	r5, [r4, #0]
 8008772:	bf18      	it	ne
 8008774:	6059      	strne	r1, [r3, #4]
 8008776:	6863      	ldr	r3, [r4, #4]
 8008778:	bf08      	it	eq
 800877a:	6031      	streq	r1, [r6, #0]
 800877c:	5162      	str	r2, [r4, r5]
 800877e:	604b      	str	r3, [r1, #4]
 8008780:	4638      	mov	r0, r7
 8008782:	f104 060b 	add.w	r6, r4, #11
 8008786:	f000 f9f1 	bl	8008b6c <__malloc_unlock>
 800878a:	f026 0607 	bic.w	r6, r6, #7
 800878e:	1d23      	adds	r3, r4, #4
 8008790:	1af2      	subs	r2, r6, r3
 8008792:	d0b6      	beq.n	8008702 <_malloc_r+0x22>
 8008794:	1b9b      	subs	r3, r3, r6
 8008796:	50a3      	str	r3, [r4, r2]
 8008798:	e7b3      	b.n	8008702 <_malloc_r+0x22>
 800879a:	6862      	ldr	r2, [r4, #4]
 800879c:	42a3      	cmp	r3, r4
 800879e:	bf0c      	ite	eq
 80087a0:	6032      	streq	r2, [r6, #0]
 80087a2:	605a      	strne	r2, [r3, #4]
 80087a4:	e7ec      	b.n	8008780 <_malloc_r+0xa0>
 80087a6:	4623      	mov	r3, r4
 80087a8:	6864      	ldr	r4, [r4, #4]
 80087aa:	e7b2      	b.n	8008712 <_malloc_r+0x32>
 80087ac:	4634      	mov	r4, r6
 80087ae:	6876      	ldr	r6, [r6, #4]
 80087b0:	e7b9      	b.n	8008726 <_malloc_r+0x46>
 80087b2:	230c      	movs	r3, #12
 80087b4:	603b      	str	r3, [r7, #0]
 80087b6:	4638      	mov	r0, r7
 80087b8:	f000 f9d8 	bl	8008b6c <__malloc_unlock>
 80087bc:	e7a1      	b.n	8008702 <_malloc_r+0x22>
 80087be:	6025      	str	r5, [r4, #0]
 80087c0:	e7de      	b.n	8008780 <_malloc_r+0xa0>
 80087c2:	bf00      	nop
 80087c4:	24004bdc 	.word	0x24004bdc

080087c8 <iprintf>:
 80087c8:	b40f      	push	{r0, r1, r2, r3}
 80087ca:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <iprintf+0x2c>)
 80087cc:	b513      	push	{r0, r1, r4, lr}
 80087ce:	681c      	ldr	r4, [r3, #0]
 80087d0:	b124      	cbz	r4, 80087dc <iprintf+0x14>
 80087d2:	69a3      	ldr	r3, [r4, #24]
 80087d4:	b913      	cbnz	r3, 80087dc <iprintf+0x14>
 80087d6:	4620      	mov	r0, r4
 80087d8:	f7ff fe86 	bl	80084e8 <__sinit>
 80087dc:	ab05      	add	r3, sp, #20
 80087de:	9a04      	ldr	r2, [sp, #16]
 80087e0:	68a1      	ldr	r1, [r4, #8]
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fa3d 	bl	8008c64 <_vfiprintf_r>
 80087ea:	b002      	add	sp, #8
 80087ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f0:	b004      	add	sp, #16
 80087f2:	4770      	bx	lr
 80087f4:	24000014 	.word	0x24000014

080087f8 <cleanup_glue>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	460c      	mov	r4, r1
 80087fc:	6809      	ldr	r1, [r1, #0]
 80087fe:	4605      	mov	r5, r0
 8008800:	b109      	cbz	r1, 8008806 <cleanup_glue+0xe>
 8008802:	f7ff fff9 	bl	80087f8 <cleanup_glue>
 8008806:	4621      	mov	r1, r4
 8008808:	4628      	mov	r0, r5
 800880a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800880e:	f000 b9b3 	b.w	8008b78 <_free_r>
	...

08008814 <_reclaim_reent>:
 8008814:	4b2c      	ldr	r3, [pc, #176]	; (80088c8 <_reclaim_reent+0xb4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4283      	cmp	r3, r0
 800881a:	b570      	push	{r4, r5, r6, lr}
 800881c:	4604      	mov	r4, r0
 800881e:	d051      	beq.n	80088c4 <_reclaim_reent+0xb0>
 8008820:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008822:	b143      	cbz	r3, 8008836 <_reclaim_reent+0x22>
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d14a      	bne.n	80088c0 <_reclaim_reent+0xac>
 800882a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800882c:	6819      	ldr	r1, [r3, #0]
 800882e:	b111      	cbz	r1, 8008836 <_reclaim_reent+0x22>
 8008830:	4620      	mov	r0, r4
 8008832:	f000 f9a1 	bl	8008b78 <_free_r>
 8008836:	6961      	ldr	r1, [r4, #20]
 8008838:	b111      	cbz	r1, 8008840 <_reclaim_reent+0x2c>
 800883a:	4620      	mov	r0, r4
 800883c:	f000 f99c 	bl	8008b78 <_free_r>
 8008840:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008842:	b111      	cbz	r1, 800884a <_reclaim_reent+0x36>
 8008844:	4620      	mov	r0, r4
 8008846:	f000 f997 	bl	8008b78 <_free_r>
 800884a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800884c:	b111      	cbz	r1, 8008854 <_reclaim_reent+0x40>
 800884e:	4620      	mov	r0, r4
 8008850:	f000 f992 	bl	8008b78 <_free_r>
 8008854:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008856:	b111      	cbz	r1, 800885e <_reclaim_reent+0x4a>
 8008858:	4620      	mov	r0, r4
 800885a:	f000 f98d 	bl	8008b78 <_free_r>
 800885e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008860:	b111      	cbz	r1, 8008868 <_reclaim_reent+0x54>
 8008862:	4620      	mov	r0, r4
 8008864:	f000 f988 	bl	8008b78 <_free_r>
 8008868:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800886a:	b111      	cbz	r1, 8008872 <_reclaim_reent+0x5e>
 800886c:	4620      	mov	r0, r4
 800886e:	f000 f983 	bl	8008b78 <_free_r>
 8008872:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008874:	b111      	cbz	r1, 800887c <_reclaim_reent+0x68>
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f97e 	bl	8008b78 <_free_r>
 800887c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800887e:	b111      	cbz	r1, 8008886 <_reclaim_reent+0x72>
 8008880:	4620      	mov	r0, r4
 8008882:	f000 f979 	bl	8008b78 <_free_r>
 8008886:	69a3      	ldr	r3, [r4, #24]
 8008888:	b1e3      	cbz	r3, 80088c4 <_reclaim_reent+0xb0>
 800888a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800888c:	4620      	mov	r0, r4
 800888e:	4798      	blx	r3
 8008890:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008892:	b1b9      	cbz	r1, 80088c4 <_reclaim_reent+0xb0>
 8008894:	4620      	mov	r0, r4
 8008896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800889a:	f7ff bfad 	b.w	80087f8 <cleanup_glue>
 800889e:	5949      	ldr	r1, [r1, r5]
 80088a0:	b941      	cbnz	r1, 80088b4 <_reclaim_reent+0xa0>
 80088a2:	3504      	adds	r5, #4
 80088a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a6:	2d80      	cmp	r5, #128	; 0x80
 80088a8:	68d9      	ldr	r1, [r3, #12]
 80088aa:	d1f8      	bne.n	800889e <_reclaim_reent+0x8a>
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 f963 	bl	8008b78 <_free_r>
 80088b2:	e7ba      	b.n	800882a <_reclaim_reent+0x16>
 80088b4:	680e      	ldr	r6, [r1, #0]
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f95e 	bl	8008b78 <_free_r>
 80088bc:	4631      	mov	r1, r6
 80088be:	e7ef      	b.n	80088a0 <_reclaim_reent+0x8c>
 80088c0:	2500      	movs	r5, #0
 80088c2:	e7ef      	b.n	80088a4 <_reclaim_reent+0x90>
 80088c4:	bd70      	pop	{r4, r5, r6, pc}
 80088c6:	bf00      	nop
 80088c8:	24000014 	.word	0x24000014

080088cc <_sbrk_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4d06      	ldr	r5, [pc, #24]	; (80088e8 <_sbrk_r+0x1c>)
 80088d0:	2300      	movs	r3, #0
 80088d2:	4604      	mov	r4, r0
 80088d4:	4608      	mov	r0, r1
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	f7f8 fb66 	bl	8000fa8 <_sbrk>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d102      	bne.n	80088e6 <_sbrk_r+0x1a>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b103      	cbz	r3, 80088e6 <_sbrk_r+0x1a>
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	24004be4 	.word	0x24004be4

080088ec <__sread>:
 80088ec:	b510      	push	{r4, lr}
 80088ee:	460c      	mov	r4, r1
 80088f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f4:	f000 fc7a 	bl	80091ec <_read_r>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	bfab      	itete	ge
 80088fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008900:	181b      	addge	r3, r3, r0
 8008902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008906:	bfac      	ite	ge
 8008908:	6563      	strge	r3, [r4, #84]	; 0x54
 800890a:	81a3      	strhlt	r3, [r4, #12]
 800890c:	bd10      	pop	{r4, pc}

0800890e <__swrite>:
 800890e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008912:	461f      	mov	r7, r3
 8008914:	898b      	ldrh	r3, [r1, #12]
 8008916:	05db      	lsls	r3, r3, #23
 8008918:	4605      	mov	r5, r0
 800891a:	460c      	mov	r4, r1
 800891c:	4616      	mov	r6, r2
 800891e:	d505      	bpl.n	800892c <__swrite+0x1e>
 8008920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008924:	2302      	movs	r3, #2
 8008926:	2200      	movs	r2, #0
 8008928:	f000 f908 	bl	8008b3c <_lseek_r>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	4632      	mov	r2, r6
 800893a:	463b      	mov	r3, r7
 800893c:	4628      	mov	r0, r5
 800893e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008942:	f000 b817 	b.w	8008974 <_write_r>

08008946 <__sseek>:
 8008946:	b510      	push	{r4, lr}
 8008948:	460c      	mov	r4, r1
 800894a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894e:	f000 f8f5 	bl	8008b3c <_lseek_r>
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	bf15      	itete	ne
 8008958:	6560      	strne	r0, [r4, #84]	; 0x54
 800895a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800895e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008962:	81a3      	strheq	r3, [r4, #12]
 8008964:	bf18      	it	ne
 8008966:	81a3      	strhne	r3, [r4, #12]
 8008968:	bd10      	pop	{r4, pc}

0800896a <__sclose>:
 800896a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896e:	f000 b813 	b.w	8008998 <_close_r>
	...

08008974 <_write_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	; (8008994 <_write_r+0x20>)
 8008978:	4604      	mov	r4, r0
 800897a:	4608      	mov	r0, r1
 800897c:	4611      	mov	r1, r2
 800897e:	2200      	movs	r2, #0
 8008980:	602a      	str	r2, [r5, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f7f8 fabf 	bl	8000f06 <_write>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_write_r+0x1e>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_write_r+0x1e>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	24004be4 	.word	0x24004be4

08008998 <_close_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_close_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7f8 facb 	bl	8000f3e <_close>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_close_r+0x1a>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_close_r+0x1a>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	24004be4 	.word	0x24004be4

080089b8 <__sflush_r>:
 80089b8:	898a      	ldrh	r2, [r1, #12]
 80089ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089be:	4605      	mov	r5, r0
 80089c0:	0710      	lsls	r0, r2, #28
 80089c2:	460c      	mov	r4, r1
 80089c4:	d458      	bmi.n	8008a78 <__sflush_r+0xc0>
 80089c6:	684b      	ldr	r3, [r1, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	dc05      	bgt.n	80089d8 <__sflush_r+0x20>
 80089cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dc02      	bgt.n	80089d8 <__sflush_r+0x20>
 80089d2:	2000      	movs	r0, #0
 80089d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089da:	2e00      	cmp	r6, #0
 80089dc:	d0f9      	beq.n	80089d2 <__sflush_r+0x1a>
 80089de:	2300      	movs	r3, #0
 80089e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089e4:	682f      	ldr	r7, [r5, #0]
 80089e6:	602b      	str	r3, [r5, #0]
 80089e8:	d032      	beq.n	8008a50 <__sflush_r+0x98>
 80089ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	075a      	lsls	r2, r3, #29
 80089f0:	d505      	bpl.n	80089fe <__sflush_r+0x46>
 80089f2:	6863      	ldr	r3, [r4, #4]
 80089f4:	1ac0      	subs	r0, r0, r3
 80089f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089f8:	b10b      	cbz	r3, 80089fe <__sflush_r+0x46>
 80089fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089fc:	1ac0      	subs	r0, r0, r3
 80089fe:	2300      	movs	r3, #0
 8008a00:	4602      	mov	r2, r0
 8008a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a04:	6a21      	ldr	r1, [r4, #32]
 8008a06:	4628      	mov	r0, r5
 8008a08:	47b0      	blx	r6
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	d106      	bne.n	8008a1e <__sflush_r+0x66>
 8008a10:	6829      	ldr	r1, [r5, #0]
 8008a12:	291d      	cmp	r1, #29
 8008a14:	d82c      	bhi.n	8008a70 <__sflush_r+0xb8>
 8008a16:	4a2a      	ldr	r2, [pc, #168]	; (8008ac0 <__sflush_r+0x108>)
 8008a18:	40ca      	lsrs	r2, r1
 8008a1a:	07d6      	lsls	r6, r2, #31
 8008a1c:	d528      	bpl.n	8008a70 <__sflush_r+0xb8>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	6062      	str	r2, [r4, #4]
 8008a22:	04d9      	lsls	r1, r3, #19
 8008a24:	6922      	ldr	r2, [r4, #16]
 8008a26:	6022      	str	r2, [r4, #0]
 8008a28:	d504      	bpl.n	8008a34 <__sflush_r+0x7c>
 8008a2a:	1c42      	adds	r2, r0, #1
 8008a2c:	d101      	bne.n	8008a32 <__sflush_r+0x7a>
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	b903      	cbnz	r3, 8008a34 <__sflush_r+0x7c>
 8008a32:	6560      	str	r0, [r4, #84]	; 0x54
 8008a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a36:	602f      	str	r7, [r5, #0]
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	d0ca      	beq.n	80089d2 <__sflush_r+0x1a>
 8008a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a40:	4299      	cmp	r1, r3
 8008a42:	d002      	beq.n	8008a4a <__sflush_r+0x92>
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 f897 	bl	8008b78 <_free_r>
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a4e:	e7c1      	b.n	80089d4 <__sflush_r+0x1c>
 8008a50:	6a21      	ldr	r1, [r4, #32]
 8008a52:	2301      	movs	r3, #1
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b0      	blx	r6
 8008a58:	1c41      	adds	r1, r0, #1
 8008a5a:	d1c7      	bne.n	80089ec <__sflush_r+0x34>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0c4      	beq.n	80089ec <__sflush_r+0x34>
 8008a62:	2b1d      	cmp	r3, #29
 8008a64:	d001      	beq.n	8008a6a <__sflush_r+0xb2>
 8008a66:	2b16      	cmp	r3, #22
 8008a68:	d101      	bne.n	8008a6e <__sflush_r+0xb6>
 8008a6a:	602f      	str	r7, [r5, #0]
 8008a6c:	e7b1      	b.n	80089d2 <__sflush_r+0x1a>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	e7ad      	b.n	80089d4 <__sflush_r+0x1c>
 8008a78:	690f      	ldr	r7, [r1, #16]
 8008a7a:	2f00      	cmp	r7, #0
 8008a7c:	d0a9      	beq.n	80089d2 <__sflush_r+0x1a>
 8008a7e:	0793      	lsls	r3, r2, #30
 8008a80:	680e      	ldr	r6, [r1, #0]
 8008a82:	bf08      	it	eq
 8008a84:	694b      	ldreq	r3, [r1, #20]
 8008a86:	600f      	str	r7, [r1, #0]
 8008a88:	bf18      	it	ne
 8008a8a:	2300      	movne	r3, #0
 8008a8c:	eba6 0807 	sub.w	r8, r6, r7
 8008a90:	608b      	str	r3, [r1, #8]
 8008a92:	f1b8 0f00 	cmp.w	r8, #0
 8008a96:	dd9c      	ble.n	80089d2 <__sflush_r+0x1a>
 8008a98:	6a21      	ldr	r1, [r4, #32]
 8008a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a9c:	4643      	mov	r3, r8
 8008a9e:	463a      	mov	r2, r7
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b0      	blx	r6
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	dc06      	bgt.n	8008ab6 <__sflush_r+0xfe>
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e78e      	b.n	80089d4 <__sflush_r+0x1c>
 8008ab6:	4407      	add	r7, r0
 8008ab8:	eba8 0800 	sub.w	r8, r8, r0
 8008abc:	e7e9      	b.n	8008a92 <__sflush_r+0xda>
 8008abe:	bf00      	nop
 8008ac0:	20400001 	.word	0x20400001

08008ac4 <_fflush_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	690b      	ldr	r3, [r1, #16]
 8008ac8:	4605      	mov	r5, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b913      	cbnz	r3, 8008ad4 <_fflush_r+0x10>
 8008ace:	2500      	movs	r5, #0
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	b118      	cbz	r0, 8008ade <_fflush_r+0x1a>
 8008ad6:	6983      	ldr	r3, [r0, #24]
 8008ad8:	b90b      	cbnz	r3, 8008ade <_fflush_r+0x1a>
 8008ada:	f7ff fd05 	bl	80084e8 <__sinit>
 8008ade:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <_fflush_r+0x6c>)
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	d11b      	bne.n	8008b1c <_fflush_r+0x58>
 8008ae4:	686c      	ldr	r4, [r5, #4]
 8008ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0ef      	beq.n	8008ace <_fflush_r+0xa>
 8008aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008af0:	07d0      	lsls	r0, r2, #31
 8008af2:	d404      	bmi.n	8008afe <_fflush_r+0x3a>
 8008af4:	0599      	lsls	r1, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_fflush_r+0x3a>
 8008af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008afa:	f7ff fdb8 	bl	800866e <__retarget_lock_acquire_recursive>
 8008afe:	4628      	mov	r0, r5
 8008b00:	4621      	mov	r1, r4
 8008b02:	f7ff ff59 	bl	80089b8 <__sflush_r>
 8008b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b08:	07da      	lsls	r2, r3, #31
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	d4e0      	bmi.n	8008ad0 <_fflush_r+0xc>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	059b      	lsls	r3, r3, #22
 8008b12:	d4dd      	bmi.n	8008ad0 <_fflush_r+0xc>
 8008b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b16:	f7ff fdab 	bl	8008670 <__retarget_lock_release_recursive>
 8008b1a:	e7d9      	b.n	8008ad0 <_fflush_r+0xc>
 8008b1c:	4b05      	ldr	r3, [pc, #20]	; (8008b34 <_fflush_r+0x70>)
 8008b1e:	429c      	cmp	r4, r3
 8008b20:	d101      	bne.n	8008b26 <_fflush_r+0x62>
 8008b22:	68ac      	ldr	r4, [r5, #8]
 8008b24:	e7df      	b.n	8008ae6 <_fflush_r+0x22>
 8008b26:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <_fflush_r+0x74>)
 8008b28:	429c      	cmp	r4, r3
 8008b2a:	bf08      	it	eq
 8008b2c:	68ec      	ldreq	r4, [r5, #12]
 8008b2e:	e7da      	b.n	8008ae6 <_fflush_r+0x22>
 8008b30:	0800957c 	.word	0x0800957c
 8008b34:	0800959c 	.word	0x0800959c
 8008b38:	0800955c 	.word	0x0800955c

08008b3c <_lseek_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d07      	ldr	r5, [pc, #28]	; (8008b5c <_lseek_r+0x20>)
 8008b40:	4604      	mov	r4, r0
 8008b42:	4608      	mov	r0, r1
 8008b44:	4611      	mov	r1, r2
 8008b46:	2200      	movs	r2, #0
 8008b48:	602a      	str	r2, [r5, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f7f8 fa1e 	bl	8000f8c <_lseek>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_lseek_r+0x1e>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_lseek_r+0x1e>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	24004be4 	.word	0x24004be4

08008b60 <__malloc_lock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__malloc_lock+0x8>)
 8008b62:	f7ff bd84 	b.w	800866e <__retarget_lock_acquire_recursive>
 8008b66:	bf00      	nop
 8008b68:	24004bd8 	.word	0x24004bd8

08008b6c <__malloc_unlock>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	; (8008b74 <__malloc_unlock+0x8>)
 8008b6e:	f7ff bd7f 	b.w	8008670 <__retarget_lock_release_recursive>
 8008b72:	bf00      	nop
 8008b74:	24004bd8 	.word	0x24004bd8

08008b78 <_free_r>:
 8008b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d044      	beq.n	8008c08 <_free_r+0x90>
 8008b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b82:	9001      	str	r0, [sp, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f1a1 0404 	sub.w	r4, r1, #4
 8008b8a:	bfb8      	it	lt
 8008b8c:	18e4      	addlt	r4, r4, r3
 8008b8e:	f7ff ffe7 	bl	8008b60 <__malloc_lock>
 8008b92:	4a1e      	ldr	r2, [pc, #120]	; (8008c0c <_free_r+0x94>)
 8008b94:	9801      	ldr	r0, [sp, #4]
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	b933      	cbnz	r3, 8008ba8 <_free_r+0x30>
 8008b9a:	6063      	str	r3, [r4, #4]
 8008b9c:	6014      	str	r4, [r2, #0]
 8008b9e:	b003      	add	sp, #12
 8008ba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ba4:	f7ff bfe2 	b.w	8008b6c <__malloc_unlock>
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	d908      	bls.n	8008bbe <_free_r+0x46>
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	1961      	adds	r1, r4, r5
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf01      	itttt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	1949      	addeq	r1, r1, r5
 8008bba:	6021      	streq	r1, [r4, #0]
 8008bbc:	e7ed      	b.n	8008b9a <_free_r+0x22>
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	b10b      	cbz	r3, 8008bc8 <_free_r+0x50>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d9fa      	bls.n	8008bbe <_free_r+0x46>
 8008bc8:	6811      	ldr	r1, [r2, #0]
 8008bca:	1855      	adds	r5, r2, r1
 8008bcc:	42a5      	cmp	r5, r4
 8008bce:	d10b      	bne.n	8008be8 <_free_r+0x70>
 8008bd0:	6824      	ldr	r4, [r4, #0]
 8008bd2:	4421      	add	r1, r4
 8008bd4:	1854      	adds	r4, r2, r1
 8008bd6:	42a3      	cmp	r3, r4
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	d1e0      	bne.n	8008b9e <_free_r+0x26>
 8008bdc:	681c      	ldr	r4, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	6053      	str	r3, [r2, #4]
 8008be2:	4421      	add	r1, r4
 8008be4:	6011      	str	r1, [r2, #0]
 8008be6:	e7da      	b.n	8008b9e <_free_r+0x26>
 8008be8:	d902      	bls.n	8008bf0 <_free_r+0x78>
 8008bea:	230c      	movs	r3, #12
 8008bec:	6003      	str	r3, [r0, #0]
 8008bee:	e7d6      	b.n	8008b9e <_free_r+0x26>
 8008bf0:	6825      	ldr	r5, [r4, #0]
 8008bf2:	1961      	adds	r1, r4, r5
 8008bf4:	428b      	cmp	r3, r1
 8008bf6:	bf04      	itt	eq
 8008bf8:	6819      	ldreq	r1, [r3, #0]
 8008bfa:	685b      	ldreq	r3, [r3, #4]
 8008bfc:	6063      	str	r3, [r4, #4]
 8008bfe:	bf04      	itt	eq
 8008c00:	1949      	addeq	r1, r1, r5
 8008c02:	6021      	streq	r1, [r4, #0]
 8008c04:	6054      	str	r4, [r2, #4]
 8008c06:	e7ca      	b.n	8008b9e <_free_r+0x26>
 8008c08:	b003      	add	sp, #12
 8008c0a:	bd30      	pop	{r4, r5, pc}
 8008c0c:	24004bdc 	.word	0x24004bdc

08008c10 <__sfputc_r>:
 8008c10:	6893      	ldr	r3, [r2, #8]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	b410      	push	{r4}
 8008c18:	6093      	str	r3, [r2, #8]
 8008c1a:	da08      	bge.n	8008c2e <__sfputc_r+0x1e>
 8008c1c:	6994      	ldr	r4, [r2, #24]
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	db01      	blt.n	8008c26 <__sfputc_r+0x16>
 8008c22:	290a      	cmp	r1, #10
 8008c24:	d103      	bne.n	8008c2e <__sfputc_r+0x1e>
 8008c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2a:	f000 baf1 	b.w	8009210 <__swbuf_r>
 8008c2e:	6813      	ldr	r3, [r2, #0]
 8008c30:	1c58      	adds	r0, r3, #1
 8008c32:	6010      	str	r0, [r2, #0]
 8008c34:	7019      	strb	r1, [r3, #0]
 8008c36:	4608      	mov	r0, r1
 8008c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <__sfputs_r>:
 8008c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c40:	4606      	mov	r6, r0
 8008c42:	460f      	mov	r7, r1
 8008c44:	4614      	mov	r4, r2
 8008c46:	18d5      	adds	r5, r2, r3
 8008c48:	42ac      	cmp	r4, r5
 8008c4a:	d101      	bne.n	8008c50 <__sfputs_r+0x12>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	e007      	b.n	8008c60 <__sfputs_r+0x22>
 8008c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c54:	463a      	mov	r2, r7
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7ff ffda 	bl	8008c10 <__sfputc_r>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d1f3      	bne.n	8008c48 <__sfputs_r+0xa>
 8008c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c64 <_vfiprintf_r>:
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	460d      	mov	r5, r1
 8008c6a:	b09d      	sub	sp, #116	; 0x74
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	4698      	mov	r8, r3
 8008c70:	4606      	mov	r6, r0
 8008c72:	b118      	cbz	r0, 8008c7c <_vfiprintf_r+0x18>
 8008c74:	6983      	ldr	r3, [r0, #24]
 8008c76:	b90b      	cbnz	r3, 8008c7c <_vfiprintf_r+0x18>
 8008c78:	f7ff fc36 	bl	80084e8 <__sinit>
 8008c7c:	4b89      	ldr	r3, [pc, #548]	; (8008ea4 <_vfiprintf_r+0x240>)
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	d11b      	bne.n	8008cba <_vfiprintf_r+0x56>
 8008c82:	6875      	ldr	r5, [r6, #4]
 8008c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c86:	07d9      	lsls	r1, r3, #31
 8008c88:	d405      	bmi.n	8008c96 <_vfiprintf_r+0x32>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	059a      	lsls	r2, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_vfiprintf_r+0x32>
 8008c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c92:	f7ff fcec 	bl	800866e <__retarget_lock_acquire_recursive>
 8008c96:	89ab      	ldrh	r3, [r5, #12]
 8008c98:	071b      	lsls	r3, r3, #28
 8008c9a:	d501      	bpl.n	8008ca0 <_vfiprintf_r+0x3c>
 8008c9c:	692b      	ldr	r3, [r5, #16]
 8008c9e:	b9eb      	cbnz	r3, 8008cdc <_vfiprintf_r+0x78>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f000 fb06 	bl	80092b4 <__swsetup_r>
 8008ca8:	b1c0      	cbz	r0, 8008cdc <_vfiprintf_r+0x78>
 8008caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cac:	07dc      	lsls	r4, r3, #31
 8008cae:	d50e      	bpl.n	8008cce <_vfiprintf_r+0x6a>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	b01d      	add	sp, #116	; 0x74
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cba:	4b7b      	ldr	r3, [pc, #492]	; (8008ea8 <_vfiprintf_r+0x244>)
 8008cbc:	429d      	cmp	r5, r3
 8008cbe:	d101      	bne.n	8008cc4 <_vfiprintf_r+0x60>
 8008cc0:	68b5      	ldr	r5, [r6, #8]
 8008cc2:	e7df      	b.n	8008c84 <_vfiprintf_r+0x20>
 8008cc4:	4b79      	ldr	r3, [pc, #484]	; (8008eac <_vfiprintf_r+0x248>)
 8008cc6:	429d      	cmp	r5, r3
 8008cc8:	bf08      	it	eq
 8008cca:	68f5      	ldreq	r5, [r6, #12]
 8008ccc:	e7da      	b.n	8008c84 <_vfiprintf_r+0x20>
 8008cce:	89ab      	ldrh	r3, [r5, #12]
 8008cd0:	0598      	lsls	r0, r3, #22
 8008cd2:	d4ed      	bmi.n	8008cb0 <_vfiprintf_r+0x4c>
 8008cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cd6:	f7ff fccb 	bl	8008670 <__retarget_lock_release_recursive>
 8008cda:	e7e9      	b.n	8008cb0 <_vfiprintf_r+0x4c>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cea:	2330      	movs	r3, #48	; 0x30
 8008cec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008eb0 <_vfiprintf_r+0x24c>
 8008cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cf4:	f04f 0901 	mov.w	r9, #1
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	469a      	mov	sl, r3
 8008cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d00:	b10a      	cbz	r2, 8008d06 <_vfiprintf_r+0xa2>
 8008d02:	2a25      	cmp	r2, #37	; 0x25
 8008d04:	d1f9      	bne.n	8008cfa <_vfiprintf_r+0x96>
 8008d06:	ebba 0b04 	subs.w	fp, sl, r4
 8008d0a:	d00b      	beq.n	8008d24 <_vfiprintf_r+0xc0>
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7ff ff93 	bl	8008c3e <__sfputs_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f000 80aa 	beq.w	8008e72 <_vfiprintf_r+0x20e>
 8008d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d20:	445a      	add	r2, fp
 8008d22:	9209      	str	r2, [sp, #36]	; 0x24
 8008d24:	f89a 3000 	ldrb.w	r3, [sl]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 80a2 	beq.w	8008e72 <_vfiprintf_r+0x20e>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295
 8008d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d38:	f10a 0a01 	add.w	sl, sl, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	9307      	str	r3, [sp, #28]
 8008d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d44:	931a      	str	r3, [sp, #104]	; 0x68
 8008d46:	4654      	mov	r4, sl
 8008d48:	2205      	movs	r2, #5
 8008d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4e:	4858      	ldr	r0, [pc, #352]	; (8008eb0 <_vfiprintf_r+0x24c>)
 8008d50:	f7f7 fac6 	bl	80002e0 <memchr>
 8008d54:	9a04      	ldr	r2, [sp, #16]
 8008d56:	b9d8      	cbnz	r0, 8008d90 <_vfiprintf_r+0x12c>
 8008d58:	06d1      	lsls	r1, r2, #27
 8008d5a:	bf44      	itt	mi
 8008d5c:	2320      	movmi	r3, #32
 8008d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d62:	0713      	lsls	r3, r2, #28
 8008d64:	bf44      	itt	mi
 8008d66:	232b      	movmi	r3, #43	; 0x2b
 8008d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d70:	2b2a      	cmp	r3, #42	; 0x2a
 8008d72:	d015      	beq.n	8008da0 <_vfiprintf_r+0x13c>
 8008d74:	9a07      	ldr	r2, [sp, #28]
 8008d76:	4654      	mov	r4, sl
 8008d78:	2000      	movs	r0, #0
 8008d7a:	f04f 0c0a 	mov.w	ip, #10
 8008d7e:	4621      	mov	r1, r4
 8008d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d84:	3b30      	subs	r3, #48	; 0x30
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d94e      	bls.n	8008e28 <_vfiprintf_r+0x1c4>
 8008d8a:	b1b0      	cbz	r0, 8008dba <_vfiprintf_r+0x156>
 8008d8c:	9207      	str	r2, [sp, #28]
 8008d8e:	e014      	b.n	8008dba <_vfiprintf_r+0x156>
 8008d90:	eba0 0308 	sub.w	r3, r0, r8
 8008d94:	fa09 f303 	lsl.w	r3, r9, r3
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	46a2      	mov	sl, r4
 8008d9e:	e7d2      	b.n	8008d46 <_vfiprintf_r+0xe2>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	1d19      	adds	r1, r3, #4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	9103      	str	r1, [sp, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bfbb      	ittet	lt
 8008dac:	425b      	neglt	r3, r3
 8008dae:	f042 0202 	orrlt.w	r2, r2, #2
 8008db2:	9307      	strge	r3, [sp, #28]
 8008db4:	9307      	strlt	r3, [sp, #28]
 8008db6:	bfb8      	it	lt
 8008db8:	9204      	strlt	r2, [sp, #16]
 8008dba:	7823      	ldrb	r3, [r4, #0]
 8008dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008dbe:	d10c      	bne.n	8008dda <_vfiprintf_r+0x176>
 8008dc0:	7863      	ldrb	r3, [r4, #1]
 8008dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc4:	d135      	bne.n	8008e32 <_vfiprintf_r+0x1ce>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	1d1a      	adds	r2, r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	9203      	str	r2, [sp, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfb8      	it	lt
 8008dd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dd6:	3402      	adds	r4, #2
 8008dd8:	9305      	str	r3, [sp, #20]
 8008dda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008ec0 <_vfiprintf_r+0x25c>
 8008dde:	7821      	ldrb	r1, [r4, #0]
 8008de0:	2203      	movs	r2, #3
 8008de2:	4650      	mov	r0, sl
 8008de4:	f7f7 fa7c 	bl	80002e0 <memchr>
 8008de8:	b140      	cbz	r0, 8008dfc <_vfiprintf_r+0x198>
 8008dea:	2340      	movs	r3, #64	; 0x40
 8008dec:	eba0 000a 	sub.w	r0, r0, sl
 8008df0:	fa03 f000 	lsl.w	r0, r3, r0
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	4303      	orrs	r3, r0
 8008df8:	3401      	adds	r4, #1
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e00:	482c      	ldr	r0, [pc, #176]	; (8008eb4 <_vfiprintf_r+0x250>)
 8008e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e06:	2206      	movs	r2, #6
 8008e08:	f7f7 fa6a 	bl	80002e0 <memchr>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d03f      	beq.n	8008e90 <_vfiprintf_r+0x22c>
 8008e10:	4b29      	ldr	r3, [pc, #164]	; (8008eb8 <_vfiprintf_r+0x254>)
 8008e12:	bb1b      	cbnz	r3, 8008e5c <_vfiprintf_r+0x1f8>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	3307      	adds	r3, #7
 8008e18:	f023 0307 	bic.w	r3, r3, #7
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	9303      	str	r3, [sp, #12]
 8008e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e22:	443b      	add	r3, r7
 8008e24:	9309      	str	r3, [sp, #36]	; 0x24
 8008e26:	e767      	b.n	8008cf8 <_vfiprintf_r+0x94>
 8008e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	2001      	movs	r0, #1
 8008e30:	e7a5      	b.n	8008d7e <_vfiprintf_r+0x11a>
 8008e32:	2300      	movs	r3, #0
 8008e34:	3401      	adds	r4, #1
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f04f 0c0a 	mov.w	ip, #10
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e44:	3a30      	subs	r2, #48	; 0x30
 8008e46:	2a09      	cmp	r2, #9
 8008e48:	d903      	bls.n	8008e52 <_vfiprintf_r+0x1ee>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0c5      	beq.n	8008dda <_vfiprintf_r+0x176>
 8008e4e:	9105      	str	r1, [sp, #20]
 8008e50:	e7c3      	b.n	8008dda <_vfiprintf_r+0x176>
 8008e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e56:	4604      	mov	r4, r0
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e7f0      	b.n	8008e3e <_vfiprintf_r+0x1da>
 8008e5c:	ab03      	add	r3, sp, #12
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	462a      	mov	r2, r5
 8008e62:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <_vfiprintf_r+0x258>)
 8008e64:	a904      	add	r1, sp, #16
 8008e66:	4630      	mov	r0, r6
 8008e68:	f3af 8000 	nop.w
 8008e6c:	4607      	mov	r7, r0
 8008e6e:	1c78      	adds	r0, r7, #1
 8008e70:	d1d6      	bne.n	8008e20 <_vfiprintf_r+0x1bc>
 8008e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e74:	07d9      	lsls	r1, r3, #31
 8008e76:	d405      	bmi.n	8008e84 <_vfiprintf_r+0x220>
 8008e78:	89ab      	ldrh	r3, [r5, #12]
 8008e7a:	059a      	lsls	r2, r3, #22
 8008e7c:	d402      	bmi.n	8008e84 <_vfiprintf_r+0x220>
 8008e7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e80:	f7ff fbf6 	bl	8008670 <__retarget_lock_release_recursive>
 8008e84:	89ab      	ldrh	r3, [r5, #12]
 8008e86:	065b      	lsls	r3, r3, #25
 8008e88:	f53f af12 	bmi.w	8008cb0 <_vfiprintf_r+0x4c>
 8008e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e8e:	e711      	b.n	8008cb4 <_vfiprintf_r+0x50>
 8008e90:	ab03      	add	r3, sp, #12
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	462a      	mov	r2, r5
 8008e96:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <_vfiprintf_r+0x258>)
 8008e98:	a904      	add	r1, sp, #16
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f000 f880 	bl	8008fa0 <_printf_i>
 8008ea0:	e7e4      	b.n	8008e6c <_vfiprintf_r+0x208>
 8008ea2:	bf00      	nop
 8008ea4:	0800957c 	.word	0x0800957c
 8008ea8:	0800959c 	.word	0x0800959c
 8008eac:	0800955c 	.word	0x0800955c
 8008eb0:	080095c0 	.word	0x080095c0
 8008eb4:	080095ca 	.word	0x080095ca
 8008eb8:	00000000 	.word	0x00000000
 8008ebc:	08008c3f 	.word	0x08008c3f
 8008ec0:	080095c6 	.word	0x080095c6

08008ec4 <_printf_common>:
 8008ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	4616      	mov	r6, r2
 8008eca:	4699      	mov	r9, r3
 8008ecc:	688a      	ldr	r2, [r1, #8]
 8008ece:	690b      	ldr	r3, [r1, #16]
 8008ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bfb8      	it	lt
 8008ed8:	4613      	movlt	r3, r2
 8008eda:	6033      	str	r3, [r6, #0]
 8008edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ee0:	4607      	mov	r7, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	b10a      	cbz	r2, 8008eea <_printf_common+0x26>
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	6033      	str	r3, [r6, #0]
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	0699      	lsls	r1, r3, #26
 8008eee:	bf42      	ittt	mi
 8008ef0:	6833      	ldrmi	r3, [r6, #0]
 8008ef2:	3302      	addmi	r3, #2
 8008ef4:	6033      	strmi	r3, [r6, #0]
 8008ef6:	6825      	ldr	r5, [r4, #0]
 8008ef8:	f015 0506 	ands.w	r5, r5, #6
 8008efc:	d106      	bne.n	8008f0c <_printf_common+0x48>
 8008efe:	f104 0a19 	add.w	sl, r4, #25
 8008f02:	68e3      	ldr	r3, [r4, #12]
 8008f04:	6832      	ldr	r2, [r6, #0]
 8008f06:	1a9b      	subs	r3, r3, r2
 8008f08:	42ab      	cmp	r3, r5
 8008f0a:	dc26      	bgt.n	8008f5a <_printf_common+0x96>
 8008f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f10:	1e13      	subs	r3, r2, #0
 8008f12:	6822      	ldr	r2, [r4, #0]
 8008f14:	bf18      	it	ne
 8008f16:	2301      	movne	r3, #1
 8008f18:	0692      	lsls	r2, r2, #26
 8008f1a:	d42b      	bmi.n	8008f74 <_printf_common+0xb0>
 8008f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f20:	4649      	mov	r1, r9
 8008f22:	4638      	mov	r0, r7
 8008f24:	47c0      	blx	r8
 8008f26:	3001      	adds	r0, #1
 8008f28:	d01e      	beq.n	8008f68 <_printf_common+0xa4>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	68e5      	ldr	r5, [r4, #12]
 8008f2e:	6832      	ldr	r2, [r6, #0]
 8008f30:	f003 0306 	and.w	r3, r3, #6
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	bf08      	it	eq
 8008f38:	1aad      	subeq	r5, r5, r2
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	6922      	ldr	r2, [r4, #16]
 8008f3e:	bf0c      	ite	eq
 8008f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f44:	2500      	movne	r5, #0
 8008f46:	4293      	cmp	r3, r2
 8008f48:	bfc4      	itt	gt
 8008f4a:	1a9b      	subgt	r3, r3, r2
 8008f4c:	18ed      	addgt	r5, r5, r3
 8008f4e:	2600      	movs	r6, #0
 8008f50:	341a      	adds	r4, #26
 8008f52:	42b5      	cmp	r5, r6
 8008f54:	d11a      	bne.n	8008f8c <_printf_common+0xc8>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e008      	b.n	8008f6c <_printf_common+0xa8>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	4649      	mov	r1, r9
 8008f60:	4638      	mov	r0, r7
 8008f62:	47c0      	blx	r8
 8008f64:	3001      	adds	r0, #1
 8008f66:	d103      	bne.n	8008f70 <_printf_common+0xac>
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f70:	3501      	adds	r5, #1
 8008f72:	e7c6      	b.n	8008f02 <_printf_common+0x3e>
 8008f74:	18e1      	adds	r1, r4, r3
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	2030      	movs	r0, #48	; 0x30
 8008f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f7e:	4422      	add	r2, r4
 8008f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f88:	3302      	adds	r3, #2
 8008f8a:	e7c7      	b.n	8008f1c <_printf_common+0x58>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4622      	mov	r2, r4
 8008f90:	4649      	mov	r1, r9
 8008f92:	4638      	mov	r0, r7
 8008f94:	47c0      	blx	r8
 8008f96:	3001      	adds	r0, #1
 8008f98:	d0e6      	beq.n	8008f68 <_printf_common+0xa4>
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	e7d9      	b.n	8008f52 <_printf_common+0x8e>
	...

08008fa0 <_printf_i>:
 8008fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	7e0f      	ldrb	r7, [r1, #24]
 8008fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fa8:	2f78      	cmp	r7, #120	; 0x78
 8008faa:	4691      	mov	r9, r2
 8008fac:	4680      	mov	r8, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	469a      	mov	sl, r3
 8008fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fb6:	d807      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fb8:	2f62      	cmp	r7, #98	; 0x62
 8008fba:	d80a      	bhi.n	8008fd2 <_printf_i+0x32>
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	f000 80d8 	beq.w	8009172 <_printf_i+0x1d2>
 8008fc2:	2f58      	cmp	r7, #88	; 0x58
 8008fc4:	f000 80a3 	beq.w	800910e <_printf_i+0x16e>
 8008fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fd0:	e03a      	b.n	8009048 <_printf_i+0xa8>
 8008fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fd6:	2b15      	cmp	r3, #21
 8008fd8:	d8f6      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fda:	a101      	add	r1, pc, #4	; (adr r1, 8008fe0 <_printf_i+0x40>)
 8008fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fe0:	08009039 	.word	0x08009039
 8008fe4:	0800904d 	.word	0x0800904d
 8008fe8:	08008fc9 	.word	0x08008fc9
 8008fec:	08008fc9 	.word	0x08008fc9
 8008ff0:	08008fc9 	.word	0x08008fc9
 8008ff4:	08008fc9 	.word	0x08008fc9
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	08008fc9 	.word	0x08008fc9
 8009000:	08008fc9 	.word	0x08008fc9
 8009004:	08008fc9 	.word	0x08008fc9
 8009008:	08008fc9 	.word	0x08008fc9
 800900c:	08009159 	.word	0x08009159
 8009010:	0800907d 	.word	0x0800907d
 8009014:	0800913b 	.word	0x0800913b
 8009018:	08008fc9 	.word	0x08008fc9
 800901c:	08008fc9 	.word	0x08008fc9
 8009020:	0800917b 	.word	0x0800917b
 8009024:	08008fc9 	.word	0x08008fc9
 8009028:	0800907d 	.word	0x0800907d
 800902c:	08008fc9 	.word	0x08008fc9
 8009030:	08008fc9 	.word	0x08008fc9
 8009034:	08009143 	.word	0x08009143
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	1d1a      	adds	r2, r3, #4
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	602a      	str	r2, [r5, #0]
 8009040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009048:	2301      	movs	r3, #1
 800904a:	e0a3      	b.n	8009194 <_printf_i+0x1f4>
 800904c:	6820      	ldr	r0, [r4, #0]
 800904e:	6829      	ldr	r1, [r5, #0]
 8009050:	0606      	lsls	r6, r0, #24
 8009052:	f101 0304 	add.w	r3, r1, #4
 8009056:	d50a      	bpl.n	800906e <_printf_i+0xce>
 8009058:	680e      	ldr	r6, [r1, #0]
 800905a:	602b      	str	r3, [r5, #0]
 800905c:	2e00      	cmp	r6, #0
 800905e:	da03      	bge.n	8009068 <_printf_i+0xc8>
 8009060:	232d      	movs	r3, #45	; 0x2d
 8009062:	4276      	negs	r6, r6
 8009064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009068:	485e      	ldr	r0, [pc, #376]	; (80091e4 <_printf_i+0x244>)
 800906a:	230a      	movs	r3, #10
 800906c:	e019      	b.n	80090a2 <_printf_i+0x102>
 800906e:	680e      	ldr	r6, [r1, #0]
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009076:	bf18      	it	ne
 8009078:	b236      	sxthne	r6, r6
 800907a:	e7ef      	b.n	800905c <_printf_i+0xbc>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	1d19      	adds	r1, r3, #4
 8009082:	6029      	str	r1, [r5, #0]
 8009084:	0601      	lsls	r1, r0, #24
 8009086:	d501      	bpl.n	800908c <_printf_i+0xec>
 8009088:	681e      	ldr	r6, [r3, #0]
 800908a:	e002      	b.n	8009092 <_printf_i+0xf2>
 800908c:	0646      	lsls	r6, r0, #25
 800908e:	d5fb      	bpl.n	8009088 <_printf_i+0xe8>
 8009090:	881e      	ldrh	r6, [r3, #0]
 8009092:	4854      	ldr	r0, [pc, #336]	; (80091e4 <_printf_i+0x244>)
 8009094:	2f6f      	cmp	r7, #111	; 0x6f
 8009096:	bf0c      	ite	eq
 8009098:	2308      	moveq	r3, #8
 800909a:	230a      	movne	r3, #10
 800909c:	2100      	movs	r1, #0
 800909e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090a2:	6865      	ldr	r5, [r4, #4]
 80090a4:	60a5      	str	r5, [r4, #8]
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	bfa2      	ittt	ge
 80090aa:	6821      	ldrge	r1, [r4, #0]
 80090ac:	f021 0104 	bicge.w	r1, r1, #4
 80090b0:	6021      	strge	r1, [r4, #0]
 80090b2:	b90e      	cbnz	r6, 80090b8 <_printf_i+0x118>
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	d04d      	beq.n	8009154 <_printf_i+0x1b4>
 80090b8:	4615      	mov	r5, r2
 80090ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80090be:	fb03 6711 	mls	r7, r3, r1, r6
 80090c2:	5dc7      	ldrb	r7, [r0, r7]
 80090c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090c8:	4637      	mov	r7, r6
 80090ca:	42bb      	cmp	r3, r7
 80090cc:	460e      	mov	r6, r1
 80090ce:	d9f4      	bls.n	80090ba <_printf_i+0x11a>
 80090d0:	2b08      	cmp	r3, #8
 80090d2:	d10b      	bne.n	80090ec <_printf_i+0x14c>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	07de      	lsls	r6, r3, #31
 80090d8:	d508      	bpl.n	80090ec <_printf_i+0x14c>
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	6861      	ldr	r1, [r4, #4]
 80090de:	4299      	cmp	r1, r3
 80090e0:	bfde      	ittt	le
 80090e2:	2330      	movle	r3, #48	; 0x30
 80090e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090ec:	1b52      	subs	r2, r2, r5
 80090ee:	6122      	str	r2, [r4, #16]
 80090f0:	f8cd a000 	str.w	sl, [sp]
 80090f4:	464b      	mov	r3, r9
 80090f6:	aa03      	add	r2, sp, #12
 80090f8:	4621      	mov	r1, r4
 80090fa:	4640      	mov	r0, r8
 80090fc:	f7ff fee2 	bl	8008ec4 <_printf_common>
 8009100:	3001      	adds	r0, #1
 8009102:	d14c      	bne.n	800919e <_printf_i+0x1fe>
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	b004      	add	sp, #16
 800910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910e:	4835      	ldr	r0, [pc, #212]	; (80091e4 <_printf_i+0x244>)
 8009110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009114:	6829      	ldr	r1, [r5, #0]
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	f851 6b04 	ldr.w	r6, [r1], #4
 800911c:	6029      	str	r1, [r5, #0]
 800911e:	061d      	lsls	r5, r3, #24
 8009120:	d514      	bpl.n	800914c <_printf_i+0x1ac>
 8009122:	07df      	lsls	r7, r3, #31
 8009124:	bf44      	itt	mi
 8009126:	f043 0320 	orrmi.w	r3, r3, #32
 800912a:	6023      	strmi	r3, [r4, #0]
 800912c:	b91e      	cbnz	r6, 8009136 <_printf_i+0x196>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	f023 0320 	bic.w	r3, r3, #32
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	2310      	movs	r3, #16
 8009138:	e7b0      	b.n	800909c <_printf_i+0xfc>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	f043 0320 	orr.w	r3, r3, #32
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	2378      	movs	r3, #120	; 0x78
 8009144:	4828      	ldr	r0, [pc, #160]	; (80091e8 <_printf_i+0x248>)
 8009146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800914a:	e7e3      	b.n	8009114 <_printf_i+0x174>
 800914c:	0659      	lsls	r1, r3, #25
 800914e:	bf48      	it	mi
 8009150:	b2b6      	uxthmi	r6, r6
 8009152:	e7e6      	b.n	8009122 <_printf_i+0x182>
 8009154:	4615      	mov	r5, r2
 8009156:	e7bb      	b.n	80090d0 <_printf_i+0x130>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	6826      	ldr	r6, [r4, #0]
 800915c:	6961      	ldr	r1, [r4, #20]
 800915e:	1d18      	adds	r0, r3, #4
 8009160:	6028      	str	r0, [r5, #0]
 8009162:	0635      	lsls	r5, r6, #24
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	d501      	bpl.n	800916c <_printf_i+0x1cc>
 8009168:	6019      	str	r1, [r3, #0]
 800916a:	e002      	b.n	8009172 <_printf_i+0x1d2>
 800916c:	0670      	lsls	r0, r6, #25
 800916e:	d5fb      	bpl.n	8009168 <_printf_i+0x1c8>
 8009170:	8019      	strh	r1, [r3, #0]
 8009172:	2300      	movs	r3, #0
 8009174:	6123      	str	r3, [r4, #16]
 8009176:	4615      	mov	r5, r2
 8009178:	e7ba      	b.n	80090f0 <_printf_i+0x150>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	1d1a      	adds	r2, r3, #4
 800917e:	602a      	str	r2, [r5, #0]
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	6862      	ldr	r2, [r4, #4]
 8009184:	2100      	movs	r1, #0
 8009186:	4628      	mov	r0, r5
 8009188:	f7f7 f8aa 	bl	80002e0 <memchr>
 800918c:	b108      	cbz	r0, 8009192 <_printf_i+0x1f2>
 800918e:	1b40      	subs	r0, r0, r5
 8009190:	6060      	str	r0, [r4, #4]
 8009192:	6863      	ldr	r3, [r4, #4]
 8009194:	6123      	str	r3, [r4, #16]
 8009196:	2300      	movs	r3, #0
 8009198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800919c:	e7a8      	b.n	80090f0 <_printf_i+0x150>
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	462a      	mov	r2, r5
 80091a2:	4649      	mov	r1, r9
 80091a4:	4640      	mov	r0, r8
 80091a6:	47d0      	blx	sl
 80091a8:	3001      	adds	r0, #1
 80091aa:	d0ab      	beq.n	8009104 <_printf_i+0x164>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	079b      	lsls	r3, r3, #30
 80091b0:	d413      	bmi.n	80091da <_printf_i+0x23a>
 80091b2:	68e0      	ldr	r0, [r4, #12]
 80091b4:	9b03      	ldr	r3, [sp, #12]
 80091b6:	4298      	cmp	r0, r3
 80091b8:	bfb8      	it	lt
 80091ba:	4618      	movlt	r0, r3
 80091bc:	e7a4      	b.n	8009108 <_printf_i+0x168>
 80091be:	2301      	movs	r3, #1
 80091c0:	4632      	mov	r2, r6
 80091c2:	4649      	mov	r1, r9
 80091c4:	4640      	mov	r0, r8
 80091c6:	47d0      	blx	sl
 80091c8:	3001      	adds	r0, #1
 80091ca:	d09b      	beq.n	8009104 <_printf_i+0x164>
 80091cc:	3501      	adds	r5, #1
 80091ce:	68e3      	ldr	r3, [r4, #12]
 80091d0:	9903      	ldr	r1, [sp, #12]
 80091d2:	1a5b      	subs	r3, r3, r1
 80091d4:	42ab      	cmp	r3, r5
 80091d6:	dcf2      	bgt.n	80091be <_printf_i+0x21e>
 80091d8:	e7eb      	b.n	80091b2 <_printf_i+0x212>
 80091da:	2500      	movs	r5, #0
 80091dc:	f104 0619 	add.w	r6, r4, #25
 80091e0:	e7f5      	b.n	80091ce <_printf_i+0x22e>
 80091e2:	bf00      	nop
 80091e4:	080095d1 	.word	0x080095d1
 80091e8:	080095e2 	.word	0x080095e2

080091ec <_read_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	4d07      	ldr	r5, [pc, #28]	; (800920c <_read_r+0x20>)
 80091f0:	4604      	mov	r4, r0
 80091f2:	4608      	mov	r0, r1
 80091f4:	4611      	mov	r1, r2
 80091f6:	2200      	movs	r2, #0
 80091f8:	602a      	str	r2, [r5, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	f7f7 fe66 	bl	8000ecc <_read>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_read_r+0x1e>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_read_r+0x1e>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	24004be4 	.word	0x24004be4

08009210 <__swbuf_r>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	460e      	mov	r6, r1
 8009214:	4614      	mov	r4, r2
 8009216:	4605      	mov	r5, r0
 8009218:	b118      	cbz	r0, 8009222 <__swbuf_r+0x12>
 800921a:	6983      	ldr	r3, [r0, #24]
 800921c:	b90b      	cbnz	r3, 8009222 <__swbuf_r+0x12>
 800921e:	f7ff f963 	bl	80084e8 <__sinit>
 8009222:	4b21      	ldr	r3, [pc, #132]	; (80092a8 <__swbuf_r+0x98>)
 8009224:	429c      	cmp	r4, r3
 8009226:	d12b      	bne.n	8009280 <__swbuf_r+0x70>
 8009228:	686c      	ldr	r4, [r5, #4]
 800922a:	69a3      	ldr	r3, [r4, #24]
 800922c:	60a3      	str	r3, [r4, #8]
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	071a      	lsls	r2, r3, #28
 8009232:	d52f      	bpl.n	8009294 <__swbuf_r+0x84>
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	b36b      	cbz	r3, 8009294 <__swbuf_r+0x84>
 8009238:	6923      	ldr	r3, [r4, #16]
 800923a:	6820      	ldr	r0, [r4, #0]
 800923c:	1ac0      	subs	r0, r0, r3
 800923e:	6963      	ldr	r3, [r4, #20]
 8009240:	b2f6      	uxtb	r6, r6
 8009242:	4283      	cmp	r3, r0
 8009244:	4637      	mov	r7, r6
 8009246:	dc04      	bgt.n	8009252 <__swbuf_r+0x42>
 8009248:	4621      	mov	r1, r4
 800924a:	4628      	mov	r0, r5
 800924c:	f7ff fc3a 	bl	8008ac4 <_fflush_r>
 8009250:	bb30      	cbnz	r0, 80092a0 <__swbuf_r+0x90>
 8009252:	68a3      	ldr	r3, [r4, #8]
 8009254:	3b01      	subs	r3, #1
 8009256:	60a3      	str	r3, [r4, #8]
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	6022      	str	r2, [r4, #0]
 800925e:	701e      	strb	r6, [r3, #0]
 8009260:	6963      	ldr	r3, [r4, #20]
 8009262:	3001      	adds	r0, #1
 8009264:	4283      	cmp	r3, r0
 8009266:	d004      	beq.n	8009272 <__swbuf_r+0x62>
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	07db      	lsls	r3, r3, #31
 800926c:	d506      	bpl.n	800927c <__swbuf_r+0x6c>
 800926e:	2e0a      	cmp	r6, #10
 8009270:	d104      	bne.n	800927c <__swbuf_r+0x6c>
 8009272:	4621      	mov	r1, r4
 8009274:	4628      	mov	r0, r5
 8009276:	f7ff fc25 	bl	8008ac4 <_fflush_r>
 800927a:	b988      	cbnz	r0, 80092a0 <__swbuf_r+0x90>
 800927c:	4638      	mov	r0, r7
 800927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009280:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <__swbuf_r+0x9c>)
 8009282:	429c      	cmp	r4, r3
 8009284:	d101      	bne.n	800928a <__swbuf_r+0x7a>
 8009286:	68ac      	ldr	r4, [r5, #8]
 8009288:	e7cf      	b.n	800922a <__swbuf_r+0x1a>
 800928a:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <__swbuf_r+0xa0>)
 800928c:	429c      	cmp	r4, r3
 800928e:	bf08      	it	eq
 8009290:	68ec      	ldreq	r4, [r5, #12]
 8009292:	e7ca      	b.n	800922a <__swbuf_r+0x1a>
 8009294:	4621      	mov	r1, r4
 8009296:	4628      	mov	r0, r5
 8009298:	f000 f80c 	bl	80092b4 <__swsetup_r>
 800929c:	2800      	cmp	r0, #0
 800929e:	d0cb      	beq.n	8009238 <__swbuf_r+0x28>
 80092a0:	f04f 37ff 	mov.w	r7, #4294967295
 80092a4:	e7ea      	b.n	800927c <__swbuf_r+0x6c>
 80092a6:	bf00      	nop
 80092a8:	0800957c 	.word	0x0800957c
 80092ac:	0800959c 	.word	0x0800959c
 80092b0:	0800955c 	.word	0x0800955c

080092b4 <__swsetup_r>:
 80092b4:	4b32      	ldr	r3, [pc, #200]	; (8009380 <__swsetup_r+0xcc>)
 80092b6:	b570      	push	{r4, r5, r6, lr}
 80092b8:	681d      	ldr	r5, [r3, #0]
 80092ba:	4606      	mov	r6, r0
 80092bc:	460c      	mov	r4, r1
 80092be:	b125      	cbz	r5, 80092ca <__swsetup_r+0x16>
 80092c0:	69ab      	ldr	r3, [r5, #24]
 80092c2:	b913      	cbnz	r3, 80092ca <__swsetup_r+0x16>
 80092c4:	4628      	mov	r0, r5
 80092c6:	f7ff f90f 	bl	80084e8 <__sinit>
 80092ca:	4b2e      	ldr	r3, [pc, #184]	; (8009384 <__swsetup_r+0xd0>)
 80092cc:	429c      	cmp	r4, r3
 80092ce:	d10f      	bne.n	80092f0 <__swsetup_r+0x3c>
 80092d0:	686c      	ldr	r4, [r5, #4]
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092d8:	0719      	lsls	r1, r3, #28
 80092da:	d42c      	bmi.n	8009336 <__swsetup_r+0x82>
 80092dc:	06dd      	lsls	r5, r3, #27
 80092de:	d411      	bmi.n	8009304 <__swsetup_r+0x50>
 80092e0:	2309      	movs	r3, #9
 80092e2:	6033      	str	r3, [r6, #0]
 80092e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	f04f 30ff 	mov.w	r0, #4294967295
 80092ee:	e03e      	b.n	800936e <__swsetup_r+0xba>
 80092f0:	4b25      	ldr	r3, [pc, #148]	; (8009388 <__swsetup_r+0xd4>)
 80092f2:	429c      	cmp	r4, r3
 80092f4:	d101      	bne.n	80092fa <__swsetup_r+0x46>
 80092f6:	68ac      	ldr	r4, [r5, #8]
 80092f8:	e7eb      	b.n	80092d2 <__swsetup_r+0x1e>
 80092fa:	4b24      	ldr	r3, [pc, #144]	; (800938c <__swsetup_r+0xd8>)
 80092fc:	429c      	cmp	r4, r3
 80092fe:	bf08      	it	eq
 8009300:	68ec      	ldreq	r4, [r5, #12]
 8009302:	e7e6      	b.n	80092d2 <__swsetup_r+0x1e>
 8009304:	0758      	lsls	r0, r3, #29
 8009306:	d512      	bpl.n	800932e <__swsetup_r+0x7a>
 8009308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800930a:	b141      	cbz	r1, 800931e <__swsetup_r+0x6a>
 800930c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009310:	4299      	cmp	r1, r3
 8009312:	d002      	beq.n	800931a <__swsetup_r+0x66>
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff fc2f 	bl	8008b78 <_free_r>
 800931a:	2300      	movs	r3, #0
 800931c:	6363      	str	r3, [r4, #52]	; 0x34
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	2300      	movs	r3, #0
 8009328:	6063      	str	r3, [r4, #4]
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	f043 0308 	orr.w	r3, r3, #8
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	b94b      	cbnz	r3, 800934e <__swsetup_r+0x9a>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009344:	d003      	beq.n	800934e <__swsetup_r+0x9a>
 8009346:	4621      	mov	r1, r4
 8009348:	4630      	mov	r0, r6
 800934a:	f000 f847 	bl	80093dc <__smakebuf_r>
 800934e:	89a0      	ldrh	r0, [r4, #12]
 8009350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009354:	f010 0301 	ands.w	r3, r0, #1
 8009358:	d00a      	beq.n	8009370 <__swsetup_r+0xbc>
 800935a:	2300      	movs	r3, #0
 800935c:	60a3      	str	r3, [r4, #8]
 800935e:	6963      	ldr	r3, [r4, #20]
 8009360:	425b      	negs	r3, r3
 8009362:	61a3      	str	r3, [r4, #24]
 8009364:	6923      	ldr	r3, [r4, #16]
 8009366:	b943      	cbnz	r3, 800937a <__swsetup_r+0xc6>
 8009368:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800936c:	d1ba      	bne.n	80092e4 <__swsetup_r+0x30>
 800936e:	bd70      	pop	{r4, r5, r6, pc}
 8009370:	0781      	lsls	r1, r0, #30
 8009372:	bf58      	it	pl
 8009374:	6963      	ldrpl	r3, [r4, #20]
 8009376:	60a3      	str	r3, [r4, #8]
 8009378:	e7f4      	b.n	8009364 <__swsetup_r+0xb0>
 800937a:	2000      	movs	r0, #0
 800937c:	e7f7      	b.n	800936e <__swsetup_r+0xba>
 800937e:	bf00      	nop
 8009380:	24000014 	.word	0x24000014
 8009384:	0800957c 	.word	0x0800957c
 8009388:	0800959c 	.word	0x0800959c
 800938c:	0800955c 	.word	0x0800955c

08009390 <__swhatbuf_r>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	460e      	mov	r6, r1
 8009394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009398:	2900      	cmp	r1, #0
 800939a:	b096      	sub	sp, #88	; 0x58
 800939c:	4614      	mov	r4, r2
 800939e:	461d      	mov	r5, r3
 80093a0:	da08      	bge.n	80093b4 <__swhatbuf_r+0x24>
 80093a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	602a      	str	r2, [r5, #0]
 80093aa:	061a      	lsls	r2, r3, #24
 80093ac:	d410      	bmi.n	80093d0 <__swhatbuf_r+0x40>
 80093ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093b2:	e00e      	b.n	80093d2 <__swhatbuf_r+0x42>
 80093b4:	466a      	mov	r2, sp
 80093b6:	f000 f851 	bl	800945c <_fstat_r>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	dbf1      	blt.n	80093a2 <__swhatbuf_r+0x12>
 80093be:	9a01      	ldr	r2, [sp, #4]
 80093c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093c8:	425a      	negs	r2, r3
 80093ca:	415a      	adcs	r2, r3
 80093cc:	602a      	str	r2, [r5, #0]
 80093ce:	e7ee      	b.n	80093ae <__swhatbuf_r+0x1e>
 80093d0:	2340      	movs	r3, #64	; 0x40
 80093d2:	2000      	movs	r0, #0
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	b016      	add	sp, #88	; 0x58
 80093d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080093dc <__smakebuf_r>:
 80093dc:	898b      	ldrh	r3, [r1, #12]
 80093de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093e0:	079d      	lsls	r5, r3, #30
 80093e2:	4606      	mov	r6, r0
 80093e4:	460c      	mov	r4, r1
 80093e6:	d507      	bpl.n	80093f8 <__smakebuf_r+0x1c>
 80093e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	6123      	str	r3, [r4, #16]
 80093f0:	2301      	movs	r3, #1
 80093f2:	6163      	str	r3, [r4, #20]
 80093f4:	b002      	add	sp, #8
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	ab01      	add	r3, sp, #4
 80093fa:	466a      	mov	r2, sp
 80093fc:	f7ff ffc8 	bl	8009390 <__swhatbuf_r>
 8009400:	9900      	ldr	r1, [sp, #0]
 8009402:	4605      	mov	r5, r0
 8009404:	4630      	mov	r0, r6
 8009406:	f7ff f96b 	bl	80086e0 <_malloc_r>
 800940a:	b948      	cbnz	r0, 8009420 <__smakebuf_r+0x44>
 800940c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009410:	059a      	lsls	r2, r3, #22
 8009412:	d4ef      	bmi.n	80093f4 <__smakebuf_r+0x18>
 8009414:	f023 0303 	bic.w	r3, r3, #3
 8009418:	f043 0302 	orr.w	r3, r3, #2
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	e7e3      	b.n	80093e8 <__smakebuf_r+0xc>
 8009420:	4b0d      	ldr	r3, [pc, #52]	; (8009458 <__smakebuf_r+0x7c>)
 8009422:	62b3      	str	r3, [r6, #40]	; 0x28
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	6020      	str	r0, [r4, #0]
 8009428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942c:	81a3      	strh	r3, [r4, #12]
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	6163      	str	r3, [r4, #20]
 8009432:	9b01      	ldr	r3, [sp, #4]
 8009434:	6120      	str	r0, [r4, #16]
 8009436:	b15b      	cbz	r3, 8009450 <__smakebuf_r+0x74>
 8009438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800943c:	4630      	mov	r0, r6
 800943e:	f000 f81f 	bl	8009480 <_isatty_r>
 8009442:	b128      	cbz	r0, 8009450 <__smakebuf_r+0x74>
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	f023 0303 	bic.w	r3, r3, #3
 800944a:	f043 0301 	orr.w	r3, r3, #1
 800944e:	81a3      	strh	r3, [r4, #12]
 8009450:	89a0      	ldrh	r0, [r4, #12]
 8009452:	4305      	orrs	r5, r0
 8009454:	81a5      	strh	r5, [r4, #12]
 8009456:	e7cd      	b.n	80093f4 <__smakebuf_r+0x18>
 8009458:	08008481 	.word	0x08008481

0800945c <_fstat_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4d07      	ldr	r5, [pc, #28]	; (800947c <_fstat_r+0x20>)
 8009460:	2300      	movs	r3, #0
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	602b      	str	r3, [r5, #0]
 800946a:	f7f7 fd74 	bl	8000f56 <_fstat>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d102      	bne.n	8009478 <_fstat_r+0x1c>
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	b103      	cbz	r3, 8009478 <_fstat_r+0x1c>
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	bd38      	pop	{r3, r4, r5, pc}
 800947a:	bf00      	nop
 800947c:	24004be4 	.word	0x24004be4

08009480 <_isatty_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d06      	ldr	r5, [pc, #24]	; (800949c <_isatty_r+0x1c>)
 8009484:	2300      	movs	r3, #0
 8009486:	4604      	mov	r4, r0
 8009488:	4608      	mov	r0, r1
 800948a:	602b      	str	r3, [r5, #0]
 800948c:	f7f7 fd73 	bl	8000f76 <_isatty>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_isatty_r+0x1a>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_isatty_r+0x1a>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	24004be4 	.word	0x24004be4

080094a0 <_init>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr

080094ac <_fini>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr
