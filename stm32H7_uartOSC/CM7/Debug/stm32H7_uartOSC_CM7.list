
stm32H7_uartOSC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b98  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e68  08004e68  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e70  08004e70  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  24000010  08004e88  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000150  08004e88  00020150  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101e9  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc4  00000000  00000000  00030227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00031ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00032ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000390fd  00000000  00000000  00033528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e69b  00000000  00000000  0006c625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017a94e  00000000  00000000  0007acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f560e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c8c  00000000  00000000  001f5660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004e18 	.word	0x08004e18

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004e18 	.word	0x08004e18

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <main+0xb4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9db 	bl	8000aec <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fb23 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f843 	bl	80007c4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <main+0xb4>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <main+0xb4>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <main+0xb4>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fe7f 	bl	8001460 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fe95 	bl	8001494 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <main+0xb4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60fa      	str	r2, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f9ad 	bl	8000aec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f929 	bl	80009e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000796:	f000 f88f 	bl	80008b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f8d9 	bl	8000950 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg = 0X55;
 800079e:	2355      	movs	r3, #85	; 0x55
 80007a0:	72fb      	strb	r3, [r7, #11]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Transmit(&huart2, &msg, sizeof(msg), HAL_MAX_DELAY);
 80007a2:	f107 010b 	add.w	r1, r7, #11
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	2201      	movs	r2, #1
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <main+0xb8>)
 80007ae:	f003 fa51 	bl	8003c54 <HAL_UART_Transmit>
	HAL_Delay(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 fb76 	bl	8000ea4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, &msg, sizeof(msg), HAL_MAX_DELAY);
 80007b8:	e7f3      	b.n	80007a2 <main+0x9a>
 80007ba:	bf00      	nop
 80007bc:	58024400 	.word	0x58024400
 80007c0:	2400002c 	.word	0x2400002c

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	; 0x70
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	224c      	movs	r2, #76	; 0x4c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fb18 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2220      	movs	r2, #32
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fb12 	bl	8004e08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007e4:	2004      	movs	r0, #4
 80007e6:	f000 fe69 	bl	80014bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <SystemClock_Config+0xec>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <SystemClock_Config+0xec>)
 80007f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <SystemClock_Config+0xec>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <SystemClock_Config+0xf0>)
 8000806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000808:	4a2a      	ldr	r2, [pc, #168]	; (80008b4 <SystemClock_Config+0xf0>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <SystemClock_Config+0xf0>)
 8000812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <SystemClock_Config+0xec>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000830:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000842:	23f0      	movs	r3, #240	; 0xf0
 8000844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000852:	2308      	movs	r3, #8
 8000854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fe84 	bl	8001570 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800086e:	f000 f93d 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	; 0x3f
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087e:	2308      	movs	r3, #8
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2104      	movs	r1, #4
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fa97 	bl	8001dcc <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008a4:	f000 f922 	bl	8000aec <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3770      	adds	r7, #112	; 0x70
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024800 	.word	0x58024800
 80008b4:	58000400 	.word	0x58000400

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_USART2_UART_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART2_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x90>)
 8000902:	f003 f957 	bl	8003bb4 <HAL_UART_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f8ee 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_USART2_UART_Init+0x90>)
 8000914:	f004 f98a 	bl	8004c2c <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 f8e5 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x90>)
 8000926:	f004 f9bf 	bl	8004ca8 <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f8dc 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_USART2_UART_Init+0x90>)
 8000936:	f004 f940 	bl	8004bba <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f8d4 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2400002c 	.word	0x2400002c
 800094c:	40004400 	.word	0x40004400

08000950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_USART3_UART_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800095c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 800099a:	f003 f90b 	bl	8003bb4 <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f8a2 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ac:	f004 f93e 	bl	8004c2c <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f899 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009be:	f004 f973 	bl	8004ca8 <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f890 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f004 f8f4 	bl	8004bba <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f888 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240000bc 	.word	0x240000bc
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	4a36      	ldr	r2, [pc, #216]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_GPIO_Init+0xfc>)
 8000a9c:	f000 fcc6 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_GPIO_Init+0x100>)
 8000ab6:	f000 fb09 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aba:	f244 0301 	movw	r3, #16385	; 0x4001
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_GPIO_Init+0xfc>)
 8000ad4:	f000 fafa 	bl	80010cc <HAL_GPIO_Init>

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	58020400 	.word	0x58020400
 8000ae8:	58020800 	.word	0x58020800

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_MspInit+0x30>)
 8000b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x30>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x30>)
 8000b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	58024400 	.word	0x58024400

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0bc      	sub	sp, #240	; 0xf0
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	22bc      	movs	r2, #188	; 0xbc
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 f95b 	bl	8004e08 <memset>
  if(huart->Instance==USART2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a5b      	ldr	r2, [pc, #364]	; (8000cc4 <HAL_UART_MspInit+0x198>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d166      	bne.n	8000c2a <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 fcba 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b76:	f7ff ffb9 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	4b53      	ldr	r3, [pc, #332]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b80:	4a51      	ldr	r2, [pc, #324]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b8a:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b4b      	ldr	r3, [pc, #300]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a4a      	ldr	r2, [pc, #296]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a42      	ldr	r2, [pc, #264]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bec:	2307      	movs	r3, #7
 8000bee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4834      	ldr	r0, [pc, #208]	; (8000ccc <HAL_UART_MspInit+0x1a0>)
 8000bfa:	f000 fa67 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bfe:	2320      	movs	r3, #32
 8000c00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c16:	2307      	movs	r3, #7
 8000c18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c20:	4619      	mov	r1, r3
 8000c22:	482b      	ldr	r0, [pc, #172]	; (8000cd0 <HAL_UART_MspInit+0x1a4>)
 8000c24:	f000 fa52 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c28:	e047      	b.n	8000cba <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x1a8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d142      	bne.n	8000cba <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c34:	2302      	movs	r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fc4e 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8000c4e:	f7ff ff4d 	bl	8000aec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c58:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_UART_MspInit+0x19c>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <HAL_UART_MspInit+0x1a4>)
 8000cb6:	f000 fa09 	bl	80010cc <HAL_GPIO_Init>
}
 8000cba:	bf00      	nop
 8000cbc:	37f0      	adds	r7, #240	; 0xf0
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58020000 	.word	0x58020000
 8000cd0:	58020c00 	.word	0x58020c00
 8000cd4:	40004800 	.word	0x40004800

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f89e 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d30:	f7ff fc54 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f004 f831 	bl	8004dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fcd3 	bl	8000708 <main>
  bx  lr
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d6c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d70:	08004e78 	.word	0x08004e78
  ldr r2, =_sbss
 8000d74:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d78:	24000150 	.word	0x24000150

08000d7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC3_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 f96e 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d8c:	f001 f9d4 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8000d90:	4602      	mov	r2, r0
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_Init+0x68>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	4913      	ldr	r1, [pc, #76]	; (8000dec <HAL_Init+0x6c>)
 8000d9e:	5ccb      	ldrb	r3, [r1, r3]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	fa22 f303 	lsr.w	r3, r2, r3
 8000da8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_Init+0x68>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_Init+0x6c>)
 8000db4:	5cd3      	ldrb	r3, [r2, r3]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_Init+0x70>)
 8000dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_Init+0x74>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f000 f814 	bl	8000df8 <HAL_InitTick>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e002      	b.n	8000de0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dda:	f7ff fe8d 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58024400 	.word	0x58024400
 8000dec:	08004e30 	.word	0x08004e30
 8000df0:	24000004 	.word	0x24000004
 8000df4:	24000000 	.word	0x24000000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_InitTick+0x60>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e021      	b.n	8000e50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_InitTick+0x64>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_InitTick+0x60>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f945 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f91d 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x68>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2400000c 	.word	0x2400000c
 8000e5c:	24000000 	.word	0x24000000
 8000e60:	24000008 	.word	0x24000008

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2400000c 	.word	0x2400000c
 8000e88:	2400014c 	.word	0x2400014c

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2400014c 	.word	0x2400014c

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2400000c 	.word	0x2400000c

08000eec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetREVID+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	0c1b      	lsrs	r3, r3, #16
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	5c001000 	.word	0x5c001000

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <__NVIC_SetPriorityGrouping+0x40>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x40>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00
 8000f48:	05fa0000 	.word	0x05fa0000

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff47 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff5e 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff90 	bl	8000fbc <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5f 	bl	8000f68 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffb2 	bl	8001024 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010da:	4b89      	ldr	r3, [pc, #548]	; (8001300 <HAL_GPIO_Init+0x234>)
 80010dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010de:	e194      	b.n	800140a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8186 	beq.w	8001404 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d005      	beq.n	8001110 <HAL_GPIO_Init+0x44>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d130      	bne.n	8001172 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001146:	2201      	movs	r2, #1
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	f003 0201 	and.w	r2, r3, #1
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b03      	cmp	r3, #3
 800117c:	d017      	beq.n	80011ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d123      	bne.n	8001202 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	69b9      	ldr	r1, [r7, #24]
 80011fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0203 	and.w	r2, r3, #3
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80e0 	beq.w	8001404 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_GPIO_Init+0x238>)
 8001246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800124a:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <HAL_GPIO_Init+0x238>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <HAL_GPIO_Init+0x238>)
 8001256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_GPIO_Init+0x23c>)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a20      	ldr	r2, [pc, #128]	; (800130c <HAL_GPIO_Init+0x240>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d052      	beq.n	8001334 <HAL_GPIO_Init+0x268>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <HAL_GPIO_Init+0x244>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d031      	beq.n	80012fa <HAL_GPIO_Init+0x22e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_GPIO_Init+0x248>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d02b      	beq.n	80012f6 <HAL_GPIO_Init+0x22a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_GPIO_Init+0x24c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d025      	beq.n	80012f2 <HAL_GPIO_Init+0x226>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a1c      	ldr	r2, [pc, #112]	; (800131c <HAL_GPIO_Init+0x250>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d01f      	beq.n	80012ee <HAL_GPIO_Init+0x222>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_GPIO_Init+0x254>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x21e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <HAL_GPIO_Init+0x258>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x21a>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a19      	ldr	r2, [pc, #100]	; (8001328 <HAL_GPIO_Init+0x25c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x216>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a18      	ldr	r2, [pc, #96]	; (800132c <HAL_GPIO_Init+0x260>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x212>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_GPIO_Init+0x264>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x20e>
 80012d6:	2309      	movs	r3, #9
 80012d8:	e02d      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012da:	230a      	movs	r3, #10
 80012dc:	e02b      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012de:	2308      	movs	r3, #8
 80012e0:	e029      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012e2:	2307      	movs	r3, #7
 80012e4:	e027      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012e6:	2306      	movs	r3, #6
 80012e8:	e025      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012ea:	2305      	movs	r3, #5
 80012ec:	e023      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e021      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e01f      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e01d      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e01b      	b.n	8001336 <HAL_GPIO_Init+0x26a>
 80012fe:	bf00      	nop
 8001300:	58000080 	.word	0x58000080
 8001304:	58024400 	.word	0x58024400
 8001308:	58000400 	.word	0x58000400
 800130c:	58020000 	.word	0x58020000
 8001310:	58020400 	.word	0x58020400
 8001314:	58020800 	.word	0x58020800
 8001318:	58020c00 	.word	0x58020c00
 800131c:	58021000 	.word	0x58021000
 8001320:	58021400 	.word	0x58021400
 8001324:	58021800 	.word	0x58021800
 8001328:	58021c00 	.word	0x58021c00
 800132c:	58022000 	.word	0x58022000
 8001330:	58022400 	.word	0x58022400
 8001334:	2300      	movs	r3, #0
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	f002 0203 	and.w	r2, r2, #3
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	4093      	lsls	r3, r2
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001346:	4938      	ldr	r1, [pc, #224]	; (8001428 <HAL_GPIO_Init+0x35c>)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3302      	adds	r3, #2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800137a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	3301      	adds	r3, #1
 8001408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	f47f ae63 	bne.w	80010e0 <HAL_GPIO_Init+0x14>
  }
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	3724      	adds	r7, #36	; 0x24
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	58000400 	.word	0x58000400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001468:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_HSEM_FastTake+0x2c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3320      	adds	r3, #32
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_HSEM_FastTake+0x30>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d101      	bne.n	800147c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e000      	b.n	800147e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	58026400 	.word	0x58026400
 8001490:	80000300 	.word	0x80000300

08001494 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800149e:	4906      	ldr	r1, [pc, #24]	; (80014b8 <HAL_HSEM_Release+0x24>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	58026400 	.word	0x58026400

080014bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <HAL_PWREx_ConfigSupply+0xb0>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	2b06      	cmp	r3, #6
 80014ce:	d00a      	beq.n	80014e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_PWREx_ConfigSupply+0xb0>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d001      	beq.n	80014e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e040      	b.n	8001564 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e03e      	b.n	8001564 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <HAL_PWREx_ConfigSupply+0xb0>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014ee:	491f      	ldr	r1, [pc, #124]	; (800156c <HAL_PWREx_ConfigSupply+0xb0>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014f6:	f7ff fcc9 	bl	8000e8c <HAL_GetTick>
 80014fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014fc:	e009      	b.n	8001512 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014fe:	f7ff fcc5 	bl	8000e8c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800150c:	d901      	bls.n	8001512 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e028      	b.n	8001564 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_PWREx_ConfigSupply+0xb0>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800151e:	d1ee      	bne.n	80014fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b1e      	cmp	r3, #30
 8001524:	d008      	beq.n	8001538 <HAL_PWREx_ConfigSupply+0x7c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b2e      	cmp	r3, #46	; 0x2e
 800152a:	d005      	beq.n	8001538 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b1d      	cmp	r3, #29
 8001530:	d002      	beq.n	8001538 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b2d      	cmp	r3, #45	; 0x2d
 8001536:	d114      	bne.n	8001562 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001538:	f7ff fca8 	bl	8000e8c <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800153e:	e009      	b.n	8001554 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001540:	f7ff fca4 	bl	8000e8c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154e:	d901      	bls.n	8001554 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e007      	b.n	8001564 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_PWREx_ConfigSupply+0xb0>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001560:	d1ee      	bne.n	8001540 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	58024800 	.word	0x58024800

08001570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	f000 bc1d 	b.w	8001dbe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8087 	beq.w	80016a0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001592:	4b99      	ldr	r3, [pc, #612]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800159c:	4b96      	ldr	r3, [pc, #600]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d007      	beq.n	80015b8 <HAL_RCC_OscConfig+0x48>
 80015a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015aa:	2b18      	cmp	r3, #24
 80015ac:	d110      	bne.n	80015d0 <HAL_RCC_OscConfig+0x60>
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d10b      	bne.n	80015d0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	4b8f      	ldr	r3, [pc, #572]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d06c      	beq.n	800169e <HAL_RCC_OscConfig+0x12e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d168      	bne.n	800169e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e3f6      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d106      	bne.n	80015e8 <HAL_RCC_OscConfig+0x78>
 80015da:	4b87      	ldr	r3, [pc, #540]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a86      	ldr	r2, [pc, #536]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e02e      	b.n	8001646 <HAL_RCC_OscConfig+0xd6>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x9a>
 80015f0:	4b81      	ldr	r3, [pc, #516]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a80      	ldr	r2, [pc, #512]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b7e      	ldr	r3, [pc, #504]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a7d      	ldr	r2, [pc, #500]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e01d      	b.n	8001646 <HAL_RCC_OscConfig+0xd6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001612:	d10c      	bne.n	800162e <HAL_RCC_OscConfig+0xbe>
 8001614:	4b78      	ldr	r3, [pc, #480]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a77      	ldr	r2, [pc, #476]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800161a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b75      	ldr	r3, [pc, #468]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a74      	ldr	r2, [pc, #464]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e00b      	b.n	8001646 <HAL_RCC_OscConfig+0xd6>
 800162e:	4b72      	ldr	r3, [pc, #456]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a71      	ldr	r2, [pc, #452]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6f      	ldr	r3, [pc, #444]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d013      	beq.n	8001676 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fc1d 	bl	8000e8c <HAL_GetTick>
 8001652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001656:	f7ff fc19 	bl	8000e8c <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	; 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e3aa      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001668:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0xe6>
 8001674:	e014      	b.n	80016a0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fc09 	bl	8000e8c <HAL_GetTick>
 800167a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167e:	f7ff fc05 	bl	8000e8c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b64      	cmp	r3, #100	; 0x64
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e396      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001690:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x10e>
 800169c:	e000      	b.n	80016a0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80cb 	beq.w	8001844 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ae:	4b52      	ldr	r3, [pc, #328]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016b8:	4b4f      	ldr	r3, [pc, #316]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d007      	beq.n	80016d4 <HAL_RCC_OscConfig+0x164>
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	2b18      	cmp	r3, #24
 80016c8:	d156      	bne.n	8001778 <HAL_RCC_OscConfig+0x208>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d151      	bne.n	8001778 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d4:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_OscConfig+0x17c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e368      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016ec:	4b42      	ldr	r3, [pc, #264]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 0219 	bic.w	r2, r3, #25
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	493f      	ldr	r1, [pc, #252]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016fe:	f7ff fbc5 	bl	8000e8c <HAL_GetTick>
 8001702:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fbc1 	bl	8000e8c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e352      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	f7ff fbe2 	bl	8000eec <HAL_GetREVID>
 8001728:	4603      	mov	r3, r0
 800172a:	f241 0203 	movw	r2, #4099	; 0x1003
 800172e:	4293      	cmp	r3, r2
 8001730:	d817      	bhi.n	8001762 <HAL_RCC_OscConfig+0x1f2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b40      	cmp	r3, #64	; 0x40
 8001738:	d108      	bne.n	800174c <HAL_RCC_OscConfig+0x1dc>
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001742:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174a:	e07b      	b.n	8001844 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	031b      	lsls	r3, r3, #12
 800175a:	4927      	ldr	r1, [pc, #156]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001760:	e070      	b.n	8001844 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	061b      	lsls	r3, r3, #24
 8001770:	4921      	ldr	r1, [pc, #132]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001776:	e065      	b.n	8001844 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d048      	beq.n	8001812 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 0219 	bic.w	r2, r3, #25
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	491a      	ldr	r1, [pc, #104]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fb7b 	bl	8000e8c <HAL_GetTick>
 8001796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fb77 	bl	8000e8c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e308      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	f7ff fb98 	bl	8000eec <HAL_GetREVID>
 80017bc:	4603      	mov	r3, r0
 80017be:	f241 0203 	movw	r2, #4099	; 0x1003
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d81a      	bhi.n	80017fc <HAL_RCC_OscConfig+0x28c>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b40      	cmp	r3, #64	; 0x40
 80017cc:	d108      	bne.n	80017e0 <HAL_RCC_OscConfig+0x270>
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	6053      	str	r3, [r2, #4]
 80017de:	e031      	b.n	8001844 <HAL_RCC_OscConfig+0x2d4>
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	031b      	lsls	r3, r3, #12
 80017ee:	4902      	ldr	r1, [pc, #8]	; (80017f8 <HAL_RCC_OscConfig+0x288>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
 80017f4:	e026      	b.n	8001844 <HAL_RCC_OscConfig+0x2d4>
 80017f6:	bf00      	nop
 80017f8:	58024400 	.word	0x58024400
 80017fc:	4b9a      	ldr	r3, [pc, #616]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	4997      	ldr	r1, [pc, #604]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e018      	b.n	8001844 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b95      	ldr	r3, [pc, #596]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a94      	ldr	r2, [pc, #592]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fb35 	bl	8000e8c <HAL_GetTick>
 8001822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fb31 	bl	8000e8c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e2c2      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001838:	4b8b      	ldr	r3, [pc, #556]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a9 	beq.w	80019a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001852:	4b85      	ldr	r3, [pc, #532]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800185a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800185c:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d007      	beq.n	8001878 <HAL_RCC_OscConfig+0x308>
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b18      	cmp	r3, #24
 800186c:	d13a      	bne.n	80018e4 <HAL_RCC_OscConfig+0x374>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d135      	bne.n	80018e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001878:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_OscConfig+0x320>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e296      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001890:	f7ff fb2c 	bl	8000eec <HAL_GetREVID>
 8001894:	4603      	mov	r3, r0
 8001896:	f241 0203 	movw	r2, #4099	; 0x1003
 800189a:	4293      	cmp	r3, r2
 800189c:	d817      	bhi.n	80018ce <HAL_RCC_OscConfig+0x35e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	2b20      	cmp	r3, #32
 80018a4:	d108      	bne.n	80018b8 <HAL_RCC_OscConfig+0x348>
 80018a6:	4b70      	ldr	r3, [pc, #448]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018ae:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018b6:	e075      	b.n	80019a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018b8:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	069b      	lsls	r3, r3, #26
 80018c6:	4968      	ldr	r1, [pc, #416]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018cc:	e06a      	b.n	80019a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018ce:	4b66      	ldr	r3, [pc, #408]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	061b      	lsls	r3, r3, #24
 80018dc:	4962      	ldr	r1, [pc, #392]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018e2:	e05f      	b.n	80019a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d042      	beq.n	8001972 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018ec:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80018f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fac8 	bl	8000e8c <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001900:	f7ff fac4 	bl	8000e8c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e255      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001912:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800191e:	f7ff fae5 	bl	8000eec <HAL_GetREVID>
 8001922:	4603      	mov	r3, r0
 8001924:	f241 0203 	movw	r2, #4099	; 0x1003
 8001928:	4293      	cmp	r3, r2
 800192a:	d817      	bhi.n	800195c <HAL_RCC_OscConfig+0x3ec>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	2b20      	cmp	r3, #32
 8001932:	d108      	bne.n	8001946 <HAL_RCC_OscConfig+0x3d6>
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800193c:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800193e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001942:	6053      	str	r3, [r2, #4]
 8001944:	e02e      	b.n	80019a4 <HAL_RCC_OscConfig+0x434>
 8001946:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	069b      	lsls	r3, r3, #26
 8001954:	4944      	ldr	r1, [pc, #272]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	4313      	orrs	r3, r2
 8001958:	604b      	str	r3, [r1, #4]
 800195a:	e023      	b.n	80019a4 <HAL_RCC_OscConfig+0x434>
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	493f      	ldr	r1, [pc, #252]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e018      	b.n	80019a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a3c      	ldr	r2, [pc, #240]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800197c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff fa85 	bl	8000e8c <HAL_GetTick>
 8001982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001986:	f7ff fa81 	bl	8000e8c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e212      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d036      	beq.n	8001a1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d019      	beq.n	80019ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019bc:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff fa62 	bl	8000e8c <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019cc:	f7ff fa5e 	bl	8000e8c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1ef      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x45c>
 80019ea:	e018      	b.n	8001a1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80019ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa48 	bl	8000e8c <HAL_GetTick>
 80019fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fa44 	bl	8000e8c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e1d5      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d039      	beq.n	8001a9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01c      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fa25 	bl	8000e8c <HAL_GetTick>
 8001a42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a46:	f7ff fa21 	bl	8000e8c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1b2      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x4d6>
 8001a64:	e01b      	b.n	8001a9e <HAL_RCC_OscConfig+0x52e>
 8001a66:	bf00      	nop
 8001a68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a6c:	4b9b      	ldr	r3, [pc, #620]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a9a      	ldr	r2, [pc, #616]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fa08 	bl	8000e8c <HAL_GetTick>
 8001a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a80:	f7ff fa04 	bl	8000e8c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e195      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a92:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8081 	beq.w	8001bae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001aac:	4b8c      	ldr	r3, [pc, #560]	; (8001ce0 <HAL_RCC_OscConfig+0x770>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a8b      	ldr	r2, [pc, #556]	; (8001ce0 <HAL_RCC_OscConfig+0x770>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff f9e8 	bl	8000e8c <HAL_GetTick>
 8001abc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ac0:	f7ff f9e4 	bl	8000e8c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e175      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ad2:	4b83      	ldr	r3, [pc, #524]	; (8001ce0 <HAL_RCC_OscConfig+0x770>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x584>
 8001ae6:	4b7d      	ldr	r3, [pc, #500]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a7c      	ldr	r2, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
 8001af2:	e02d      	b.n	8001b50 <HAL_RCC_OscConfig+0x5e0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10c      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5a6>
 8001afc:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a76      	ldr	r2, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x5e0>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c8>
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a6b      	ldr	r2, [pc, #428]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x5e0>
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a67      	ldr	r2, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a64      	ldr	r2, [pc, #400]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b4a:	f023 0304 	bic.w	r3, r3, #4
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d015      	beq.n	8001b84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff f998 	bl	8000e8c <HAL_GetTick>
 8001b5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff f994 	bl	8000e8c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e123      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b76:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0ee      	beq.n	8001b60 <HAL_RCC_OscConfig+0x5f0>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f982 	bl	8000e8c <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f97e 	bl	8000e8c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e10d      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ee      	bne.n	8001b8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8102 	beq.w	8001dbc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bb8:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bc0:	2b18      	cmp	r3, #24
 8001bc2:	f000 80bd 	beq.w	8001d40 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	f040 809e 	bne.w	8001d0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a41      	ldr	r2, [pc, #260]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f956 	bl	8000e8c <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f952 	bl	8000e8c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0e3      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bf6:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c02:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c06:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <HAL_RCC_OscConfig+0x774>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	430a      	orrs	r2, r1
 8001c16:	4931      	ldr	r1, [pc, #196]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	628b      	str	r3, [r1, #40]	; 0x28
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	3b01      	subs	r3, #1
 8001c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	025b      	lsls	r3, r3, #9
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	3b01      	subs	r3, #1
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	3b01      	subs	r3, #1
 8001c46:	061b      	lsls	r3, r3, #24
 8001c48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c4c:	4923      	ldr	r1, [pc, #140]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_RCC_OscConfig+0x778>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c6a:	00d2      	lsls	r2, r2, #3
 8001c6c:	491b      	ldr	r1, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	f023 020c 	bic.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4917      	ldr	r1, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	f023 0202 	bic.w	r2, r3, #2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	4912      	ldr	r1, [pc, #72]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	4a10      	ldr	r2, [pc, #64]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_RCC_OscConfig+0x76c>)
 8001ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f8db 	bl	8000e8c <HAL_GetTick>
 8001cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cd8:	e011      	b.n	8001cfe <HAL_RCC_OscConfig+0x78e>
 8001cda:	bf00      	nop
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	58024800 	.word	0x58024800
 8001ce4:	fffffc0c 	.word	0xfffffc0c
 8001ce8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f8ce 	bl	8000e8c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e05f      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cfe:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_RCC_OscConfig+0x858>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x77c>
 8001d0a:	e057      	b.n	8001dbc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_RCC_OscConfig+0x858>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x858>)
 8001d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f8b8 	bl	8000e8c <HAL_GetTick>
 8001d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f8b4 	bl	8000e8c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e045      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_RCC_OscConfig+0x858>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x7b0>
 8001d3e:	e03d      	b.n	8001dbc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x858>)
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCC_OscConfig+0x858>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d031      	beq.n	8001db8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0203 	and.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d12a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d122      	bne.n	8001db8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	0a5b      	lsrs	r3, r3, #9
 8001d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d111      	bne.n	8001db8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d108      	bne.n	8001db8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	0e1b      	lsrs	r3, r3, #24
 8001daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3730      	adds	r7, #48	; 0x30
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	58024400 	.word	0x58024400

08001dcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e19c      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b8a      	ldr	r3, [pc, #552]	; (800200c <HAL_RCC_ClockConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d910      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b87      	ldr	r3, [pc, #540]	; (800200c <HAL_RCC_ClockConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 020f 	bic.w	r2, r3, #15
 8001df6:	4985      	ldr	r1, [pc, #532]	; (800200c <HAL_RCC_ClockConfig+0x240>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b83      	ldr	r3, [pc, #524]	; (800200c <HAL_RCC_ClockConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e184      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d010      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	4b7b      	ldr	r3, [pc, #492]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d908      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e2c:	4b78      	ldr	r3, [pc, #480]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	4975      	ldr	r1, [pc, #468]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d010      	beq.n	8001e6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	4b70      	ldr	r3, [pc, #448]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d908      	bls.n	8001e6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	496a      	ldr	r1, [pc, #424]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	4b64      	ldr	r3, [pc, #400]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d908      	bls.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e88:	4b61      	ldr	r3, [pc, #388]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	495e      	ldr	r1, [pc, #376]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d010      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d908      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001eb6:	4b56      	ldr	r3, [pc, #344]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4953      	ldr	r1, [pc, #332]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d908      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f023 020f 	bic.w	r2, r3, #15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4947      	ldr	r1, [pc, #284]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d055      	beq.n	8001fae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4940      	ldr	r1, [pc, #256]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f1c:	4b3c      	ldr	r3, [pc, #240]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d121      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0f6      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f34:	4b36      	ldr	r3, [pc, #216]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d115      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0ea      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0de      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d6      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f023 0207 	bic.w	r2, r3, #7
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4925      	ldr	r1, [pc, #148]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7e:	f7fe ff85 	bl	8000e8c <HAL_GetTick>
 8001f82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f86:	f7fe ff81 	bl	8000e8c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0be      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d1eb      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d010      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d208      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f023 020f 	bic.w	r2, r3, #15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d214      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_RCC_ClockConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 020f 	bic.w	r2, r3, #15
 8001ff2:	4906      	ldr	r1, [pc, #24]	; (800200c <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e086      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
 800200c:	52002000 	.word	0x52002000
 8002010:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800202c:	429a      	cmp	r2, r3
 800202e:	d208      	bcs.n	8002042 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002030:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	4939      	ldr	r1, [pc, #228]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 800203e:	4313      	orrs	r3, r2
 8002040:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800205a:	429a      	cmp	r2, r3
 800205c:	d208      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	492e      	ldr	r1, [pc, #184]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 800206c:	4313      	orrs	r3, r2
 800206e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002088:	429a      	cmp	r2, r3
 800208a:	d208      	bcs.n	800209e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 800209a:	4313      	orrs	r3, r2
 800209c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d208      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4917      	ldr	r1, [pc, #92]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020cc:	f000 f834 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	4912      	ldr	r1, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x35c>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_RCC_ClockConfig+0x35c>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x360>)
 8002102:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x364>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x368>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fe72 	bl	8000df8 <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	58024400 	.word	0x58024400
 8002128:	08004e30 	.word	0x08004e30
 800212c:	24000004 	.word	0x24000004
 8002130:	24000000 	.word	0x24000000
 8002134:	24000008 	.word	0x24000008

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213e:	4bb3      	ldr	r3, [pc, #716]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002146:	2b18      	cmp	r3, #24
 8002148:	f200 8155 	bhi.w	80023f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800214c:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <HAL_RCC_GetSysClockFreq+0x1c>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	080021b9 	.word	0x080021b9
 8002158:	080023f7 	.word	0x080023f7
 800215c:	080023f7 	.word	0x080023f7
 8002160:	080023f7 	.word	0x080023f7
 8002164:	080023f7 	.word	0x080023f7
 8002168:	080023f7 	.word	0x080023f7
 800216c:	080023f7 	.word	0x080023f7
 8002170:	080023f7 	.word	0x080023f7
 8002174:	080021df 	.word	0x080021df
 8002178:	080023f7 	.word	0x080023f7
 800217c:	080023f7 	.word	0x080023f7
 8002180:	080023f7 	.word	0x080023f7
 8002184:	080023f7 	.word	0x080023f7
 8002188:	080023f7 	.word	0x080023f7
 800218c:	080023f7 	.word	0x080023f7
 8002190:	080023f7 	.word	0x080023f7
 8002194:	080021e5 	.word	0x080021e5
 8002198:	080023f7 	.word	0x080023f7
 800219c:	080023f7 	.word	0x080023f7
 80021a0:	080023f7 	.word	0x080023f7
 80021a4:	080023f7 	.word	0x080023f7
 80021a8:	080023f7 	.word	0x080023f7
 80021ac:	080023f7 	.word	0x080023f7
 80021b0:	080023f7 	.word	0x080023f7
 80021b4:	080021eb 	.word	0x080021eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021b8:	4b94      	ldr	r3, [pc, #592]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021c4:	4b91      	ldr	r3, [pc, #580]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	4a90      	ldr	r2, [pc, #576]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80021d6:	e111      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021d8:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021da:	61bb      	str	r3, [r7, #24]
    break;
 80021dc:	e10e      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80021de:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021e0:	61bb      	str	r3, [r7, #24]
    break;
 80021e2:	e10b      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021e4:	4b8c      	ldr	r3, [pc, #560]	; (8002418 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021e6:	61bb      	str	r3, [r7, #24]
    break;
 80021e8:	e108      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021f4:	4b85      	ldr	r3, [pc, #532]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002200:	4b82      	ldr	r3, [pc, #520]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800220a:	4b80      	ldr	r3, [pc, #512]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220e:	08db      	lsrs	r3, r3, #3
 8002210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002222:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80e1 	beq.w	80023f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b02      	cmp	r3, #2
 8002232:	f000 8083 	beq.w	800233c <HAL_RCC_GetSysClockFreq+0x204>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b02      	cmp	r3, #2
 800223a:	f200 80a1 	bhi.w	8002380 <HAL_RCC_GetSysClockFreq+0x248>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x114>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d056      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800224a:	e099      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800224c:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02d      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002258:	4b6c      	ldr	r3, [pc, #432]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	4a6b      	ldr	r2, [pc, #428]	; (8002410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
 8002268:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002282:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002292:	ed97 6a02 	vldr	s12, [r7, #8]
 8002296:	eddf 5a61 	vldr	s11, [pc, #388]	; 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 800229a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800229e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80022b2:	e087      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002420 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c6:	4b51      	ldr	r3, [pc, #324]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 80022de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022f6:	e065      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002302:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002424 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800230a:	4b40      	ldr	r3, [pc, #256]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800231a:	ed97 6a02 	vldr	s12, [r7, #8]
 800231e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800232a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800232e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800233a:	e043      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002428 <HAL_RCC_GetSysClockFreq+0x2f0>
 800234a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800235e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002362:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800236a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800236e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800237e:	e021      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002424 <HAL_RCC_GetSysClockFreq+0x2ec>
 800238e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 80023aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	0a5b      	lsrs	r3, r3, #9
 80023ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ce:	3301      	adds	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80023e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e8:	ee17 3a90 	vmov	r3, s15
 80023ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023ee:	e005      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
    break;
 80023f4:	e002      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023f8:	61bb      	str	r3, [r7, #24]
    break;
 80023fa:	bf00      	nop
  }

  return sysclockfreq;
 80023fc:	69bb      	ldr	r3, [r7, #24]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	58024400 	.word	0x58024400
 8002410:	03d09000 	.word	0x03d09000
 8002414:	003d0900 	.word	0x003d0900
 8002418:	007a1200 	.word	0x007a1200
 800241c:	46000000 	.word	0x46000000
 8002420:	4c742400 	.word	0x4c742400
 8002424:	4a742400 	.word	0x4a742400
 8002428:	4af42400 	.word	0x4af42400

0800242c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002432:	f7ff fe81 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_RCC_GetHCLKFreq+0x50>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490f      	ldr	r1, [pc, #60]	; (8002480 <HAL_RCC_GetHCLKFreq+0x54>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_GetHCLKFreq+0x50>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_GetHCLKFreq+0x54>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a07      	ldr	r2, [pc, #28]	; (8002484 <HAL_RCC_GetHCLKFreq+0x58>)
 8002468:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800246a:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_RCC_GetHCLKFreq+0x5c>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_RCC_GetHCLKFreq+0x58>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	58024400 	.word	0x58024400
 8002480:	08004e30 	.word	0x08004e30
 8002484:	24000004 	.word	0x24000004
 8002488:	24000000 	.word	0x24000000

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002490:	f7ff ffcc 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4904      	ldr	r1, [pc, #16]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	58024400 	.word	0x58024400
 80024b4:	08004e30 	.word	0x08004e30

080024b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80024bc:	f7ff ffb6 	bl	800242c <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4904      	ldr	r1, [pc, #16]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	58024400 	.word	0x58024400
 80024e0:	08004e30 	.word	0x08004e30

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d03f      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002504:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002508:	d02a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800250a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800250e:	d824      	bhi.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002514:	d018      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800251a:	d81e      	bhi.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002524:	d007      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002526:	e018      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002528:	4ba3      	ldr	r3, [pc, #652]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	4aa2      	ldr	r2, [pc, #648]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800252e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002534:	e015      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3304      	adds	r3, #4
 800253a:	2102      	movs	r1, #2
 800253c:	4618      	mov	r0, r3
 800253e:	f001 f9d5 	bl	80038ec <RCCEx_PLL2_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002546:	e00c      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3324      	adds	r3, #36	; 0x24
 800254c:	2102      	movs	r1, #2
 800254e:	4618      	mov	r0, r3
 8002550:	f001 fa7e 	bl	8003a50 <RCCEx_PLL3_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002558:	e003      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
      break;
 800255e:	e000      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002568:	4b93      	ldr	r3, [pc, #588]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800256a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002574:	4990      	ldr	r1, [pc, #576]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	650b      	str	r3, [r1, #80]	; 0x50
 800257a:	e001      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257c:	7dfb      	ldrb	r3, [r7, #23]
 800257e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d03d      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	2b04      	cmp	r3, #4
 8002592:	d826      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002594:	a201      	add	r2, pc, #4	; (adr r2, 800259c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025b1 	.word	0x080025b1
 80025a0:	080025bf 	.word	0x080025bf
 80025a4:	080025d1 	.word	0x080025d1
 80025a8:	080025e9 	.word	0x080025e9
 80025ac:	080025e9 	.word	0x080025e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b0:	4b81      	ldr	r3, [pc, #516]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	4a80      	ldr	r2, [pc, #512]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025bc:	e015      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 f991 	bl	80038ec <RCCEx_PLL2_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025ce:	e00c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3324      	adds	r3, #36	; 0x24
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fa3a 	bl	8003a50 <RCCEx_PLL3_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025e0:	e003      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	75fb      	strb	r3, [r7, #23]
      break;
 80025e6:	e000      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80025e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f0:	4b71      	ldr	r3, [pc, #452]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	f023 0207 	bic.w	r2, r3, #7
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	496e      	ldr	r1, [pc, #440]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	650b      	str	r3, [r1, #80]	; 0x50
 8002602:	e001      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002610:	2b00      	cmp	r3, #0
 8002612:	d042      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261c:	d02b      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800261e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002622:	d825      	bhi.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002624:	2bc0      	cmp	r3, #192	; 0xc0
 8002626:	d028      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002628:	2bc0      	cmp	r3, #192	; 0xc0
 800262a:	d821      	bhi.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d016      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d81d      	bhi.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	d007      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800263c:	e018      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800263e:	4b5e      	ldr	r3, [pc, #376]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800264a:	e017      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f001 f94a 	bl	80038ec <RCCEx_PLL2_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800265c:	e00e      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3324      	adds	r3, #36	; 0x24
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f001 f9f3 	bl	8003a50 <RCCEx_PLL3_Config>
 800266a:	4603      	mov	r3, r0
 800266c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800266e:	e005      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	75fb      	strb	r3, [r7, #23]
      break;
 8002674:	e002      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800267a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002682:	4b4d      	ldr	r3, [pc, #308]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002686:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	494a      	ldr	r1, [pc, #296]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	650b      	str	r3, [r1, #80]	; 0x50
 8002694:	e001      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002696:	7dfb      	ldrb	r3, [r7, #23]
 8002698:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d049      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026b0:	d030      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80026b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026b6:	d82a      	bhi.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026bc:	d02c      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80026be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026c2:	d824      	bhi.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c8:	d018      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ce:	d81e      	bhi.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80026d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d8:	d007      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80026da:	e018      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	4a35      	ldr	r2, [pc, #212]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80026e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026e8:	e017      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 f8fb 	bl	80038ec <RCCEx_PLL2_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026fa:	e00e      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3324      	adds	r3, #36	; 0x24
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f001 f9a4 	bl	8003a50 <RCCEx_PLL3_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800270c:	e005      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
      break;
 8002712:	e002      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002714:	bf00      	nop
 8002716:	e000      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271a:	7dfb      	ldrb	r3, [r7, #23]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002720:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800272e:	4922      	ldr	r1, [pc, #136]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	658b      	str	r3, [r1, #88]	; 0x58
 8002734:	e001      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
 8002738:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002742:	2b00      	cmp	r3, #0
 8002744:	d04b      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800274c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002750:	d030      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002756:	d82a      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002758:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800275c:	d02e      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800275e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002762:	d824      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002768:	d018      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800276a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800276e:	d81e      	bhi.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d007      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800277a:	e018      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002788:	e019      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f001 f8ab 	bl	80038ec <RCCEx_PLL2_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800279a:	e010      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 f954 	bl	8003a50 <RCCEx_PLL3_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027ac:	e007      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	75fb      	strb	r3, [r7, #23]
      break;
 80027b2:	e004      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80027b4:	bf00      	nop
 80027b6:	e002      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80027b8:	58024400 	.word	0x58024400
      break;
 80027bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80027c4:	4b99      	ldr	r3, [pc, #612]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027d2:	4996      	ldr	r1, [pc, #600]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	658b      	str	r3, [r1, #88]	; 0x58
 80027d8:	e001      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d032      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ee:	2b30      	cmp	r3, #48	; 0x30
 80027f0:	d01c      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80027f2:	2b30      	cmp	r3, #48	; 0x30
 80027f4:	d817      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d00c      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d813      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002802:	2b10      	cmp	r3, #16
 8002804:	d10f      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	4a88      	ldr	r2, [pc, #544]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002812:	e00e      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	2102      	movs	r1, #2
 800281a:	4618      	mov	r0, r3
 800281c:	f001 f866 	bl	80038ec <RCCEx_PLL2_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002824:	e005      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	75fb      	strb	r3, [r7, #23]
      break;
 800282a:	e002      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002838:	4b7c      	ldr	r3, [pc, #496]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800283a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002844:	4979      	ldr	r1, [pc, #484]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002846:	4313      	orrs	r3, r2
 8002848:	64cb      	str	r3, [r1, #76]	; 0x4c
 800284a:	e001      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d047      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002864:	d030      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800286a:	d82a      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800286c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002870:	d02c      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002876:	d824      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d018      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800287e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002882:	d81e      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288c:	d007      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800288e:	e018      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002890:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	4a65      	ldr	r2, [pc, #404]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800289c:	e017      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f821 	bl	80038ec <RCCEx_PLL2_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028ae:	e00e      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3324      	adds	r3, #36	; 0x24
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 f8ca 	bl	8003a50 <RCCEx_PLL3_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028c0:	e005      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
      break;
 80028c6:	e002      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80028c8:	bf00      	nop
 80028ca:	e000      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80028cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028d4:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80028d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	4952      	ldr	r1, [pc, #328]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	650b      	str	r3, [r1, #80]	; 0x50
 80028e6:	e001      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d049      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002900:	d02e      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002906:	d828      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002908:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800290c:	d02a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800290e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002912:	d822      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002914:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002918:	d026      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800291a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800291e:	d81c      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002924:	d010      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800292a:	d816      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01d      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d111      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f000 ffd5 	bl	80038ec <RCCEx_PLL2_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002946:	e012      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3324      	adds	r3, #36	; 0x24
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f87e 	bl	8003a50 <RCCEx_PLL3_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002958:	e009      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
      break;
 800295e:	e006      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002960:	bf00      	nop
 8002962:	e004      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002964:	bf00      	nop
 8002966:	e002      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800296c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296e:	7dfb      	ldrb	r3, [r7, #23]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002978:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	492a      	ldr	r1, [pc, #168]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002982:	4313      	orrs	r3, r2
 8002984:	650b      	str	r3, [r1, #80]	; 0x50
 8002986:	e001      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d04d      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800299e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a2:	d02e      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80029a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a8:	d828      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d02a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d822      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80029b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029ba:	d026      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80029bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029c0:	d81c      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80029c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c6:	d010      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 80029c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029cc:	d816      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01d      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80029d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d6:	d111      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 ff84 	bl	80038ec <RCCEx_PLL2_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029e8:	e012      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3324      	adds	r3, #36	; 0x24
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 f82d 	bl	8003a50 <RCCEx_PLL3_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029fa:	e009      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002a00:	e006      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a02:	bf00      	nop
 8002a04:	e004      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a06:	bf00      	nop
 8002a08:	e002      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a24:	4901      	ldr	r1, [pc, #4]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	658b      	str	r3, [r1, #88]	; 0x58
 8002a2a:	e003      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02f      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a48:	d00e      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4e:	d814      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a58:	d10f      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5a:	4baf      	ldr	r3, [pc, #700]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	4aae      	ldr	r2, [pc, #696]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a66:	e00c      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 ff3c 	bl	80038ec <RCCEx_PLL2_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a78:	e003      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7e:	e000      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a88:	4ba3      	ldr	r3, [pc, #652]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a94:	49a0      	ldr	r1, [pc, #640]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	650b      	str	r3, [r1, #80]	; 0x50
 8002a9a:	e001      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d032      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d81b      	bhi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002af3 	.word	0x08002af3
 8002ac0:	08002acd 	.word	0x08002acd
 8002ac4:	08002adb 	.word	0x08002adb
 8002ac8:	08002af3 	.word	0x08002af3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	4a91      	ldr	r2, [pc, #580]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ad8:	e00c      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2102      	movs	r1, #2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 ff03 	bl	80038ec <RCCEx_PLL2_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002aea:	e003      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	75fb      	strb	r3, [r7, #23]
      break;
 8002af0:	e000      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002afa:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4984      	ldr	r1, [pc, #528]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b0c:	e001      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8086 	beq.w	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a7d      	ldr	r2, [pc, #500]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe f9ae 	bl	8000e8c <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b32:	e009      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b34:	f7fe f9aa 	bl	8000e8c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d902      	bls.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	75fb      	strb	r3, [r7, #23]
        break;
 8002b46:	e005      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b48:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ef      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d166      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b5a:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b64:	4053      	eors	r3, r2
 8002b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d013      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b76:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b78:	4b67      	ldr	r3, [pc, #412]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	4a66      	ldr	r2, [pc, #408]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b82:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a63      	ldr	r2, [pc, #396]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b90:	4a61      	ldr	r2, [pc, #388]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba0:	d115      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe f973 	bl	8000e8c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe f96f 	bl	8000e8c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d902      	bls.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	75fb      	strb	r3, [r7, #23]
            break;
 8002bc0:	e005      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc2:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ed      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d126      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be2:	d10d      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002be4:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bf2:	0919      	lsrs	r1, r3, #4
 8002bf4:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002bf6:	400b      	ands	r3, r1
 8002bf8:	4947      	ldr	r1, [pc, #284]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	610b      	str	r3, [r1, #16]
 8002bfe:	e005      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002c00:	4b45      	ldr	r3, [pc, #276]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a44      	ldr	r2, [pc, #272]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c0a:	6113      	str	r3, [r2, #16]
 8002c0c:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1a:	493f      	ldr	r1, [pc, #252]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	670b      	str	r3, [r1, #112]	; 0x70
 8002c20:	e004      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	75bb      	strb	r3, [r7, #22]
 8002c26:	e001      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8085 	beq.w	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c3e:	2b28      	cmp	r3, #40	; 0x28
 8002c40:	d866      	bhi.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002d25 	.word	0x08002d25
 8002c4c:	08002d11 	.word	0x08002d11
 8002c50:	08002d11 	.word	0x08002d11
 8002c54:	08002d11 	.word	0x08002d11
 8002c58:	08002d11 	.word	0x08002d11
 8002c5c:	08002d11 	.word	0x08002d11
 8002c60:	08002d11 	.word	0x08002d11
 8002c64:	08002d11 	.word	0x08002d11
 8002c68:	08002ced 	.word	0x08002ced
 8002c6c:	08002d11 	.word	0x08002d11
 8002c70:	08002d11 	.word	0x08002d11
 8002c74:	08002d11 	.word	0x08002d11
 8002c78:	08002d11 	.word	0x08002d11
 8002c7c:	08002d11 	.word	0x08002d11
 8002c80:	08002d11 	.word	0x08002d11
 8002c84:	08002d11 	.word	0x08002d11
 8002c88:	08002cff 	.word	0x08002cff
 8002c8c:	08002d11 	.word	0x08002d11
 8002c90:	08002d11 	.word	0x08002d11
 8002c94:	08002d11 	.word	0x08002d11
 8002c98:	08002d11 	.word	0x08002d11
 8002c9c:	08002d11 	.word	0x08002d11
 8002ca0:	08002d11 	.word	0x08002d11
 8002ca4:	08002d11 	.word	0x08002d11
 8002ca8:	08002d25 	.word	0x08002d25
 8002cac:	08002d11 	.word	0x08002d11
 8002cb0:	08002d11 	.word	0x08002d11
 8002cb4:	08002d11 	.word	0x08002d11
 8002cb8:	08002d11 	.word	0x08002d11
 8002cbc:	08002d11 	.word	0x08002d11
 8002cc0:	08002d11 	.word	0x08002d11
 8002cc4:	08002d11 	.word	0x08002d11
 8002cc8:	08002d25 	.word	0x08002d25
 8002ccc:	08002d11 	.word	0x08002d11
 8002cd0:	08002d11 	.word	0x08002d11
 8002cd4:	08002d11 	.word	0x08002d11
 8002cd8:	08002d11 	.word	0x08002d11
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	08002d11 	.word	0x08002d11
 8002ce4:	08002d11 	.word	0x08002d11
 8002ce8:	08002d25 	.word	0x08002d25
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fdfa 	bl	80038ec <RCCEx_PLL2_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002cfc:	e013      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3324      	adds	r3, #36	; 0x24
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fea3 	bl	8003a50 <RCCEx_PLL3_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75fb      	strb	r3, [r7, #23]
      break;
 8002d14:	e007      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d16:	bf00      	nop
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	58024800 	.word	0x58024800
 8002d20:	00ffffcf 	.word	0x00ffffcf
      break;
 8002d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d2c:	4b96      	ldr	r3, [pc, #600]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d38:	4993      	ldr	r1, [pc, #588]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	654b      	str	r3, [r1, #84]	; 0x54
 8002d3e:	e001      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d038      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d821      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002da3 	.word	0x08002da3
 8002d64:	08002d79 	.word	0x08002d79
 8002d68:	08002d8b 	.word	0x08002d8b
 8002d6c:	08002da3 	.word	0x08002da3
 8002d70:	08002da3 	.word	0x08002da3
 8002d74:	08002da3 	.word	0x08002da3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fdb4 	bl	80038ec <RCCEx_PLL2_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d88:	e00c      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3324      	adds	r3, #36	; 0x24
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fe5d 	bl	8003a50 <RCCEx_PLL3_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002d9a:	e003      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002da0:	e000      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002daa:	4b77      	ldr	r3, [pc, #476]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	f023 0207 	bic.w	r2, r3, #7
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	4974      	ldr	r1, [pc, #464]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	654b      	str	r3, [r1, #84]	; 0x54
 8002dbc:	e001      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d03a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d821      	bhi.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002dd8:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	08002e23 	.word	0x08002e23
 8002de4:	08002df9 	.word	0x08002df9
 8002de8:	08002e0b 	.word	0x08002e0b
 8002dec:	08002e23 	.word	0x08002e23
 8002df0:	08002e23 	.word	0x08002e23
 8002df4:	08002e23 	.word	0x08002e23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fd74 	bl	80038ec <RCCEx_PLL2_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e08:	e00c      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3324      	adds	r3, #36	; 0x24
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fe1d 	bl	8003a50 <RCCEx_PLL3_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e1a:	e003      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e20:	e000      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e2a:	4b57      	ldr	r3, [pc, #348]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	4953      	ldr	r1, [pc, #332]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e3e:	e001      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d04b      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e5a:	d02e      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e60:	d828      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e66:	d02a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6c:	d822      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002e6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e72:	d026      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002e74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e78:	d81c      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e84:	d816      	bhi.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01d      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8e:	d111      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fd28 	bl	80038ec <RCCEx_PLL2_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ea0:	e012      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3324      	adds	r3, #36	; 0x24
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fdd1 	bl	8003a50 <RCCEx_PLL3_Config>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002eb2:	e009      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb8:	e006      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e004      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ece:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002edc:	492a      	ldr	r1, [pc, #168]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	654b      	str	r3, [r1, #84]	; 0x54
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d04d      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002efa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002efe:	d02e      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002f00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f04:	d828      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d02a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d822      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f16:	d026      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002f18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f1c:	d81c      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f22:	d010      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f28:	d816      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01d      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d111      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fcd6 	bl	80038ec <RCCEx_PLL2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f44:	e012      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3324      	adds	r3, #36	; 0x24
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fd7f 	bl	8003a50 <RCCEx_PLL3_Config>
 8002f52:	4603      	mov	r3, r0
 8002f54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f56:	e009      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f5c:	e006      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f80:	4901      	ldr	r1, [pc, #4]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	658b      	str	r3, [r1, #88]	; 0x58
 8002f86:	e003      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d04b      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fa2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fa6:	d02e      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002fa8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fac:	d828      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb2:	d02a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb8:	d822      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002fba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002fbe:	d026      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002fc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002fc4:	d81c      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fca:	d010      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd0:	d816      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01d      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fda:	d111      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fc82 	bl	80038ec <RCCEx_PLL2_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002fec:	e012      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3324      	adds	r3, #36	; 0x24
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fd2b 	bl	8003a50 <RCCEx_PLL3_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ffe:	e009      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
      break;
 8003004:	e006      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003006:	bf00      	nop
 8003008:	e004      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800300a:	bf00      	nop
 800300c:	e002      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800301a:	4b9d      	ldr	r3, [pc, #628]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003028:	4999      	ldr	r1, [pc, #612]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800302a:	4313      	orrs	r3, r2
 800302c:	658b      	str	r3, [r1, #88]	; 0x58
 800302e:	e001      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	d10a      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3324      	adds	r3, #36	; 0x24
 8003050:	2102      	movs	r1, #2
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fcfc 	bl	8003a50 <RCCEx_PLL3_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003062:	4b8b      	ldr	r3, [pc, #556]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003070:	4987      	ldr	r1, [pc, #540]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003072:	4313      	orrs	r3, r2
 8003074:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308c:	d10a      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3324      	adds	r3, #36	; 0x24
 8003092:	2102      	movs	r1, #2
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fcdb 	bl	8003a50 <RCCEx_PLL3_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030a4:	4b7a      	ldr	r3, [pc, #488]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	4977      	ldr	r1, [pc, #476]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d034      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ce:	d01d      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80030d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030d4:	d817      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030de:	d009      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80030e0:	e011      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fbff 	bl	80038ec <RCCEx_PLL2_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80030f2:	e00c      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3324      	adds	r3, #36	; 0x24
 80030f8:	2102      	movs	r1, #2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fca8 	bl	8003a50 <RCCEx_PLL3_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
      break;
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800310c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003114:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003122:	495b      	ldr	r1, [pc, #364]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003124:	4313      	orrs	r3, r2
 8003126:	658b      	str	r3, [r1, #88]	; 0x58
 8003128:	e001      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d033      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003140:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003144:	d01c      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003146:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800314a:	d816      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800314c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003150:	d003      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003156:	d007      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003158:	e00f      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800315a:	4b4d      	ldr	r3, [pc, #308]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	4a4c      	ldr	r2, [pc, #304]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003166:	e00c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3324      	adds	r3, #36	; 0x24
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fc6e 	bl	8003a50 <RCCEx_PLL3_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
      break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003182:	7dfb      	ldrb	r3, [r7, #23]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003188:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003196:	493e      	ldr	r1, [pc, #248]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003198:	4313      	orrs	r3, r2
 800319a:	654b      	str	r3, [r1, #84]	; 0x54
 800319c:	e001      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d029      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80031b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ba:	d007      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80031bc:	e00f      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031be:	4b34      	ldr	r3, [pc, #208]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	4a33      	ldr	r2, [pc, #204]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031ca:	e00b      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	2102      	movs	r1, #2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fb8a 	bl	80038ec <RCCEx_PLL2_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031dc:	e002      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
      break;
 80031e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031ea:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	4926      	ldr	r1, [pc, #152]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80031fc:	e001      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3324      	adds	r3, #36	; 0x24
 8003212:	2102      	movs	r1, #2
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fc1b 	bl	8003a50 <RCCEx_PLL3_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d033      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003238:	d017      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800323a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800323e:	d811      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d013      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324a:	d80b      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003262:	e007      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
      break;
 8003268:	e004      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800326a:	bf00      	nop
 800326c:	e002      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800326e:	bf00      	nop
 8003270:	e000      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003286:	4902      	ldr	r1, [pc, #8]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003288:	4313      	orrs	r3, r2
 800328a:	654b      	str	r3, [r1, #84]	; 0x54
 800328c:	e004      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800328e:	bf00      	nop
 8003290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032a4:	4b31      	ldr	r3, [pc, #196]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	492e      	ldr	r1, [pc, #184]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80032c2:	4b2a      	ldr	r3, [pc, #168]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032d0:	4926      	ldr	r1, [pc, #152]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ee:	491f      	ldr	r1, [pc, #124]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003306:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800330a:	6113      	str	r3, [r2, #16]
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003316:	4915      	ldr	r1, [pc, #84]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	da08      	bge.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003332:	4313      	orrs	r3, r2
 8003334:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	4906      	ldr	r1, [pc, #24]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003352:	4313      	orrs	r3, r2
 8003354:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003356:	7dbb      	ldrb	r3, [r7, #22]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	58024400 	.word	0x58024400

08003370 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003374:	f7ff f85a 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4904      	ldr	r1, [pc, #16]	; (8003398 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58024400 	.word	0x58024400
 8003398:	08004e30 	.word	0x08004e30

0800339c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033a4:	4ba1      	ldr	r3, [pc, #644]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80033ae:	4b9f      	ldr	r3, [pc, #636]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	0b1b      	lsrs	r3, r3, #12
 80033b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80033ba:	4b9c      	ldr	r3, [pc, #624]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80033c6:	4b99      	ldr	r3, [pc, #612]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	08db      	lsrs	r3, r3, #3
 80033cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8111 	beq.w	800360c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	f000 8083 	beq.w	80034f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	f200 80a1 	bhi.w	800353c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d056      	beq.n	80034b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003406:	e099      	b.n	800353c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003408:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d02d      	beq.n	8003470 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003414:	4b85      	ldr	r3, [pc, #532]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	08db      	lsrs	r3, r3, #3
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	4a84      	ldr	r2, [pc, #528]	; (8003630 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343e:	4b7b      	ldr	r3, [pc, #492]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003452:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003634 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800346e:	e087      	b.n	8003580 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003638 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800347e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003482:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003492:	ed97 6a03 	vldr	s12, [r7, #12]
 8003496:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003634 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800349a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034b2:	e065      	b.n	8003580 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800363c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80034c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c6:	4b59      	ldr	r3, [pc, #356]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80034da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003634 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034f6:	e043      	b.n	8003580 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003502:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003640 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350a:	4b48      	ldr	r3, [pc, #288]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351a:	ed97 6a03 	vldr	s12, [r7, #12]
 800351e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003634 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800352e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800353a:	e021      	b.n	8003580 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800363c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800354a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354e:	4b37      	ldr	r3, [pc, #220]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003562:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003634 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800357e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003580:	4b2a      	ldr	r3, [pc, #168]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	0a5b      	lsrs	r3, r3, #9
 8003586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800359a:	edd7 6a07 	vldr	s13, [r7, #28]
 800359e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a6:	ee17 2a90 	vmov	r2, s15
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80035ae:	4b1f      	ldr	r3, [pc, #124]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80035cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035d4:	ee17 2a90 	vmov	r2, s15
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	0e1b      	lsrs	r3, r3, #24
 80035e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80035fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003602:	ee17 2a90 	vmov	r2, s15
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800360a:	e008      	b.n	800361e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
}
 800361e:	bf00      	nop
 8003620:	3724      	adds	r7, #36	; 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	58024400 	.word	0x58024400
 8003630:	03d09000 	.word	0x03d09000
 8003634:	46000000 	.word	0x46000000
 8003638:	4c742400 	.word	0x4c742400
 800363c:	4a742400 	.word	0x4a742400
 8003640:	4af42400 	.word	0x4af42400

08003644 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800364c:	4ba1      	ldr	r3, [pc, #644]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003656:	4b9f      	ldr	r3, [pc, #636]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	0d1b      	lsrs	r3, r3, #20
 800365c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003660:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003662:	4b9c      	ldr	r3, [pc, #624]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800366e:	4b99      	ldr	r3, [pc, #612]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	08db      	lsrs	r3, r3, #3
 8003674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003686:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8111 	beq.w	80038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b02      	cmp	r3, #2
 8003696:	f000 8083 	beq.w	80037a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b02      	cmp	r3, #2
 800369e:	f200 80a1 	bhi.w	80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d056      	beq.n	800375c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80036ae:	e099      	b.n	80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b0:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02d      	beq.n	8003718 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036bc:	4b85      	ldr	r3, [pc, #532]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	4a84      	ldr	r2, [pc, #528]	; (80038d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e6:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80036fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800370a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003716:	e087      	b.n	8003828 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372a:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373a:	ed97 6a03 	vldr	s12, [r7, #12]
 800373e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800375a:	e065      	b.n	8003828 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003766:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800376a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376e:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003782:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800379e:	e043      	b.n	8003828 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80037ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b2:	4b48      	ldr	r3, [pc, #288]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037e2:	e021      	b.n	8003828 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f6:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003806:	ed97 6a03 	vldr	s12, [r7, #12]
 800380a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800380e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003826:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	0a5b      	lsrs	r3, r3, #9
 800382e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800383e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003842:	edd7 6a07 	vldr	s13, [r7, #28]
 8003846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800384a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800384e:	ee17 2a90 	vmov	r2, s15
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003856:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	0c1b      	lsrs	r3, r3, #16
 800385c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800386c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003870:	edd7 6a07 	vldr	s13, [r7, #28]
 8003874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800387c:	ee17 2a90 	vmov	r2, s15
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	0e1b      	lsrs	r3, r3, #24
 800388a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800389a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800389e:	edd7 6a07 	vldr	s13, [r7, #28]
 80038a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038aa:	ee17 2a90 	vmov	r2, s15
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80038b2:	e008      	b.n	80038c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
}
 80038c6:	bf00      	nop
 80038c8:	3724      	adds	r7, #36	; 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	58024400 	.word	0x58024400
 80038d8:	03d09000 	.word	0x03d09000
 80038dc:	46000000 	.word	0x46000000
 80038e0:	4c742400 	.word	0x4c742400
 80038e4:	4a742400 	.word	0x4a742400
 80038e8:	4af42400 	.word	0x4af42400

080038ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038fa:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b03      	cmp	r3, #3
 8003904:	d101      	bne.n	800390a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e099      	b.n	8003a3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800390a:	4b4f      	ldr	r3, [pc, #316]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a4e      	ldr	r2, [pc, #312]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003910:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003916:	f7fd fab9 	bl	8000e8c <HAL_GetTick>
 800391a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800391c:	e008      	b.n	8003930 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800391e:	f7fd fab5 	bl	8000e8c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e086      	b.n	8003a3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003930:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800393c:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	493f      	ldr	r1, [pc, #252]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	628b      	str	r3, [r1, #40]	; 0x28
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	3b01      	subs	r3, #1
 8003956:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	3b01      	subs	r3, #1
 8003960:	025b      	lsls	r3, r3, #9
 8003962:	b29b      	uxth	r3, r3
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	3b01      	subs	r3, #1
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	3b01      	subs	r3, #1
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003980:	4931      	ldr	r1, [pc, #196]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	492d      	ldr	r1, [pc, #180]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003998:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f023 0220 	bic.w	r2, r3, #32
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	4928      	ldr	r1, [pc, #160]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039b0:	f023 0310 	bic.w	r3, r3, #16
 80039b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039b6:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <RCCEx_PLL2_Config+0x160>)
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	69d2      	ldr	r2, [r2, #28]
 80039c2:	00d2      	lsls	r2, r2, #3
 80039c4:	4920      	ldr	r1, [pc, #128]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039d0:	f043 0310 	orr.w	r3, r3, #16
 80039d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039e8:	e00f      	b.n	8003a0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80039f0:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 80039f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039fc:	e005      	b.n	8003a0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80039fe:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a16:	f7fd fa39 	bl	8000e8c <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a1c:	e008      	b.n	8003a30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a1e:	f7fd fa35 	bl	8000e8c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e006      	b.n	8003a3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <RCCEx_PLL2_Config+0x15c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	ffff0007 	.word	0xffff0007

08003a50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a5e:	4b53      	ldr	r3, [pc, #332]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d101      	bne.n	8003a6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e099      	b.n	8003ba2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003a6e:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4e      	ldr	r2, [pc, #312]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7a:	f7fd fa07 	bl	8000e8c <HAL_GetTick>
 8003a7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a80:	e008      	b.n	8003a94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a82:	f7fd fa03 	bl	8000e8c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e086      	b.n	8003ba2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003a94:	4b45      	ldr	r3, [pc, #276]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003aa0:	4b42      	ldr	r3, [pc, #264]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	051b      	lsls	r3, r3, #20
 8003aae:	493f      	ldr	r1, [pc, #252]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	025b      	lsls	r3, r3, #9
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	061b      	lsls	r3, r3, #24
 8003ae0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ae4:	4931      	ldr	r1, [pc, #196]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003aea:	4b30      	ldr	r3, [pc, #192]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	492d      	ldr	r1, [pc, #180]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	4928      	ldr	r1, [pc, #160]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b0e:	4b27      	ldr	r3, [pc, #156]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	4a26      	ldr	r2, [pc, #152]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <RCCEx_PLL3_Config+0x160>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	69d2      	ldr	r2, [r2, #28]
 8003b26:	00d2      	lsls	r2, r2, #3
 8003b28:	4920      	ldr	r1, [pc, #128]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b4c:	e00f      	b.n	8003b6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d106      	bne.n	8003b62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b54:	4b15      	ldr	r3, [pc, #84]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b60:	e005      	b.n	8003b6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	4a11      	ldr	r2, [pc, #68]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7a:	f7fd f987 	bl	8000e8c <HAL_GetTick>
 8003b7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003b82:	f7fd f983 	bl	8000e8c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e006      	b.n	8003ba2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <RCCEx_PLL3_Config+0x15c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	ffff0007 	.word	0xffff0007

08003bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e042      	b.n	8003c4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fc ffa7 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2224      	movs	r2, #36	; 0x24
 8003be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8c2 	bl	8003d80 <UART_SetConfig>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e022      	b.n	8003c4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fe1e 	bl	8004850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fea5 	bl	8004994 <UART_CheckIdleState>
 8003c4a:	4603      	mov	r3, r0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	; 0x28
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	f040 8083 	bne.w	8003d76 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Transmit+0x28>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e07b      	b.n	8003d78 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_UART_Transmit+0x3a>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e074      	b.n	8003d78 <HAL_UART_Transmit+0x124>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2221      	movs	r2, #33	; 0x21
 8003ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ca6:	f7fd f8f1 	bl	8000e8c <HAL_GetTick>
 8003caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	d108      	bne.n	8003cd8 <HAL_UART_Transmit+0x84>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	e003      	b.n	8003ce0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ce8:	e02c      	b.n	8003d44 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fe98 	bl	8004a2a <UART_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e039      	b.n	8003d78 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	e007      	b.n	8003d32 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1cc      	bne.n	8003cea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2200      	movs	r2, #0
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fe65 	bl	8004a2a <UART_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e006      	b.n	8003d78 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b092      	sub	sp, #72	; 0x48
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4bbe      	ldr	r3, [pc, #760]	; (80040a8 <UART_SetConfig+0x328>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4ab3      	ldr	r2, [pc, #716]	; (80040ac <UART_SetConfig+0x32c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d004      	beq.n	8003dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de8:	4313      	orrs	r3, r2
 8003dea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	4baf      	ldr	r3, [pc, #700]	; (80040b0 <UART_SetConfig+0x330>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	f023 010f 	bic.w	r1, r3, #15
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4aa6      	ldr	r2, [pc, #664]	; (80040b4 <UART_SetConfig+0x334>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d177      	bne.n	8003f10 <UART_SetConfig+0x190>
 8003e20:	4ba5      	ldr	r3, [pc, #660]	; (80040b8 <UART_SetConfig+0x338>)
 8003e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e28:	2b28      	cmp	r3, #40	; 0x28
 8003e2a:	d86d      	bhi.n	8003f08 <UART_SetConfig+0x188>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0xb4>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003ed9 	.word	0x08003ed9
 8003e38:	08003f09 	.word	0x08003f09
 8003e3c:	08003f09 	.word	0x08003f09
 8003e40:	08003f09 	.word	0x08003f09
 8003e44:	08003f09 	.word	0x08003f09
 8003e48:	08003f09 	.word	0x08003f09
 8003e4c:	08003f09 	.word	0x08003f09
 8003e50:	08003f09 	.word	0x08003f09
 8003e54:	08003ee1 	.word	0x08003ee1
 8003e58:	08003f09 	.word	0x08003f09
 8003e5c:	08003f09 	.word	0x08003f09
 8003e60:	08003f09 	.word	0x08003f09
 8003e64:	08003f09 	.word	0x08003f09
 8003e68:	08003f09 	.word	0x08003f09
 8003e6c:	08003f09 	.word	0x08003f09
 8003e70:	08003f09 	.word	0x08003f09
 8003e74:	08003ee9 	.word	0x08003ee9
 8003e78:	08003f09 	.word	0x08003f09
 8003e7c:	08003f09 	.word	0x08003f09
 8003e80:	08003f09 	.word	0x08003f09
 8003e84:	08003f09 	.word	0x08003f09
 8003e88:	08003f09 	.word	0x08003f09
 8003e8c:	08003f09 	.word	0x08003f09
 8003e90:	08003f09 	.word	0x08003f09
 8003e94:	08003ef1 	.word	0x08003ef1
 8003e98:	08003f09 	.word	0x08003f09
 8003e9c:	08003f09 	.word	0x08003f09
 8003ea0:	08003f09 	.word	0x08003f09
 8003ea4:	08003f09 	.word	0x08003f09
 8003ea8:	08003f09 	.word	0x08003f09
 8003eac:	08003f09 	.word	0x08003f09
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003ef9 	.word	0x08003ef9
 8003eb8:	08003f09 	.word	0x08003f09
 8003ebc:	08003f09 	.word	0x08003f09
 8003ec0:	08003f09 	.word	0x08003f09
 8003ec4:	08003f09 	.word	0x08003f09
 8003ec8:	08003f09 	.word	0x08003f09
 8003ecc:	08003f09 	.word	0x08003f09
 8003ed0:	08003f09 	.word	0x08003f09
 8003ed4:	08003f01 	.word	0x08003f01
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ede:	e222      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee6:	e21e      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eee:	e21a      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ef6:	e216      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003ef8:	2320      	movs	r3, #32
 8003efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003efe:	e212      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f00:	2340      	movs	r3, #64	; 0x40
 8003f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f06:	e20e      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f0e:	e20a      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a69      	ldr	r2, [pc, #420]	; (80040bc <UART_SetConfig+0x33c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d130      	bne.n	8003f7c <UART_SetConfig+0x1fc>
 8003f1a:	4b67      	ldr	r3, [pc, #412]	; (80040b8 <UART_SetConfig+0x338>)
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d826      	bhi.n	8003f74 <UART_SetConfig+0x1f4>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0x1ac>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f45 	.word	0x08003f45
 8003f30:	08003f4d 	.word	0x08003f4d
 8003f34:	08003f55 	.word	0x08003f55
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f4a:	e1ec      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f52:	e1e8      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f54:	2308      	movs	r3, #8
 8003f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f5a:	e1e4      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f62:	e1e0      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f64:	2320      	movs	r3, #32
 8003f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f6a:	e1dc      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f72:	e1d8      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f7a:	e1d4      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4f      	ldr	r2, [pc, #316]	; (80040c0 <UART_SetConfig+0x340>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d130      	bne.n	8003fe8 <UART_SetConfig+0x268>
 8003f86:	4b4c      	ldr	r3, [pc, #304]	; (80040b8 <UART_SetConfig+0x338>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d826      	bhi.n	8003fe0 <UART_SetConfig+0x260>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x218>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fb1 	.word	0x08003fb1
 8003f9c:	08003fb9 	.word	0x08003fb9
 8003fa0:	08003fc1 	.word	0x08003fc1
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fb6:	e1b6      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fbe:	e1b2      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fc6:	e1ae      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fce:	e1aa      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fd6:	e1a6      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003fd8:	2340      	movs	r3, #64	; 0x40
 8003fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fde:	e1a2      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fe6:	e19e      	b.n	8004326 <UART_SetConfig+0x5a6>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a35      	ldr	r2, [pc, #212]	; (80040c4 <UART_SetConfig+0x344>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d130      	bne.n	8004054 <UART_SetConfig+0x2d4>
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <UART_SetConfig+0x338>)
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d826      	bhi.n	800404c <UART_SetConfig+0x2cc>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x284>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	0800401d 	.word	0x0800401d
 8004008:	08004025 	.word	0x08004025
 800400c:	0800402d 	.word	0x0800402d
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004045 	.word	0x08004045
 800401c:	2300      	movs	r3, #0
 800401e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004022:	e180      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004024:	2304      	movs	r3, #4
 8004026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800402a:	e17c      	b.n	8004326 <UART_SetConfig+0x5a6>
 800402c:	2308      	movs	r3, #8
 800402e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004032:	e178      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004034:	2310      	movs	r3, #16
 8004036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800403a:	e174      	b.n	8004326 <UART_SetConfig+0x5a6>
 800403c:	2320      	movs	r3, #32
 800403e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004042:	e170      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004044:	2340      	movs	r3, #64	; 0x40
 8004046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800404a:	e16c      	b.n	8004326 <UART_SetConfig+0x5a6>
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004052:	e168      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <UART_SetConfig+0x348>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d142      	bne.n	80040e4 <UART_SetConfig+0x364>
 800405e:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <UART_SetConfig+0x338>)
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b05      	cmp	r3, #5
 8004068:	d838      	bhi.n	80040dc <UART_SetConfig+0x35c>
 800406a:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0x2f0>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004089 	.word	0x08004089
 8004074:	08004091 	.word	0x08004091
 8004078:	08004099 	.word	0x08004099
 800407c:	080040a1 	.word	0x080040a1
 8004080:	080040cd 	.word	0x080040cd
 8004084:	080040d5 	.word	0x080040d5
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800408e:	e14a      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004090:	2304      	movs	r3, #4
 8004092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004096:	e146      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004098:	2308      	movs	r3, #8
 800409a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800409e:	e142      	b.n	8004326 <UART_SetConfig+0x5a6>
 80040a0:	2310      	movs	r3, #16
 80040a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040a6:	e13e      	b.n	8004326 <UART_SetConfig+0x5a6>
 80040a8:	cfff69f3 	.word	0xcfff69f3
 80040ac:	58000c00 	.word	0x58000c00
 80040b0:	11fff4ff 	.word	0x11fff4ff
 80040b4:	40011000 	.word	0x40011000
 80040b8:	58024400 	.word	0x58024400
 80040bc:	40004400 	.word	0x40004400
 80040c0:	40004800 	.word	0x40004800
 80040c4:	40004c00 	.word	0x40004c00
 80040c8:	40005000 	.word	0x40005000
 80040cc:	2320      	movs	r3, #32
 80040ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040d2:	e128      	b.n	8004326 <UART_SetConfig+0x5a6>
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040da:	e124      	b.n	8004326 <UART_SetConfig+0x5a6>
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040e2:	e120      	b.n	8004326 <UART_SetConfig+0x5a6>
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4acb      	ldr	r2, [pc, #812]	; (8004418 <UART_SetConfig+0x698>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d176      	bne.n	80041dc <UART_SetConfig+0x45c>
 80040ee:	4bcb      	ldr	r3, [pc, #812]	; (800441c <UART_SetConfig+0x69c>)
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f6:	2b28      	cmp	r3, #40	; 0x28
 80040f8:	d86c      	bhi.n	80041d4 <UART_SetConfig+0x454>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x380>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	080041a5 	.word	0x080041a5
 8004104:	080041d5 	.word	0x080041d5
 8004108:	080041d5 	.word	0x080041d5
 800410c:	080041d5 	.word	0x080041d5
 8004110:	080041d5 	.word	0x080041d5
 8004114:	080041d5 	.word	0x080041d5
 8004118:	080041d5 	.word	0x080041d5
 800411c:	080041d5 	.word	0x080041d5
 8004120:	080041ad 	.word	0x080041ad
 8004124:	080041d5 	.word	0x080041d5
 8004128:	080041d5 	.word	0x080041d5
 800412c:	080041d5 	.word	0x080041d5
 8004130:	080041d5 	.word	0x080041d5
 8004134:	080041d5 	.word	0x080041d5
 8004138:	080041d5 	.word	0x080041d5
 800413c:	080041d5 	.word	0x080041d5
 8004140:	080041b5 	.word	0x080041b5
 8004144:	080041d5 	.word	0x080041d5
 8004148:	080041d5 	.word	0x080041d5
 800414c:	080041d5 	.word	0x080041d5
 8004150:	080041d5 	.word	0x080041d5
 8004154:	080041d5 	.word	0x080041d5
 8004158:	080041d5 	.word	0x080041d5
 800415c:	080041d5 	.word	0x080041d5
 8004160:	080041bd 	.word	0x080041bd
 8004164:	080041d5 	.word	0x080041d5
 8004168:	080041d5 	.word	0x080041d5
 800416c:	080041d5 	.word	0x080041d5
 8004170:	080041d5 	.word	0x080041d5
 8004174:	080041d5 	.word	0x080041d5
 8004178:	080041d5 	.word	0x080041d5
 800417c:	080041d5 	.word	0x080041d5
 8004180:	080041c5 	.word	0x080041c5
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080041d5 	.word	0x080041d5
 800418c:	080041d5 	.word	0x080041d5
 8004190:	080041d5 	.word	0x080041d5
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041d5 	.word	0x080041d5
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041aa:	e0bc      	b.n	8004326 <UART_SetConfig+0x5a6>
 80041ac:	2304      	movs	r3, #4
 80041ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b2:	e0b8      	b.n	8004326 <UART_SetConfig+0x5a6>
 80041b4:	2308      	movs	r3, #8
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ba:	e0b4      	b.n	8004326 <UART_SetConfig+0x5a6>
 80041bc:	2310      	movs	r3, #16
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c2:	e0b0      	b.n	8004326 <UART_SetConfig+0x5a6>
 80041c4:	2320      	movs	r3, #32
 80041c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ca:	e0ac      	b.n	8004326 <UART_SetConfig+0x5a6>
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041d2:	e0a8      	b.n	8004326 <UART_SetConfig+0x5a6>
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041da:	e0a4      	b.n	8004326 <UART_SetConfig+0x5a6>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a8f      	ldr	r2, [pc, #572]	; (8004420 <UART_SetConfig+0x6a0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d130      	bne.n	8004248 <UART_SetConfig+0x4c8>
 80041e6:	4b8d      	ldr	r3, [pc, #564]	; (800441c <UART_SetConfig+0x69c>)
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d826      	bhi.n	8004240 <UART_SetConfig+0x4c0>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0x478>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004211 	.word	0x08004211
 80041fc:	08004219 	.word	0x08004219
 8004200:	08004221 	.word	0x08004221
 8004204:	08004229 	.word	0x08004229
 8004208:	08004231 	.word	0x08004231
 800420c:	08004239 	.word	0x08004239
 8004210:	2300      	movs	r3, #0
 8004212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004216:	e086      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800421e:	e082      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004226:	e07e      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800422e:	e07a      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004230:	2320      	movs	r3, #32
 8004232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004236:	e076      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004238:	2340      	movs	r3, #64	; 0x40
 800423a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800423e:	e072      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004246:	e06e      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a75      	ldr	r2, [pc, #468]	; (8004424 <UART_SetConfig+0x6a4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d130      	bne.n	80042b4 <UART_SetConfig+0x534>
 8004252:	4b72      	ldr	r3, [pc, #456]	; (800441c <UART_SetConfig+0x69c>)
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	2b05      	cmp	r3, #5
 800425c:	d826      	bhi.n	80042ac <UART_SetConfig+0x52c>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <UART_SetConfig+0x4e4>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	0800427d 	.word	0x0800427d
 8004268:	08004285 	.word	0x08004285
 800426c:	0800428d 	.word	0x0800428d
 8004270:	08004295 	.word	0x08004295
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042a5 	.word	0x080042a5
 800427c:	2300      	movs	r3, #0
 800427e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004282:	e050      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004284:	2304      	movs	r3, #4
 8004286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800428a:	e04c      	b.n	8004326 <UART_SetConfig+0x5a6>
 800428c:	2308      	movs	r3, #8
 800428e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004292:	e048      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004294:	2310      	movs	r3, #16
 8004296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429a:	e044      	b.n	8004326 <UART_SetConfig+0x5a6>
 800429c:	2320      	movs	r3, #32
 800429e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a2:	e040      	b.n	8004326 <UART_SetConfig+0x5a6>
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042aa:	e03c      	b.n	8004326 <UART_SetConfig+0x5a6>
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042b2:	e038      	b.n	8004326 <UART_SetConfig+0x5a6>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a5b      	ldr	r2, [pc, #364]	; (8004428 <UART_SetConfig+0x6a8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d130      	bne.n	8004320 <UART_SetConfig+0x5a0>
 80042be:	4b57      	ldr	r3, [pc, #348]	; (800441c <UART_SetConfig+0x69c>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d826      	bhi.n	8004318 <UART_SetConfig+0x598>
 80042ca:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <UART_SetConfig+0x550>)
 80042cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d0:	080042e9 	.word	0x080042e9
 80042d4:	080042f1 	.word	0x080042f1
 80042d8:	080042f9 	.word	0x080042f9
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004311 	.word	0x08004311
 80042e8:	2302      	movs	r3, #2
 80042ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ee:	e01a      	b.n	8004326 <UART_SetConfig+0x5a6>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f6:	e016      	b.n	8004326 <UART_SetConfig+0x5a6>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fe:	e012      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004306:	e00e      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004308:	2320      	movs	r3, #32
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430e:	e00a      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004316:	e006      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431e:	e002      	b.n	8004326 <UART_SetConfig+0x5a6>
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <UART_SetConfig+0x6a8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f040 80f8 	bne.w	8004522 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004332:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004336:	2b20      	cmp	r3, #32
 8004338:	dc46      	bgt.n	80043c8 <UART_SetConfig+0x648>
 800433a:	2b02      	cmp	r3, #2
 800433c:	f2c0 8082 	blt.w	8004444 <UART_SetConfig+0x6c4>
 8004340:	3b02      	subs	r3, #2
 8004342:	2b1e      	cmp	r3, #30
 8004344:	d87e      	bhi.n	8004444 <UART_SetConfig+0x6c4>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x5cc>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	080043cf 	.word	0x080043cf
 8004350:	08004445 	.word	0x08004445
 8004354:	080043d7 	.word	0x080043d7
 8004358:	08004445 	.word	0x08004445
 800435c:	08004445 	.word	0x08004445
 8004360:	08004445 	.word	0x08004445
 8004364:	080043e7 	.word	0x080043e7
 8004368:	08004445 	.word	0x08004445
 800436c:	08004445 	.word	0x08004445
 8004370:	08004445 	.word	0x08004445
 8004374:	08004445 	.word	0x08004445
 8004378:	08004445 	.word	0x08004445
 800437c:	08004445 	.word	0x08004445
 8004380:	08004445 	.word	0x08004445
 8004384:	080043f7 	.word	0x080043f7
 8004388:	08004445 	.word	0x08004445
 800438c:	08004445 	.word	0x08004445
 8004390:	08004445 	.word	0x08004445
 8004394:	08004445 	.word	0x08004445
 8004398:	08004445 	.word	0x08004445
 800439c:	08004445 	.word	0x08004445
 80043a0:	08004445 	.word	0x08004445
 80043a4:	08004445 	.word	0x08004445
 80043a8:	08004445 	.word	0x08004445
 80043ac:	08004445 	.word	0x08004445
 80043b0:	08004445 	.word	0x08004445
 80043b4:	08004445 	.word	0x08004445
 80043b8:	08004445 	.word	0x08004445
 80043bc:	08004445 	.word	0x08004445
 80043c0:	08004445 	.word	0x08004445
 80043c4:	08004437 	.word	0x08004437
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d037      	beq.n	800443c <UART_SetConfig+0x6bc>
 80043cc:	e03a      	b.n	8004444 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80043ce:	f7fe ffcf 	bl	8003370 <HAL_RCCEx_GetD3PCLK1Freq>
 80043d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80043d4:	e03c      	b.n	8004450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe ffde 	bl	800339c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043e4:	e034      	b.n	8004450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043e6:	f107 0318 	add.w	r3, r7, #24
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff f92a 	bl	8003644 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043f4:	e02c      	b.n	8004450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <UART_SetConfig+0x69c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d016      	beq.n	8004430 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004402:	4b06      	ldr	r3, [pc, #24]	; (800441c <UART_SetConfig+0x69c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	08db      	lsrs	r3, r3, #3
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	4a07      	ldr	r2, [pc, #28]	; (800442c <UART_SetConfig+0x6ac>)
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004414:	e01c      	b.n	8004450 <UART_SetConfig+0x6d0>
 8004416:	bf00      	nop
 8004418:	40011400 	.word	0x40011400
 800441c:	58024400 	.word	0x58024400
 8004420:	40007800 	.word	0x40007800
 8004424:	40007c00 	.word	0x40007c00
 8004428:	58000c00 	.word	0x58000c00
 800442c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004430:	4b9d      	ldr	r3, [pc, #628]	; (80046a8 <UART_SetConfig+0x928>)
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004434:	e00c      	b.n	8004450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004436:	4b9d      	ldr	r3, [pc, #628]	; (80046ac <UART_SetConfig+0x92c>)
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800443a:	e009      	b.n	8004450 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004442:	e005      	b.n	8004450 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800444e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 81de 	beq.w	8004814 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	4a94      	ldr	r2, [pc, #592]	; (80046b0 <UART_SetConfig+0x930>)
 800445e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004462:	461a      	mov	r2, r3
 8004464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004466:	fbb3 f3f2 	udiv	r3, r3, r2
 800446a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004478:	429a      	cmp	r2, r3
 800447a:	d305      	bcc.n	8004488 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004484:	429a      	cmp	r2, r3
 8004486:	d903      	bls.n	8004490 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800448e:	e1c1      	b.n	8004814 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004492:	2200      	movs	r2, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	60fa      	str	r2, [r7, #12]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	4a84      	ldr	r2, [pc, #528]	; (80046b0 <UART_SetConfig+0x930>)
 800449e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2200      	movs	r2, #0
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044b2:	f7fb ff11 	bl	80002d8 <__aeabi_uldivmod>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	020b      	lsls	r3, r1, #8
 80044c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044cc:	0202      	lsls	r2, r0, #8
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	6849      	ldr	r1, [r1, #4]
 80044d2:	0849      	lsrs	r1, r1, #1
 80044d4:	2000      	movs	r0, #0
 80044d6:	460c      	mov	r4, r1
 80044d8:	4605      	mov	r5, r0
 80044da:	eb12 0804 	adds.w	r8, r2, r4
 80044de:	eb43 0905 	adc.w	r9, r3, r5
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	469a      	mov	sl, r3
 80044ea:	4693      	mov	fp, r2
 80044ec:	4652      	mov	r2, sl
 80044ee:	465b      	mov	r3, fp
 80044f0:	4640      	mov	r0, r8
 80044f2:	4649      	mov	r1, r9
 80044f4:	f7fb fef0 	bl	80002d8 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004506:	d308      	bcc.n	800451a <UART_SetConfig+0x79a>
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450e:	d204      	bcs.n	800451a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	e17c      	b.n	8004814 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004520:	e178      	b.n	8004814 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452a:	f040 80c5 	bne.w	80046b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800452e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004532:	2b20      	cmp	r3, #32
 8004534:	dc48      	bgt.n	80045c8 <UART_SetConfig+0x848>
 8004536:	2b00      	cmp	r3, #0
 8004538:	db7b      	blt.n	8004632 <UART_SetConfig+0x8b2>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d879      	bhi.n	8004632 <UART_SetConfig+0x8b2>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x7c4>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	080045cf 	.word	0x080045cf
 8004548:	080045d7 	.word	0x080045d7
 800454c:	08004633 	.word	0x08004633
 8004550:	08004633 	.word	0x08004633
 8004554:	080045df 	.word	0x080045df
 8004558:	08004633 	.word	0x08004633
 800455c:	08004633 	.word	0x08004633
 8004560:	08004633 	.word	0x08004633
 8004564:	080045ef 	.word	0x080045ef
 8004568:	08004633 	.word	0x08004633
 800456c:	08004633 	.word	0x08004633
 8004570:	08004633 	.word	0x08004633
 8004574:	08004633 	.word	0x08004633
 8004578:	08004633 	.word	0x08004633
 800457c:	08004633 	.word	0x08004633
 8004580:	08004633 	.word	0x08004633
 8004584:	080045ff 	.word	0x080045ff
 8004588:	08004633 	.word	0x08004633
 800458c:	08004633 	.word	0x08004633
 8004590:	08004633 	.word	0x08004633
 8004594:	08004633 	.word	0x08004633
 8004598:	08004633 	.word	0x08004633
 800459c:	08004633 	.word	0x08004633
 80045a0:	08004633 	.word	0x08004633
 80045a4:	08004633 	.word	0x08004633
 80045a8:	08004633 	.word	0x08004633
 80045ac:	08004633 	.word	0x08004633
 80045b0:	08004633 	.word	0x08004633
 80045b4:	08004633 	.word	0x08004633
 80045b8:	08004633 	.word	0x08004633
 80045bc:	08004633 	.word	0x08004633
 80045c0:	08004633 	.word	0x08004633
 80045c4:	08004625 	.word	0x08004625
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d02e      	beq.n	800462a <UART_SetConfig+0x8aa>
 80045cc:	e031      	b.n	8004632 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ce:	f7fd ff5d 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 80045d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80045d4:	e033      	b.n	800463e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d6:	f7fd ff6f 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 80045da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80045dc:	e02f      	b.n	800463e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe feda 	bl	800339c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045ec:	e027      	b.n	800463e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045ee:	f107 0318 	add.w	r3, r7, #24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff f826 	bl	8003644 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045fc:	e01f      	b.n	800463e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045fe:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <UART_SetConfig+0x934>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800460a:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <UART_SetConfig+0x934>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	08db      	lsrs	r3, r3, #3
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	4a24      	ldr	r2, [pc, #144]	; (80046a8 <UART_SetConfig+0x928>)
 8004616:	fa22 f303 	lsr.w	r3, r2, r3
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800461c:	e00f      	b.n	800463e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800461e:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <UART_SetConfig+0x928>)
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004622:	e00c      	b.n	800463e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004624:	4b21      	ldr	r3, [pc, #132]	; (80046ac <UART_SetConfig+0x92c>)
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004628:	e009      	b.n	800463e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004630:	e005      	b.n	800463e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800463c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800463e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80e7 	beq.w	8004814 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <UART_SetConfig+0x930>)
 800464c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004650:	461a      	mov	r2, r3
 8004652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004654:	fbb3 f3f2 	udiv	r3, r3, r2
 8004658:	005a      	lsls	r2, r3, #1
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	441a      	add	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	2b0f      	cmp	r3, #15
 8004670:	d916      	bls.n	80046a0 <UART_SetConfig+0x920>
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004678:	d212      	bcs.n	80046a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	b29b      	uxth	r3, r3
 800467e:	f023 030f 	bic.w	r3, r3, #15
 8004682:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	b29b      	uxth	r3, r3
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	b29a      	uxth	r2, r3
 8004690:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004692:	4313      	orrs	r3, r2
 8004694:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	e0b9      	b.n	8004814 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80046a6:	e0b5      	b.n	8004814 <UART_SetConfig+0xa94>
 80046a8:	03d09000 	.word	0x03d09000
 80046ac:	003d0900 	.word	0x003d0900
 80046b0:	08004e40 	.word	0x08004e40
 80046b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80046b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046bc:	2b20      	cmp	r3, #32
 80046be:	dc49      	bgt.n	8004754 <UART_SetConfig+0x9d4>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db7c      	blt.n	80047be <UART_SetConfig+0xa3e>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d87a      	bhi.n	80047be <UART_SetConfig+0xa3e>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <UART_SetConfig+0x950>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	0800475b 	.word	0x0800475b
 80046d4:	08004763 	.word	0x08004763
 80046d8:	080047bf 	.word	0x080047bf
 80046dc:	080047bf 	.word	0x080047bf
 80046e0:	0800476b 	.word	0x0800476b
 80046e4:	080047bf 	.word	0x080047bf
 80046e8:	080047bf 	.word	0x080047bf
 80046ec:	080047bf 	.word	0x080047bf
 80046f0:	0800477b 	.word	0x0800477b
 80046f4:	080047bf 	.word	0x080047bf
 80046f8:	080047bf 	.word	0x080047bf
 80046fc:	080047bf 	.word	0x080047bf
 8004700:	080047bf 	.word	0x080047bf
 8004704:	080047bf 	.word	0x080047bf
 8004708:	080047bf 	.word	0x080047bf
 800470c:	080047bf 	.word	0x080047bf
 8004710:	0800478b 	.word	0x0800478b
 8004714:	080047bf 	.word	0x080047bf
 8004718:	080047bf 	.word	0x080047bf
 800471c:	080047bf 	.word	0x080047bf
 8004720:	080047bf 	.word	0x080047bf
 8004724:	080047bf 	.word	0x080047bf
 8004728:	080047bf 	.word	0x080047bf
 800472c:	080047bf 	.word	0x080047bf
 8004730:	080047bf 	.word	0x080047bf
 8004734:	080047bf 	.word	0x080047bf
 8004738:	080047bf 	.word	0x080047bf
 800473c:	080047bf 	.word	0x080047bf
 8004740:	080047bf 	.word	0x080047bf
 8004744:	080047bf 	.word	0x080047bf
 8004748:	080047bf 	.word	0x080047bf
 800474c:	080047bf 	.word	0x080047bf
 8004750:	080047b1 	.word	0x080047b1
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d02e      	beq.n	80047b6 <UART_SetConfig+0xa36>
 8004758:	e031      	b.n	80047be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475a:	f7fd fe97 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 800475e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004760:	e033      	b.n	80047ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004762:	f7fd fea9 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 8004766:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004768:	e02f      	b.n	80047ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800476a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fe14 	bl	800339c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004778:	e027      	b.n	80047ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800477a:	f107 0318 	add.w	r3, r7, #24
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe ff60 	bl	8003644 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004788:	e01f      	b.n	80047ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800478a:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <UART_SetConfig+0xac0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004796:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <UART_SetConfig+0xac0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <UART_SetConfig+0xac4>)
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047a8:	e00f      	b.n	80047ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80047aa:	4b26      	ldr	r3, [pc, #152]	; (8004844 <UART_SetConfig+0xac4>)
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047ae:	e00c      	b.n	80047ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047b0:	4b25      	ldr	r3, [pc, #148]	; (8004848 <UART_SetConfig+0xac8>)
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047b4:	e009      	b.n	80047ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047bc:	e005      	b.n	80047ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80047c8:	bf00      	nop
    }

    if (pclk != 0U)
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d021      	beq.n	8004814 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	4a1d      	ldr	r2, [pc, #116]	; (800484c <UART_SetConfig+0xacc>)
 80047d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047da:	461a      	mov	r2, r3
 80047dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047de:	fbb3 f2f2 	udiv	r2, r3, r2
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	441a      	add	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	2b0f      	cmp	r3, #15
 80047f8:	d909      	bls.n	800480e <UART_SetConfig+0xa8e>
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d205      	bcs.n	800480e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004804:	b29a      	uxth	r2, r3
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60da      	str	r2, [r3, #12]
 800480c:	e002      	b.n	8004814 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2201      	movs	r2, #1
 8004818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2201      	movs	r2, #1
 8004820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2200      	movs	r2, #0
 8004828:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004830:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004834:	4618      	mov	r0, r3
 8004836:	3748      	adds	r7, #72	; 0x48
 8004838:	46bd      	mov	sp, r7
 800483a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483e:	bf00      	nop
 8004840:	58024400 	.word	0x58024400
 8004844:	03d09000 	.word	0x03d09000
 8004848:	003d0900 	.word	0x003d0900
 800484c:	08004e40 	.word	0x08004e40

08004850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01a      	beq.n	8004966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494e:	d10a      	bne.n	8004966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af02      	add	r7, sp, #8
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049a4:	f7fc fa72 	bl	8000e8c <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d10e      	bne.n	80049d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f82f 	bl	8004a2a <UART_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e025      	b.n	8004a22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d10e      	bne.n	8004a02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f819 	bl	8004a2a <UART_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e00f      	b.n	8004a22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b09c      	sub	sp, #112	; 0x70
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	4613      	mov	r3, r2
 8004a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3a:	e0a9      	b.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a42:	f000 80a5 	beq.w	8004b90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a46:	f7fc fa21 	bl	8000e8c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8004a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d140      	bne.n	8004ade <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a70:	667b      	str	r3, [r7, #100]	; 0x64
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e6      	bne.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3308      	adds	r3, #8
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e5      	bne.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e069      	b.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d051      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afa:	d149      	bne.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
 8004b26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	613b      	str	r3, [r7, #16]
   return(result);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b58:	623a      	str	r2, [r7, #32]
 8004b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e010      	b.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69da      	ldr	r2, [r3, #28]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f43f af46 	beq.w	8004a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3770      	adds	r7, #112	; 0x70
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e027      	b.n	8004c20 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bfe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e02d      	b.n	8004ca0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2224      	movs	r2, #36	; 0x24
 8004c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f84f 	bl	8004d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e02d      	b.n	8004d1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2224      	movs	r2, #36	; 0x24
 8004ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0201 	bic.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f811 	bl	8004d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d108      	bne.n	8004d46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d44:	e031      	b.n	8004daa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d46:	2310      	movs	r3, #16
 8004d48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d4a:	2310      	movs	r3, #16
 8004d4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	0e5b      	lsrs	r3, r3, #25
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	0f5b      	lsrs	r3, r3, #29
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d6e:	7bbb      	ldrb	r3, [r7, #14]
 8004d70:	7b3a      	ldrb	r2, [r7, #12]
 8004d72:	4911      	ldr	r1, [pc, #68]	; (8004db8 <UARTEx_SetNbDataToProcess+0x94>)
 8004d74:	5c8a      	ldrb	r2, [r1, r2]
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d7a:	7b3a      	ldrb	r2, [r7, #12]
 8004d7c:	490f      	ldr	r1, [pc, #60]	; (8004dbc <UARTEx_SetNbDataToProcess+0x98>)
 8004d7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	7b7a      	ldrb	r2, [r7, #13]
 8004d90:	4909      	ldr	r1, [pc, #36]	; (8004db8 <UARTEx_SetNbDataToProcess+0x94>)
 8004d92:	5c8a      	ldrb	r2, [r1, r2]
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d98:	7b7a      	ldrb	r2, [r7, #13]
 8004d9a:	4908      	ldr	r1, [pc, #32]	; (8004dbc <UARTEx_SetNbDataToProcess+0x98>)
 8004d9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	08004e58 	.word	0x08004e58
 8004dbc:	08004e60 	.word	0x08004e60

08004dc0 <__libc_init_array>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4d0d      	ldr	r5, [pc, #52]	; (8004df8 <__libc_init_array+0x38>)
 8004dc4:	4c0d      	ldr	r4, [pc, #52]	; (8004dfc <__libc_init_array+0x3c>)
 8004dc6:	1b64      	subs	r4, r4, r5
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	2600      	movs	r6, #0
 8004dcc:	42a6      	cmp	r6, r4
 8004dce:	d109      	bne.n	8004de4 <__libc_init_array+0x24>
 8004dd0:	4d0b      	ldr	r5, [pc, #44]	; (8004e00 <__libc_init_array+0x40>)
 8004dd2:	4c0c      	ldr	r4, [pc, #48]	; (8004e04 <__libc_init_array+0x44>)
 8004dd4:	f000 f820 	bl	8004e18 <_init>
 8004dd8:	1b64      	subs	r4, r4, r5
 8004dda:	10a4      	asrs	r4, r4, #2
 8004ddc:	2600      	movs	r6, #0
 8004dde:	42a6      	cmp	r6, r4
 8004de0:	d105      	bne.n	8004dee <__libc_init_array+0x2e>
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de8:	4798      	blx	r3
 8004dea:	3601      	adds	r6, #1
 8004dec:	e7ee      	b.n	8004dcc <__libc_init_array+0xc>
 8004dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df2:	4798      	blx	r3
 8004df4:	3601      	adds	r6, #1
 8004df6:	e7f2      	b.n	8004dde <__libc_init_array+0x1e>
 8004df8:	08004e70 	.word	0x08004e70
 8004dfc:	08004e70 	.word	0x08004e70
 8004e00:	08004e70 	.word	0x08004e70
 8004e04:	08004e74 	.word	0x08004e74

08004e08 <memset>:
 8004e08:	4402      	add	r2, r0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <_init>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	bf00      	nop
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr

08004e24 <_fini>:
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e26:	bf00      	nop
 8004e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	469e      	mov	lr, r3
 8004e2e:	4770      	bx	lr
